"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inspect = inspect;
exports.registerConstructor = registerConstructor;
exports.registerStringTag = registerStringTag;
exports["default"] = exports.custom = void 0;

var _array = _interopRequireDefault(require("./array.js"));

var _typedarray = _interopRequireDefault(require("./typedarray.js"));

var _date = _interopRequireDefault(require("./date.js"));

var _function = _interopRequireDefault(require("./function.js"));

var _map = _interopRequireDefault(require("./map.js"));

var _number = _interopRequireDefault(require("./number.js"));

var _bigint = _interopRequireDefault(require("./bigint.js"));

var _regexp = _interopRequireDefault(require("./regexp.js"));

var _set = _interopRequireDefault(require("./set.js"));

var _string = _interopRequireDefault(require("./string.js"));

var _symbol = _interopRequireDefault(require("./symbol.js"));

var _promise = _interopRequireDefault(require("./promise.js"));

var _class = _interopRequireDefault(require("./class.js"));

var _object = _interopRequireDefault(require("./object.js"));

var _arguments = _interopRequireDefault(require("./arguments.js"));

var _error = _interopRequireDefault(require("./error.js"));

var _html = _interopRequireWildcard(require("./html.js"));

var _helpers = require("./helpers.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var symbolsSupported = typeof Symbol === 'function' && typeof Symbol["for"] === 'function';
var chaiInspect = symbolsSupported ? Symbol["for"]('chai/inspect') : '@@chai/inspect';
var nodeInspect = false;

try {
  // eslint-disable-next-line global-require
  // @ts-ignore
  var nodeUtil = require('util');

  nodeInspect = nodeUtil.inspect ? nodeUtil.inspect.custom : false;
} catch (noNodeInspect) {
  nodeInspect = false;
}

var constructorMap = new WeakMap();
var stringTagMap = {};
var baseTypesMap = {
  undefined: function undefined(value, options) {
    return options.stylize('undefined', 'undefined');
  },
  "null": function _null(value, options) {
    return options.stylize('null', 'null');
  },
  "boolean": function boolean(value, options) {
    return options.stylize(String(value), 'boolean');
  },
  Boolean: function Boolean(value, options) {
    return options.stylize(String(value), 'boolean');
  },
  number: _number["default"],
  Number: _number["default"],
  bigint: _bigint["default"],
  BigInt: _bigint["default"],
  string: _string["default"],
  String: _string["default"],
  "function": _function["default"],
  Function: _function["default"],
  symbol: _symbol["default"],
  // A Symbol polyfill will return `Symbol` not `symbol` from typedetect
  Symbol: _symbol["default"],
  Array: _array["default"],
  Date: _date["default"],
  Map: _map["default"],
  Set: _set["default"],
  RegExp: _regexp["default"],
  Promise: _promise["default"],
  // WeakSet, WeakMap are totally opaque to us
  WeakSet: function WeakSet(value, options) {
    return options.stylize('WeakSet{…}', 'special');
  },
  WeakMap: function WeakMap(value, options) {
    return options.stylize('WeakMap{…}', 'special');
  },
  Arguments: _arguments["default"],
  Int8Array: _typedarray["default"],
  Uint8Array: _typedarray["default"],
  Uint8ClampedArray: _typedarray["default"],
  Int16Array: _typedarray["default"],
  Uint16Array: _typedarray["default"],
  Int32Array: _typedarray["default"],
  Uint32Array: _typedarray["default"],
  Float32Array: _typedarray["default"],
  Float64Array: _typedarray["default"],
  Generator: function Generator() {
    return '';
  },
  DataView: function DataView() {
    return '';
  },
  ArrayBuffer: function ArrayBuffer() {
    return '';
  },
  Error: _error["default"],
  HTMLCollection: _html.inspectHTMLCollection,
  NodeList: _html.inspectHTMLCollection
}; // eslint-disable-next-line complexity

var inspectCustom = function inspectCustom(value, options, type) {
  if (chaiInspect in value && typeof value[chaiInspect] === 'function') {
    return value[chaiInspect](options);
  }

  if (nodeInspect && nodeInspect in value && typeof value[nodeInspect] === 'function') {
    return value[nodeInspect](options.depth, options);
  }

  if ('inspect' in value && typeof value.inspect === 'function') {
    return value.inspect(options.depth, options);
  }

  if ('constructor' in value && constructorMap.has(value.constructor)) {
    return constructorMap.get(value.constructor)(value, options);
  }

  if (stringTagMap[type]) {
    return stringTagMap[type](value, options);
  }

  return '';
};

var toString = Object.prototype.toString; // eslint-disable-next-line complexity

function inspect(value) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var options = (0, _helpers.normaliseOptions)(opts, inspect);
  var customInspect = options.customInspect;
  var type = value === null ? 'null' : _typeof(value);

  if (type === 'object') {
    type = toString.call(value).slice(8, -1);
  } // If it is a base value that we already support, then use Loupe's inspector


  if (type in baseTypesMap) {
    return baseTypesMap[type](value, options);
  } // If `options.customInspect` is set to true then try to use the custom inspector


  if (customInspect && value) {
    var output = inspectCustom(value, options, type);

    if (output) {
      if (typeof output === 'string') return output;
      return inspect(output, options);
    }
  }

  var proto = value ? Object.getPrototypeOf(value) : false; // If it's a plain Object then use Loupe's inspector

  if (proto === Object.prototype || proto === null) {
    return (0, _object["default"])(value, options);
  } // Specifically account for HTMLElements
  // @ts-ignore


  if (value && typeof HTMLElement === 'function' && value instanceof HTMLElement) {
    return (0, _html["default"])(value, options);
  }

  if ('constructor' in value) {
    // If it is a class, inspect it like an object but add the constructor name
    if (value.constructor !== Object) {
      return (0, _class["default"])(value, options);
    } // If it is an object with an anonymous prototype, display it as an object.


    return (0, _object["default"])(value, options);
  } // last chance to check if it's an object


  if (value === Object(value)) {
    return (0, _object["default"])(value, options);
  } // We have run out of options! Just stringify the value


  return options.stylize(String(value), type);
}

function registerConstructor(constructor, inspector) {
  if (constructorMap.has(constructor)) {
    return false;
  }

  constructorMap.set(constructor, inspector);
  return true;
}

function registerStringTag(stringTag, inspector) {
  if (stringTag in stringTagMap) {
    return false;
  }

  stringTagMap[stringTag] = inspector;
  return true;
}

var custom = chaiInspect;
exports.custom = custom;
var _default = inspect;
exports["default"] = _default;