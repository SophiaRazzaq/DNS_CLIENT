"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = inspectTypedArray;

var _helpers = require("./helpers.js");

var getArrayName = function getArrayName(array) {
  // We need to special case Node.js' Buffers, which report to be Uint8Array
  // @ts-ignore
  if (typeof Buffer === 'function' && array instanceof Buffer) {
    return 'Buffer';
  }

  if (array[Symbol.toStringTag]) {
    return array[Symbol.toStringTag];
  }

  return array.constructor.name;
};

function inspectTypedArray(array, options) {
  var name = getArrayName(array);
  options.truncate -= name.length + 4; // Object.keys will always output the Array indices first, so we can slice by
  // `array.length` to get non-index properties

  var nonIndexProperties = Object.keys(array).slice(array.length);
  if (!array.length && !nonIndexProperties.length) return "".concat(name, "[]"); // As we know TypedArrays only contain Unsigned Integers, we can skip inspecting each one and simply
  // stylise the toString() value of them

  var output = '';

  for (var i = 0; i < array.length; i++) {
    var string = "".concat(options.stylize((0, _helpers.truncate)(array[i], options.truncate), 'number')).concat(i === array.length - 1 ? '' : ', ');
    options.truncate -= string.length;

    if (array[i] !== array.length && options.truncate <= 3) {
      output += "".concat(_helpers.truncator, "(").concat(array.length - array[i] + 1, ")");
      break;
    }

    output += string;
  }

  var propertyContents = '';

  if (nonIndexProperties.length) {
    propertyContents = (0, _helpers.inspectList)(nonIndexProperties.map(function (key) {
      return [key, array[key]];
    }), options, _helpers.inspectProperty);
  }

  return "".concat(name, "[ ").concat(output).concat(propertyContents ? ", ".concat(propertyContents) : '', " ]");
}