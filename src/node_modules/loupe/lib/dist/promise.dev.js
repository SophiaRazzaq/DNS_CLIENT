"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var getPromiseValue = function getPromiseValue() {
  return 'Promise{â€¦}';
};

try {
  // @ts-ignore
  var _process$binding = process.binding('util'),
      getPromiseDetails = _process$binding.getPromiseDetails,
      kPending = _process$binding.kPending,
      kRejected = _process$binding.kRejected;

  if (Array.isArray(getPromiseDetails(Promise.resolve()))) {
    getPromiseValue = function getPromiseValue(value, options) {
      var _getPromiseDetails = getPromiseDetails(value),
          _getPromiseDetails2 = _slicedToArray(_getPromiseDetails, 2),
          state = _getPromiseDetails2[0],
          innerValue = _getPromiseDetails2[1];

      if (state === kPending) {
        return 'Promise{<pending>}';
      }

      return "Promise".concat(state === kRejected ? '!' : '', "{").concat(options.inspect(innerValue, options), "}");
    };
  }
} catch (notNode) {
  /* ignore */
}

var _default = getPromiseValue;
exports["default"] = _default;