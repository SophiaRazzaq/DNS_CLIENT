"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inspectAttribute = inspectAttribute;
exports.inspectHTMLCollection = inspectHTMLCollection;
exports["default"] = inspectHTML;

var _helpers = require("./helpers.js");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function inspectAttribute(_ref, options) {
  var _ref2 = _slicedToArray(_ref, 2),
      key = _ref2[0],
      value = _ref2[1];

  options.truncate -= 3;

  if (!value) {
    return "".concat(options.stylize(String(key), 'yellow'));
  }

  return "".concat(options.stylize(String(key), 'yellow'), "=").concat(options.stylize("\"".concat(value, "\""), 'string'));
} // @ts-ignore (Deno doesn't have Element)


function inspectHTMLCollection(collection, options) {
  // eslint-disable-next-line no-use-before-define
  return (0, _helpers.inspectList)(collection, options, inspectHTML, '\n');
} // @ts-ignore (Deno doesn't have Element)


function inspectHTML(element, options) {
  var properties = element.getAttributeNames();
  var name = element.tagName.toLowerCase();
  var head = options.stylize("<".concat(name), 'special');
  var headClose = options.stylize(">", 'special');
  var tail = options.stylize("</".concat(name, ">"), 'special');
  options.truncate -= name.length * 2 + 5;
  var propertyContents = '';

  if (properties.length > 0) {
    propertyContents += ' ';
    propertyContents += (0, _helpers.inspectList)(properties.map(function (key) {
      return [key, element.getAttribute(key)];
    }), options, inspectAttribute, ' ');
  }

  options.truncate -= propertyContents.length;
  var truncate = options.truncate;
  var children = inspectHTMLCollection(element.children, options);

  if (children && children.length > truncate) {
    children = "".concat(_helpers.truncator, "(").concat(element.children.length, ")");
  }

  return "".concat(head).concat(propertyContents).concat(headClose).concat(children).concat(tail);
}