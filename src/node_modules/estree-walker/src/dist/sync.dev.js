"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SyncWalker = void 0;

var _walker = require("./walker.js");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/** @typedef { import('estree').BaseNode} BaseNode */

/** @typedef { import('./walker.js').WalkerContext} WalkerContext */

/** @typedef {(
 *    this: WalkerContext,
 *    node: BaseNode,
 *    parent: BaseNode,
 *    key: string,
 *    index: number
 * ) => void} SyncHandler */
var SyncWalker =
/*#__PURE__*/
function (_WalkerBase) {
  _inherits(SyncWalker, _WalkerBase);

  /**
   *
   * @param {SyncHandler} enter
   * @param {SyncHandler} leave
   */
  function SyncWalker(enter, leave) {
    var _this;

    _classCallCheck(this, SyncWalker);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SyncWalker).call(this));
    /** @type {SyncHandler} */

    _this.enter = enter;
    /** @type {SyncHandler} */

    _this.leave = leave;
    return _this;
  }
  /**
   *
   * @param {BaseNode} node
   * @param {BaseNode} parent
   * @param {string} [prop]
   * @param {number} [index]
   * @returns {BaseNode}
   */


  _createClass(SyncWalker, [{
    key: "visit",
    value: function visit(node, parent, prop, index) {
      if (node) {
        if (this.enter) {
          var _should_skip = this.should_skip;
          var _should_remove = this.should_remove;
          var _replacement = this.replacement;
          this.should_skip = false;
          this.should_remove = false;
          this.replacement = null;
          this.enter.call(this.context, node, parent, prop, index);

          if (this.replacement) {
            node = this.replacement;
            this.replace(parent, prop, index, node);
          }

          if (this.should_remove) {
            this.remove(parent, prop, index);
          }

          var skipped = this.should_skip;
          var removed = this.should_remove;
          this.should_skip = _should_skip;
          this.should_remove = _should_remove;
          this.replacement = _replacement;
          if (skipped) return node;
          if (removed) return null;
        }

        for (var key in node) {
          var value = node[key];

          if (_typeof(value) !== "object") {
            continue;
          } else if (Array.isArray(value)) {
            for (var i = 0; i < value.length; i += 1) {
              if (value[i] !== null && typeof value[i].type === 'string') {
                if (!this.visit(value[i], node, key, i)) {
                  // removed
                  i--;
                }
              }
            }
          } else if (value !== null && typeof value.type === "string") {
            this.visit(value, node, key, null);
          }
        }

        if (this.leave) {
          var _replacement2 = this.replacement;
          var _should_remove2 = this.should_remove;
          this.replacement = null;
          this.should_remove = false;
          this.leave.call(this.context, node, parent, prop, index);

          if (this.replacement) {
            node = this.replacement;
            this.replace(parent, prop, index, node);
          }

          if (this.should_remove) {
            this.remove(parent, prop, index);
          }

          var _removed = this.should_remove;
          this.replacement = _replacement2;
          this.should_remove = _should_remove2;
          if (_removed) return null;
        }
      }

      return node;
    }
  }]);

  return SyncWalker;
}(_walker.WalkerBase);

exports.SyncWalker = SyncWalker;