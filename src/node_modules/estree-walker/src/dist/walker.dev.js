"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WalkerBase = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// @ts-check

/** @typedef { import('estree').BaseNode} BaseNode */

/** @typedef {{
	skip: () => void;
	remove: () => void;
	replace: (node: BaseNode) => void;
}} WalkerContext */
var WalkerBase =
/*#__PURE__*/
function () {
  function WalkerBase() {
    var _this = this;

    _classCallCheck(this, WalkerBase);

    /** @type {boolean} */
    this.should_skip = false;
    /** @type {boolean} */

    this.should_remove = false;
    /** @type {BaseNode | null} */

    this.replacement = null;
    /** @type {WalkerContext} */

    this.context = {
      skip: function skip() {
        return _this.should_skip = true;
      },
      remove: function remove() {
        return _this.should_remove = true;
      },
      replace: function replace(node) {
        return _this.replacement = node;
      }
    };
  }
  /**
   *
   * @param {any} parent
   * @param {string} prop
   * @param {number} index
   * @param {BaseNode} node
   */


  _createClass(WalkerBase, [{
    key: "replace",
    value: function replace(parent, prop, index, node) {
      if (parent) {
        if (index !== null) {
          parent[prop][index] = node;
        } else {
          parent[prop] = node;
        }
      }
    }
    /**
     *
     * @param {any} parent
     * @param {string} prop
     * @param {number} index
     */

  }, {
    key: "remove",
    value: function remove(parent, prop, index) {
      if (parent) {
        if (index !== null) {
          parent[prop].splice(index, 1);
        } else {
          delete parent[prop];
        }
      }
    }
  }]);

  return WalkerBase;
}();

exports.WalkerBase = WalkerBase;