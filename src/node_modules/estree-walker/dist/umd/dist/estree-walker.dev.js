"use strict";

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global.estreeWalker = {}));
})(void 0, function (exports) {
  'use strict'; // @ts-check

  /** @typedef { import('estree').BaseNode} BaseNode */

  /** @typedef {{
  	skip: () => void;
  	remove: () => void;
  	replace: (node: BaseNode) => void;
  }} WalkerContext */

  var WalkerBase =
  /*#__PURE__*/
  function () {
    function WalkerBase() {
      var _this = this;

      _classCallCheck(this, WalkerBase);

      /** @type {boolean} */
      this.should_skip = false;
      /** @type {boolean} */

      this.should_remove = false;
      /** @type {BaseNode | null} */

      this.replacement = null;
      /** @type {WalkerContext} */

      this.context = {
        skip: function skip() {
          return _this.should_skip = true;
        },
        remove: function remove() {
          return _this.should_remove = true;
        },
        replace: function replace(node) {
          return _this.replacement = node;
        }
      };
    }
    /**
     *
     * @param {any} parent
     * @param {string} prop
     * @param {number} index
     * @param {BaseNode} node
     */


    _createClass(WalkerBase, [{
      key: "replace",
      value: function replace(parent, prop, index, node) {
        if (parent) {
          if (index !== null) {
            parent[prop][index] = node;
          } else {
            parent[prop] = node;
          }
        }
      }
      /**
       *
       * @param {any} parent
       * @param {string} prop
       * @param {number} index
       */

    }, {
      key: "remove",
      value: function remove(parent, prop, index) {
        if (parent) {
          if (index !== null) {
            parent[prop].splice(index, 1);
          } else {
            delete parent[prop];
          }
        }
      }
    }]);

    return WalkerBase;
  }(); // @ts-check

  /** @typedef { import('estree').BaseNode} BaseNode */

  /** @typedef { import('./walker.js').WalkerContext} WalkerContext */

  /** @typedef {(
   *    this: WalkerContext,
   *    node: BaseNode,
   *    parent: BaseNode,
   *    key: string,
   *    index: number
   * ) => void} SyncHandler */


  var SyncWalker =
  /*#__PURE__*/
  function (_WalkerBase) {
    _inherits(SyncWalker, _WalkerBase);

    /**
     *
     * @param {SyncHandler} enter
     * @param {SyncHandler} leave
     */
    function SyncWalker(enter, leave) {
      var _this2;

      _classCallCheck(this, SyncWalker);

      _this2 = _possibleConstructorReturn(this, _getPrototypeOf(SyncWalker).call(this));
      /** @type {SyncHandler} */

      _this2.enter = enter;
      /** @type {SyncHandler} */

      _this2.leave = leave;
      return _this2;
    }
    /**
     *
     * @param {BaseNode} node
     * @param {BaseNode} parent
     * @param {string} [prop]
     * @param {number} [index]
     * @returns {BaseNode}
     */


    _createClass(SyncWalker, [{
      key: "visit",
      value: function visit(node, parent, prop, index) {
        if (node) {
          if (this.enter) {
            var _should_skip = this.should_skip;
            var _should_remove = this.should_remove;
            var _replacement = this.replacement;
            this.should_skip = false;
            this.should_remove = false;
            this.replacement = null;
            this.enter.call(this.context, node, parent, prop, index);

            if (this.replacement) {
              node = this.replacement;
              this.replace(parent, prop, index, node);
            }

            if (this.should_remove) {
              this.remove(parent, prop, index);
            }

            var skipped = this.should_skip;
            var removed = this.should_remove;
            this.should_skip = _should_skip;
            this.should_remove = _should_remove;
            this.replacement = _replacement;
            if (skipped) return node;
            if (removed) return null;
          }

          for (var key in node) {
            var value = node[key];

            if (_typeof(value) !== "object") {
              continue;
            } else if (Array.isArray(value)) {
              for (var i = 0; i < value.length; i += 1) {
                if (value[i] !== null && typeof value[i].type === 'string') {
                  if (!this.visit(value[i], node, key, i)) {
                    // removed
                    i--;
                  }
                }
              }
            } else if (value !== null && typeof value.type === "string") {
              this.visit(value, node, key, null);
            }
          }

          if (this.leave) {
            var _replacement2 = this.replacement;
            var _should_remove2 = this.should_remove;
            this.replacement = null;
            this.should_remove = false;
            this.leave.call(this.context, node, parent, prop, index);

            if (this.replacement) {
              node = this.replacement;
              this.replace(parent, prop, index, node);
            }

            if (this.should_remove) {
              this.remove(parent, prop, index);
            }

            var _removed = this.should_remove;
            this.replacement = _replacement2;
            this.should_remove = _should_remove2;
            if (_removed) return null;
          }
        }

        return node;
      }
    }]);

    return SyncWalker;
  }(WalkerBase); // @ts-check

  /** @typedef { import('estree').BaseNode} BaseNode */

  /** @typedef { import('./walker').WalkerContext} WalkerContext */

  /** @typedef {(
   *    this: WalkerContext,
   *    node: BaseNode,
   *    parent: BaseNode,
   *    key: string,
   *    index: number
   * ) => Promise<void>} AsyncHandler */


  var AsyncWalker =
  /*#__PURE__*/
  function (_WalkerBase2) {
    _inherits(AsyncWalker, _WalkerBase2);

    /**
     *
     * @param {AsyncHandler} enter
     * @param {AsyncHandler} leave
     */
    function AsyncWalker(enter, leave) {
      var _this3;

      _classCallCheck(this, AsyncWalker);

      _this3 = _possibleConstructorReturn(this, _getPrototypeOf(AsyncWalker).call(this));
      /** @type {AsyncHandler} */

      _this3.enter = enter;
      /** @type {AsyncHandler} */

      _this3.leave = leave;
      return _this3;
    }
    /**
     *
     * @param {BaseNode} node
     * @param {BaseNode} parent
     * @param {string} [prop]
     * @param {number} [index]
     * @returns {Promise<BaseNode>}
     */


    _createClass(AsyncWalker, [{
      key: "visit",
      value: function visit(node, parent, prop, index) {
        var _should_skip, _should_remove, _replacement, skipped, removed, key, value, i, _replacement3, _should_remove3, _removed2;

        return regeneratorRuntime.async(function visit$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!node) {
                  _context.next = 61;
                  break;
                }

                if (!this.enter) {
                  _context.next = 21;
                  break;
                }

                _should_skip = this.should_skip;
                _should_remove = this.should_remove;
                _replacement = this.replacement;
                this.should_skip = false;
                this.should_remove = false;
                this.replacement = null;
                _context.next = 10;
                return regeneratorRuntime.awrap(this.enter.call(this.context, node, parent, prop, index));

              case 10:
                if (this.replacement) {
                  node = this.replacement;
                  this.replace(parent, prop, index, node);
                }

                if (this.should_remove) {
                  this.remove(parent, prop, index);
                }

                skipped = this.should_skip;
                removed = this.should_remove;
                this.should_skip = _should_skip;
                this.should_remove = _should_remove;
                this.replacement = _replacement;

                if (!skipped) {
                  _context.next = 19;
                  break;
                }

                return _context.abrupt("return", node);

              case 19:
                if (!removed) {
                  _context.next = 21;
                  break;
                }

                return _context.abrupt("return", null);

              case 21:
                _context.t0 = regeneratorRuntime.keys(node);

              case 22:
                if ((_context.t1 = _context.t0()).done) {
                  _context.next = 47;
                  break;
                }

                key = _context.t1.value;
                value = node[key];

                if (!(_typeof(value) !== "object")) {
                  _context.next = 29;
                  break;
                }

                return _context.abrupt("continue", 22);

              case 29:
                if (!Array.isArray(value)) {
                  _context.next = 42;
                  break;
                }

                i = 0;

              case 31:
                if (!(i < value.length)) {
                  _context.next = 40;
                  break;
                }

                if (!(value[i] !== null && typeof value[i].type === 'string')) {
                  _context.next = 37;
                  break;
                }

                _context.next = 35;
                return regeneratorRuntime.awrap(this.visit(value[i], node, key, i));

              case 35:
                if (_context.sent) {
                  _context.next = 37;
                  break;
                }

                // removed
                i--;

              case 37:
                i += 1;
                _context.next = 31;
                break;

              case 40:
                _context.next = 45;
                break;

              case 42:
                if (!(value !== null && typeof value.type === "string")) {
                  _context.next = 45;
                  break;
                }

                _context.next = 45;
                return regeneratorRuntime.awrap(this.visit(value, node, key, null));

              case 45:
                _context.next = 22;
                break;

              case 47:
                if (!this.leave) {
                  _context.next = 61;
                  break;
                }

                _replacement3 = this.replacement;
                _should_remove3 = this.should_remove;
                this.replacement = null;
                this.should_remove = false;
                _context.next = 54;
                return regeneratorRuntime.awrap(this.leave.call(this.context, node, parent, prop, index));

              case 54:
                if (this.replacement) {
                  node = this.replacement;
                  this.replace(parent, prop, index, node);
                }

                if (this.should_remove) {
                  this.remove(parent, prop, index);
                }

                _removed2 = this.should_remove;
                this.replacement = _replacement3;
                this.should_remove = _should_remove3;

                if (!_removed2) {
                  _context.next = 61;
                  break;
                }

                return _context.abrupt("return", null);

              case 61:
                return _context.abrupt("return", node);

              case 62:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }]);

    return AsyncWalker;
  }(WalkerBase); // @ts-check

  /** @typedef { import('estree').BaseNode} BaseNode */

  /** @typedef { import('./sync.js').SyncHandler} SyncHandler */

  /** @typedef { import('./async.js').AsyncHandler} AsyncHandler */

  /**
   *
   * @param {BaseNode} ast
   * @param {{
   *   enter?: SyncHandler
   *   leave?: SyncHandler
   * }} walker
   * @returns {BaseNode}
   */


  function walk(ast, _ref) {
    var enter = _ref.enter,
        leave = _ref.leave;
    var instance = new SyncWalker(enter, leave);
    return instance.visit(ast, null);
  }
  /**
   *
   * @param {BaseNode} ast
   * @param {{
   *   enter?: AsyncHandler
   *   leave?: AsyncHandler
   * }} walker
   * @returns {Promise<BaseNode>}
   */


  function asyncWalk(ast, _ref2) {
    var enter, leave, instance;
    return regeneratorRuntime.async(function asyncWalk$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            enter = _ref2.enter, leave = _ref2.leave;
            instance = new AsyncWalker(enter, leave);
            _context2.next = 4;
            return regeneratorRuntime.awrap(instance.visit(ast, null));

          case 4:
            return _context2.abrupt("return", _context2.sent);

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    });
  }

  exports.asyncWalk = asyncWalk;
  exports.walk = walk;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});