"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.finish = exports.test = exports.start = void 0;

var _serializeError = require("serialize-error");

var _indentString = _interopRequireDefault(require("indent-string"));

var _stripAnsi = _interopRequireDefault(require("strip-ansi"));

var _jsYaml = _interopRequireDefault(require("js-yaml"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var serializeErrorForTap = function serializeErrorForTap(error) {
  var _a;

  var object = (0, _serializeError.serializeError)(error);
  object['at'] = ((_a = object.stack) !== null && _a !== void 0 ? _a : '').split('\n').slice(1, 2).map(function (line) {
    return line.replace(/at/, '').trim();
  }).shift();
  delete object.stack;
  return object;
};

var start = function start() {
  return 'TAP version 13';
};

exports.start = start;

var test = function test(title, options) {
  var error = options.error;
  var passed = options.passed;
  var directive = '';

  if (!error) {
    if (options.todo) {
      directive = '# TODO';
      passed = false;
    } else if (options.skip) {
      directive = '# SKIP';
      passed = true;
    }
  }

  var comment = '';

  if (options.comment) {
    var comments = Array.isArray(options.comment) ? options.comment : [options.comment];
    comment = comments.map(function (line) {
      return (0, _indentString["default"])(line, 4).replace(/^ {4}/gm, '#   ');
    }).join('\n');
  }

  var output = ["".concat(passed ? 'ok' : 'not ok', " ").concat(options.index, " - ").concat((0, _stripAnsi["default"])(title), " ").concat(directive).trim(), comment];

  if (error) {
    var object = error instanceof Error ? serializeErrorForTap(error) : error;
    output.push(['  ---', (0, _indentString["default"])(_jsYaml["default"].safeDump(object).trim(), 4), '  ...'].join('\n'));
  }

  return output.filter(Boolean).join('\n');
};

exports.test = test;

var finish = function finish(stats) {
  var _a, _b, _c, _d, _e;

  stats = stats !== null && stats !== void 0 ? stats : {};
  var passed = (_a = stats.passed) !== null && _a !== void 0 ? _a : 0;
  var failed = (_b = stats.failed) !== null && _b !== void 0 ? _b : 0;
  var skipped = (_c = stats.skipped) !== null && _c !== void 0 ? _c : 0;
  var todo = (_d = stats.todo) !== null && _d !== void 0 ? _d : 0;
  var crashed = (_e = stats.crashed) !== null && _e !== void 0 ? _e : 0;
  return ["\n1..".concat(passed + failed + skipped + todo), "# tests ".concat(passed + failed + skipped), "# pass ".concat(passed), skipped > 0 ? "# skip ".concat(skipped) : null, "# fail ".concat(failed + crashed + todo, "\n")].filter(Boolean).join('\n');
};

exports.finish = finish;