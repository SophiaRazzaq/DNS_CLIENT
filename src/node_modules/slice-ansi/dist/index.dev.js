"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = sliceAnsi;

var _isFullwidthCodePoint = _interopRequireDefault(require("is-fullwidth-code-point"));

var _ansiStyles = _interopRequireDefault(require("ansi-styles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var astralRegex = /^[\uD800-\uDBFF][\uDC00-\uDFFF]$/;
var ESCAPES = ["\x1B", "\x9B"];

var wrapAnsi = function wrapAnsi(code) {
  return "".concat(ESCAPES[0], "[").concat(code, "m");
};

var checkAnsi = function checkAnsi(ansiCodes, isEscapes, endAnsiCode) {
  var output = [];
  ansiCodes = _toConsumableArray(ansiCodes);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = ansiCodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var ansiCode = _step.value;
      var ansiCodeOrigin = ansiCode;

      if (ansiCode.includes(';')) {
        ansiCode = ansiCode.split(';')[0][0] + '0';
      }

      var item = _ansiStyles["default"].codes.get(Number.parseInt(ansiCode, 10));

      if (item) {
        var indexEscape = ansiCodes.indexOf(item.toString());

        if (indexEscape === -1) {
          output.push(wrapAnsi(isEscapes ? item : ansiCodeOrigin));
        } else {
          ansiCodes.splice(indexEscape, 1);
        }
      } else if (isEscapes) {
        output.push(wrapAnsi(0));
        break;
      } else {
        output.push(wrapAnsi(ansiCodeOrigin));
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (isEscapes) {
    output = output.filter(function (element, index) {
      return output.indexOf(element) === index;
    });

    if (endAnsiCode !== undefined) {
      var fistEscapeCode = wrapAnsi(_ansiStyles["default"].codes.get(Number.parseInt(endAnsiCode, 10))); // TODO: Remove the use of `.reduce` here.
      // eslint-disable-next-line unicorn/no-array-reduce

      output = output.reduce(function (current, next) {
        return next === fistEscapeCode ? [next].concat(_toConsumableArray(current)) : [].concat(_toConsumableArray(current), [next]);
      }, []);
    }
  }

  return output.join('');
};

function sliceAnsi(string, begin, end) {
  var characters = _toConsumableArray(string);

  var ansiCodes = [];
  var stringEnd = typeof end === 'number' ? end : characters.length;
  var isInsideEscape = false;
  var ansiCode;
  var visible = 0;
  var output = '';
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = characters.entries()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _step2$value = _slicedToArray(_step2.value, 2),
          index = _step2$value[0],
          character = _step2$value[1];

      var leftEscape = false;

      if (ESCAPES.includes(character)) {
        var code = /\d[^m]*/.exec(string.slice(index, index + 18));
        ansiCode = code && code.length > 0 ? code[0] : undefined;

        if (visible < stringEnd) {
          isInsideEscape = true;

          if (ansiCode !== undefined) {
            ansiCodes.push(ansiCode);
          }
        }
      } else if (isInsideEscape && character === 'm') {
        isInsideEscape = false;
        leftEscape = true;
      }

      if (!isInsideEscape && !leftEscape) {
        visible++;
      }

      if (!astralRegex.test(character) && (0, _isFullwidthCodePoint["default"])(character.codePointAt())) {
        visible++;

        if (typeof end !== 'number') {
          stringEnd++;
        }
      }

      if (visible > begin && visible <= stringEnd) {
        output += character;
      } else if (visible === begin && !isInsideEscape && ansiCode !== undefined) {
        output = checkAnsi(ansiCodes);
      } else if (visible >= stringEnd) {
        output += checkAnsi(ansiCodes, true, ansiCode);
        break;
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return output;
}