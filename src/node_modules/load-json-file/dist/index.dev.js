"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadJsonFile = loadJsonFile;
exports.loadJsonFileSync = loadJsonFileSync;

var _nodeFs = require("node:fs");

var readFile = _nodeFs.promises.readFile;

var parse = function parse(buffer) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      beforeParse = _ref.beforeParse,
      reviver = _ref.reviver;

  // Unlike `buffer.toString()` and `fs.readFile(path, 'utf8')`, `TextDecoder`` will remove BOM.
  var data = new TextDecoder().decode(buffer);

  if (typeof beforeParse === 'function') {
    data = beforeParse(data);
  }

  return JSON.parse(data, reviver);
};

function loadJsonFile(filePath, options) {
  var buffer;
  return regeneratorRuntime.async(function loadJsonFile$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return regeneratorRuntime.awrap(readFile(filePath));

        case 2:
          buffer = _context.sent;
          return _context.abrupt("return", parse(buffer, options));

        case 4:
        case "end":
          return _context.stop();
      }
    }
  });
}

function loadJsonFileSync(filePath, options) {
  var buffer = (0, _nodeFs.readFileSync)(filePath);
  return parse(buffer, options);
}