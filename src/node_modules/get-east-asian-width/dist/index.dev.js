"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.eastAsianWidthType = eastAsianWidthType;
exports.eastAsianWidth = eastAsianWidth;
exports._isNarrowWidth = void 0;

var _lookup = require("./lookup.js");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function validate(codePoint) {
  if (!Number.isSafeInteger(codePoint)) {
    throw new TypeError("Expected a code point, got `".concat(_typeof(codePoint), "`."));
  }
}

function eastAsianWidthType(codePoint) {
  validate(codePoint);
  return (0, _lookup.getCategory)(codePoint);
}

function eastAsianWidth(codePoint) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$ambiguousAsWide = _ref.ambiguousAsWide,
      ambiguousAsWide = _ref$ambiguousAsWide === void 0 ? false : _ref$ambiguousAsWide;

  validate(codePoint);

  if ((0, _lookup.isFullWidth)(codePoint) || (0, _lookup.isWide)(codePoint) || ambiguousAsWide && (0, _lookup.isAmbiguous)(codePoint)) {
    return 2;
  }

  return 1;
} // For Prettier. This doesn't count "ambiguous" characters or check for valid input.
// https://github.com/sindresorhus/get-east-asian-width/pull/6


var _isNarrowWidth = function _isNarrowWidth(codePoint) {
  return !((0, _lookup.isFullWidth)(codePoint) || (0, _lookup.isWide)(codePoint));
};

exports._isNarrowWidth = _isNarrowWidth;