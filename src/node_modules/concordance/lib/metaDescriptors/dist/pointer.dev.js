'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var UNEQUAL = require('../constants').UNEQUAL;

function describe(index) {
  return new Pointer(index);
}

exports.describe = describe;
exports.deserialize = describe;
var tag = Symbol('Pointer');
exports.tag = tag;

var Pointer =
/*#__PURE__*/
function () {
  function Pointer(index) {
    _classCallCheck(this, Pointer);

    this.index = index;
  } // Pointers cannot be compared, and are not expected to be part of the
  // comparisons.


  _createClass(Pointer, [{
    key: "compare",
    value: function compare(expected) {
      return UNEQUAL;
    }
  }, {
    key: "serialize",
    value: function serialize() {
      return this.index;
    }
  }]);

  return Pointer;
}();

Object.defineProperty(Pointer.prototype, 'isPointer', {
  value: true
});
Object.defineProperty(Pointer.prototype, 'tag', {
  value: tag
});