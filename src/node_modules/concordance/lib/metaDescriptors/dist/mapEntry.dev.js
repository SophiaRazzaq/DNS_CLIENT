'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var constants = require('../constants');

var lineBuilder = require('../lineBuilder');

var recursorUtils = require('../recursorUtils');

var themeUtils = require('../themeUtils');

var DEEP_EQUAL = constants.DEEP_EQUAL;
var UNEQUAL = constants.UNEQUAL;
var SHALLOW_EQUAL = constants.SHALLOW_EQUAL;

function describe(keyDescriptor, valueDescriptor) {
  var keyIsPrimitive = keyDescriptor.isPrimitive === true;
  var valueIsPrimitive = valueDescriptor.isPrimitive === true;
  return new MapEntry(keyDescriptor, valueDescriptor, keyIsPrimitive, valueIsPrimitive);
}

exports.describe = describe;

function deserialize(state, recursor) {
  var keyIsPrimitive = state[0];
  var valueIsPrimitive = state[1];
  var keyDescriptor = recursor();
  var valueDescriptor = recursor();
  return new MapEntry(keyDescriptor, valueDescriptor, keyIsPrimitive, valueIsPrimitive);
}

exports.deserialize = deserialize;
var tag = Symbol('MapEntry');
exports.tag = tag;

function mergeWithKey(theme, key, values) {
  var lines = lineBuilder.buffer();
  var keyRemainder = lineBuilder.buffer();
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = key[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var line = _step.value;

      if (!line.isLast && !line.hasGutter) {
        lines.append(line);
      } else {
        keyRemainder.append(line);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = values[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var value = _step2.value;
      lines.append(keyRemainder.mergeWithInfix(theme.mapEntry.separator, value).withLastPostfixed(theme.mapEntry.after));
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return lines;
}

var MapEntry =
/*#__PURE__*/
function () {
  function MapEntry(key, value, keyIsPrimitive, valueIsPrimitive) {
    _classCallCheck(this, MapEntry);

    this.key = key;
    this.value = value;
    this.keyIsPrimitive = keyIsPrimitive;
    this.valueIsPrimitive = valueIsPrimitive;
  }

  _createClass(MapEntry, [{
    key: "createRecursor",
    value: function createRecursor() {
      var _this = this;

      var emitKey = true;
      var emitValue = true;
      return function () {
        if (emitKey) {
          emitKey = false;
          return _this.key;
        }

        if (emitValue) {
          emitValue = false;
          return _this.value;
        }

        return null;
      };
    }
  }, {
    key: "compare",
    value: function compare(expected) {
      if (this.tag !== expected.tag) return UNEQUAL;
      if (this.keyIsPrimitive !== expected.keyIsPrimitive) return UNEQUAL;
      if (this.valueIsPrimitive !== expected.valueIsPrimitive) return UNEQUAL;
      if (!this.keyIsPrimitive) return SHALLOW_EQUAL;
      var keyResult = this.key.compare(expected.key);
      if (keyResult !== DEEP_EQUAL) return keyResult;
      if (!this.valueIsPrimitive) return SHALLOW_EQUAL;
      return this.value.compare(expected.value);
    }
  }, {
    key: "formatDeep",
    value: function formatDeep(theme, indent) {
      // Verify the map entry can be formatted directly.
      if (!this.keyIsPrimitive || typeof this.value.formatDeep !== 'function') return null; // Since formatShallow() would result in theme modifiers being applied
      // before the key and value are formatted, do the same here.

      var value = this.value.formatDeep(themeUtils.applyModifiersToOriginal(this.value, theme), indent);
      if (value === null) return null;
      var key = this.key.formatDeep(themeUtils.applyModifiersToOriginal(this.key, theme), indent);
      return mergeWithKey(theme, key, [value]);
    }
  }, {
    key: "formatShallow",
    value: function formatShallow(theme, indent) {
      var _this2 = this;

      var key = null;
      var values = [];
      return {
        append: function append(formatted, origin) {
          if (_this2.key === origin) {
            key = formatted;
          } else {
            values.push(formatted);
          }
        },
        finalize: function finalize() {
          return mergeWithKey(theme, key, values);
        }
      };
    }
  }, {
    key: "diffDeep",
    value: function diffDeep(expected, theme, indent, invert) {
      // Verify a diff can be returned.
      if (this.tag !== expected.tag || typeof this.value.diffDeep !== 'function') return null; // Only use this logic to format value diffs when the keys are primitive and equal.

      if (!this.keyIsPrimitive || !expected.keyIsPrimitive || this.key.compare(expected.key) !== DEEP_EQUAL) {
        return null;
      } // Since formatShallow() would result in theme modifiers being applied
      // before the key and value are formatted, do the same here.


      var diff = this.value.diffDeep(expected.value, themeUtils.applyModifiersToOriginal(this.value, theme), indent, invert);
      if (diff === null) return null;
      var key = this.key.formatDeep(themeUtils.applyModifiersToOriginal(this.key, theme), indent, '');
      return mergeWithKey(theme, key, [diff]);
    }
  }, {
    key: "prepareDiff",
    value: function prepareDiff(expected, lhsRecursor, rhsRecursor, compareComplexShape, isCircular) {
      // Circular values cannot be compared. They must be treated as being unequal when diffing.
      if (isCircular(this.value) || isCircular(expected.value)) return {
        compareResult: UNEQUAL
      };
      var compareResult = this.compare(expected);
      var keysAreEqual = this.tag === expected.tag && this.key.compare(expected.key) === DEEP_EQUAL; // Short-circuit when keys and/or values are deeply equal.

      if (compareResult === DEEP_EQUAL || keysAreEqual) return {
        compareResult: compareResult
      }; // Try to line up this or remaining map entries with the expected entries.

      var lhsFork = recursorUtils.fork(lhsRecursor);
      var rhsFork = recursorUtils.fork(rhsRecursor);
      var initialExpected = expected;
      var expectedIsMissing = false;

      while (!expectedIsMissing && expected !== null && this.tag === expected.tag) {
        if (expected.keyIsPrimitive) {
          expectedIsMissing = this.key.compare(expected.key) !== UNEQUAL;
        } else {
          expectedIsMissing = compareComplexShape(this.key, expected.key) !== UNEQUAL;
        }

        expected = rhsFork.shared();
      }

      var actualIsExtraneous = false;

      if (this.tag === initialExpected.tag) {
        if (initialExpected.keyIsPrimitive) {
          var actual = this;

          while (!actualIsExtraneous && actual !== null && this.tag === actual.tag) {
            if (actual.keyIsPrimitive) {
              actualIsExtraneous = initialExpected.key.compare(actual.key) === DEEP_EQUAL;
            }

            actual = lhsFork.shared();
          }
        } else {
          var _actual = this;

          while (!actualIsExtraneous && _actual !== null && this.tag === _actual.tag) {
            if (!_actual.keyIsPrimitive) {
              actualIsExtraneous = compareComplexShape(_actual.key, initialExpected.key) !== UNEQUAL;
            }

            _actual = lhsFork.shared();
          }
        }
      }

      if (actualIsExtraneous && !expectedIsMissing) {
        return {
          actualIsExtraneous: true,
          lhsRecursor: lhsFork.recursor,
          rhsRecursor: recursorUtils.unshift(rhsFork.recursor, initialExpected)
        };
      }

      if (expectedIsMissing && !actualIsExtraneous) {
        return {
          expectedIsMissing: true,
          lhsRecursor: recursorUtils.unshift(lhsFork.recursor, this),
          rhsRecursor: rhsFork.recursor
        };
      }

      var mustRecurse = false;

      if (!this.keyIsPrimitive && !initialExpected.keyIsPrimitive) {
        if (this.valueIsPrimitive || initialExpected.valueIsPrimitive) {
          mustRecurse = this.value.compare(initialExpected.value) !== UNEQUAL;
        } else {
          mustRecurse = compareComplexShape(this.value, initialExpected.value) !== UNEQUAL;
        }
      }

      return {
        mustRecurse: mustRecurse,
        isUnequal: !mustRecurse,
        lhsRecursor: lhsFork.recursor,
        rhsRecursor: rhsFork.recursor
      };
    }
  }, {
    key: "serialize",
    value: function serialize() {
      return [this.keyIsPrimitive, this.valueIsPrimitive];
    }
  }]);

  return MapEntry;
}();

Object.defineProperty(MapEntry.prototype, 'isMapEntry', {
  value: true
});
Object.defineProperty(MapEntry.prototype, 'tag', {
  value: tag
});