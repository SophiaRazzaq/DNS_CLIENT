'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var constants = require('../constants');

var lineBuilder = require('../lineBuilder');

var recursorUtils = require('../recursorUtils');

var DEEP_EQUAL = constants.DEEP_EQUAL;
var UNEQUAL = constants.UNEQUAL;

function describeIterableRecursor(recursor) {
  return new IterableStats(recursor.size);
}

exports.describeIterableRecursor = describeIterableRecursor;

function describeListRecursor(recursor) {
  return new ListStats(recursor.size);
}

exports.describeListRecursor = describeListRecursor;

function describePropertyRecursor(recursor) {
  return new PropertyStats(recursor.size);
}

exports.describePropertyRecursor = describePropertyRecursor;

function deserializeIterableStats(size) {
  return new IterableStats(size);
}

exports.deserializeIterableStats = deserializeIterableStats;

function deserializeListStats(size) {
  return new ListStats(size);
}

exports.deserializeListStats = deserializeListStats;

function deserializePropertyStats(size) {
  return new PropertyStats(size);
}

exports.deserializePropertyStats = deserializePropertyStats;
var iterableTag = Symbol('IterableStats');
exports.iterableTag = iterableTag;
var listTag = Symbol('ListStats');
exports.listTag = listTag;
var propertyTag = Symbol('PropertyStats');
exports.propertyTag = propertyTag;

var Stats =
/*#__PURE__*/
function () {
  function Stats(size) {
    _classCallCheck(this, Stats);

    this.size = size;
  }

  _createClass(Stats, [{
    key: "formatDeep",
    value: function formatDeep(theme) {
      return lineBuilder.single(theme.stats.separator);
    }
  }, {
    key: "prepareDiff",
    value: function prepareDiff(expected, lhsRecursor, rhsRecursor, compareComplexShape) {
      if (expected.isStats !== true || expected.tag === this.tag) return null; // Try to line up stats descriptors with the same tag.

      var rhsFork = recursorUtils.fork(rhsRecursor);
      var initialExpected = expected;
      var missing = [];

      while (expected !== null && this.tag !== expected.tag) {
        missing.push(expected);
        expected = rhsFork.shared();
      }

      if (expected !== null && missing.length > 0) {
        return {
          multipleAreMissing: true,
          descriptors: missing,
          lhsRecursor: recursorUtils.unshift(lhsRecursor, this),
          // Use original `rhsRecursor`, not `rhsFork`, since the consumed
          // descriptors are returned with the `missing` array.
          rhsRecursor: recursorUtils.unshift(rhsRecursor, expected)
        };
      }

      var lhsFork = recursorUtils.fork(lhsRecursor);
      var actual = this;
      var extraneous = [];

      while (actual !== null && actual.tag !== initialExpected.tag) {
        extraneous.push(actual);
        actual = lhsFork.shared();
      }

      if (actual !== null && extraneous.length > 0) {
        return {
          multipleAreExtraneous: true,
          descriptors: extraneous,
          // Use original `lhsRecursor`, not `lhsFork`, since the consumed
          // descriptors are returned with the `extraneous` array.
          lhsRecursor: recursorUtils.unshift(lhsRecursor, actual),
          rhsRecursor: recursorUtils.unshift(rhsFork.recursor, initialExpected)
        };
      }

      return null;
    }
  }, {
    key: "serialize",
    value: function serialize() {
      return this.size;
    }
  }]);

  return Stats;
}();

Object.defineProperty(Stats.prototype, 'isStats', {
  value: true
});

var IterableStats =
/*#__PURE__*/
function (_Stats) {
  _inherits(IterableStats, _Stats);

  function IterableStats() {
    _classCallCheck(this, IterableStats);

    return _possibleConstructorReturn(this, _getPrototypeOf(IterableStats).apply(this, arguments));
  }

  _createClass(IterableStats, [{
    key: "compare",
    value: function compare(expected) {
      return expected.tag === iterableTag && this.size === expected.size ? DEEP_EQUAL : UNEQUAL;
    }
  }]);

  return IterableStats;
}(Stats);

Object.defineProperty(IterableStats.prototype, 'tag', {
  value: iterableTag
});

var ListStats =
/*#__PURE__*/
function (_Stats2) {
  _inherits(ListStats, _Stats2);

  function ListStats() {
    _classCallCheck(this, ListStats);

    return _possibleConstructorReturn(this, _getPrototypeOf(ListStats).apply(this, arguments));
  }

  _createClass(ListStats, [{
    key: "compare",
    value: function compare(expected) {
      return expected.tag === listTag && this.size === expected.size ? DEEP_EQUAL : UNEQUAL;
    }
  }]);

  return ListStats;
}(Stats);

Object.defineProperty(ListStats.prototype, 'tag', {
  value: listTag
});

var PropertyStats =
/*#__PURE__*/
function (_Stats3) {
  _inherits(PropertyStats, _Stats3);

  function PropertyStats() {
    _classCallCheck(this, PropertyStats);

    return _possibleConstructorReturn(this, _getPrototypeOf(PropertyStats).apply(this, arguments));
  }

  _createClass(PropertyStats, [{
    key: "compare",
    value: function compare(expected) {
      return expected.tag === propertyTag && this.size === expected.size ? DEEP_EQUAL : UNEQUAL;
    }
  }]);

  return PropertyStats;
}(Stats);

Object.defineProperty(PropertyStats.prototype, 'tag', {
  value: propertyTag
});