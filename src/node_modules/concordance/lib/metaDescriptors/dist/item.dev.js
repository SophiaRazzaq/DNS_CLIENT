'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var constants = require('../constants');

var formatUtils = require('../formatUtils');

var recursorUtils = require('../recursorUtils');

var DEEP_EQUAL = constants.DEEP_EQUAL;
var UNEQUAL = constants.UNEQUAL;

function describeComplex(index, value) {
  return new ComplexItem(index, value);
}

exports.describeComplex = describeComplex;

function deserializeComplex(index, recursor) {
  var value = recursor();
  return new ComplexItem(index, value);
}

exports.deserializeComplex = deserializeComplex;

function describePrimitive(index, value) {
  return new PrimitiveItem(index, value);
}

exports.describePrimitive = describePrimitive;

function deserializePrimitive(state) {
  var index = state[0];
  var value = state[1];
  return new PrimitiveItem(index, value);
}

exports.deserializePrimitive = deserializePrimitive;
var complexTag = Symbol('ComplexItem');
exports.complexTag = complexTag;
var primitiveTag = Symbol('PrimitiveItem');
exports.primitiveTag = primitiveTag;

var ComplexItem =
/*#__PURE__*/
function () {
  function ComplexItem(index, value) {
    _classCallCheck(this, ComplexItem);

    this.index = index;
    this.value = value;
  }

  _createClass(ComplexItem, [{
    key: "createRecursor",
    value: function createRecursor() {
      return recursorUtils.singleValue(this.value);
    }
  }, {
    key: "compare",
    value: function compare(expected) {
      return expected.tag === complexTag && this.index === expected.index ? this.value.compare(expected.value) : UNEQUAL;
    }
  }, {
    key: "formatShallow",
    value: function formatShallow(theme, indent) {
      var increaseValueIndent = theme.item.increaseValueIndent === true;
      return new formatUtils.SingleValueFormatter(theme, function (value) {
        if (typeof theme.item.customFormat === 'function') {
          return theme.item.customFormat(theme, indent, value);
        }

        return value.withLastPostfixed(theme.item.after);
      }, increaseValueIndent);
    }
  }, {
    key: "prepareDiff",
    value: function prepareDiff(expected, lhsRecursor, rhsRecursor, compareComplexShape, isCircular) {
      // Circular values cannot be compared. They must be treated as being unequal when diffing.
      if (isCircular(this.value) || isCircular(expected.value)) return {
        compareResult: UNEQUAL
      }; // Try to line up this or remaining items with the expected items.

      var lhsFork = recursorUtils.fork(lhsRecursor);
      var rhsFork = recursorUtils.fork(rhsRecursor);
      var initialExpected = expected;
      var expectedIsMissing = false;

      while (!expectedIsMissing && expected !== null && expected.isItem === true) {
        if (expected.tag === complexTag) {
          expectedIsMissing = compareComplexShape(this.value, expected.value) !== UNEQUAL;
        }

        expected = rhsFork.shared();
      }

      var actualIsExtraneous = false;

      if (initialExpected.tag === complexTag) {
        var actual = this;

        while (!actualIsExtraneous && actual !== null && actual.isItem === true) {
          if (actual.tag === complexTag) {
            actualIsExtraneous = compareComplexShape(actual.value, initialExpected.value) !== UNEQUAL;
          }

          actual = lhsFork.shared();
        }
      } else if (initialExpected.tag === primitiveTag) {
        var _actual = this;

        while (!actualIsExtraneous && _actual !== null && _actual.isItem === true) {
          if (_actual.tag === primitiveTag) {
            actualIsExtraneous = initialExpected.value.compare(_actual.value) === DEEP_EQUAL;
          }

          _actual = lhsFork.shared();
        }
      }

      if (actualIsExtraneous && !expectedIsMissing) {
        return {
          actualIsExtraneous: true,
          lhsRecursor: lhsFork.recursor,
          rhsRecursor: recursorUtils.map(recursorUtils.unshift(rhsFork.recursor, initialExpected), function (next) {
            if (next.isItem !== true) return next;
            next.index++;
            return next;
          })
        };
      }

      if (expectedIsMissing && !actualIsExtraneous) {
        return {
          expectedIsMissing: true,
          lhsRecursor: recursorUtils.map(recursorUtils.unshift(lhsFork.recursor, this), function (next) {
            if (next.isItem !== true) return next;
            next.index++;
            return next;
          }),
          rhsRecursor: rhsFork.recursor
        };
      }

      var mustRecurse = this.tag === complexTag && initialExpected.tag === complexTag && this.value.compare(initialExpected.value) !== UNEQUAL;
      return {
        mustRecurse: mustRecurse,
        isUnequal: !mustRecurse,
        lhsRecursor: lhsFork.recursor,
        rhsRecursor: rhsFork.recursor
      };
    }
  }, {
    key: "serialize",
    value: function serialize() {
      return this.index;
    }
  }]);

  return ComplexItem;
}();

Object.defineProperty(ComplexItem.prototype, 'isItem', {
  value: true
});
Object.defineProperty(ComplexItem.prototype, 'tag', {
  value: complexTag
});

var PrimitiveItem =
/*#__PURE__*/
function () {
  function PrimitiveItem(index, value) {
    _classCallCheck(this, PrimitiveItem);

    this.index = index;
    this.value = value;
  }

  _createClass(PrimitiveItem, [{
    key: "compare",
    value: function compare(expected) {
      return expected.tag === primitiveTag && this.index === expected.index ? this.value.compare(expected.value) : UNEQUAL;
    }
  }, {
    key: "formatDeep",
    value: function formatDeep(theme, indent) {
      var increaseValueIndent = theme.item.increaseValueIndent === true;
      var valueIndent = increaseValueIndent ? indent.increase() : indent; // Since the value is formatted directly, modifiers are not applied. Apply
      // modifiers to the item descriptor instead.

      var formatted = this.value.formatDeep(theme, valueIndent);

      if (typeof theme.item.customFormat === 'function') {
        return theme.item.customFormat(theme, indent, formatted);
      }

      return formatted.withLastPostfixed(theme.item.after);
    }
  }, {
    key: "prepareDiff",
    value: function prepareDiff(expected, lhsRecursor, rhsRecursor, compareComplexShape, isCircular) {
      var compareResult = this.compare(expected); // Short-circuit when values are deeply equal.

      if (compareResult === DEEP_EQUAL) return {
        compareResult: compareResult
      }; // Short-circut when values can be diffed directly.

      if (expected.tag === primitiveTag && this.value.tag === expected.value.tag && typeof this.value.diffDeep === 'function') {
        return {
          compareResult: compareResult
        };
      } // Try to line up this or remaining items with the expected items.


      var rhsFork = recursorUtils.fork(rhsRecursor);
      var initialExpected = expected;

      do {
        if (expected === null || expected.isItem !== true) {
          return {
            actualIsExtraneous: true,
            rhsRecursor: recursorUtils.map(recursorUtils.unshift(rhsFork.recursor, initialExpected), function (next) {
              if (next.isItem !== true) return next;
              next.index++;
              return next;
            })
          };
        }

        if (this.value.compare(expected.value) === DEEP_EQUAL) {
          return {
            expectedIsMissing: true,
            lhsRecursor: recursorUtils.map(recursorUtils.unshift(lhsRecursor, this), function (next) {
              if (next.isItem !== true) return next;
              next.index++;
              return next;
            }),
            rhsRecursor: rhsFork.recursor
          };
        }

        expected = rhsFork.shared();
      } while (true);
    }
  }, {
    key: "diffDeep",
    value: function diffDeep(expected, theme, indent, invert) {
      // Verify a diff can be returned.
      if (this.tag !== expected.tag || typeof this.value.diffDeep !== 'function') return null;
      var increaseValueIndent = theme.property.increaseValueIndent === true;
      var valueIndent = increaseValueIndent ? indent.increase() : indent; // Since the value is diffed directly, modifiers are not applied. Apply
      // modifiers to the item descriptor instead.

      var diff = this.value.diffDeep(expected.value, theme, valueIndent, invert);
      if (diff === null) return null;

      if (typeof theme.item.customFormat === 'function') {
        return theme.item.customFormat(theme, indent, diff);
      }

      return diff.withLastPostfixed(theme.item.after);
    }
  }, {
    key: "serialize",
    value: function serialize() {
      return [this.index, this.value];
    }
  }]);

  return PrimitiveItem;
}();

Object.defineProperty(PrimitiveItem.prototype, 'isItem', {
  value: true
});
Object.defineProperty(PrimitiveItem.prototype, 'tag', {
  value: primitiveTag
});