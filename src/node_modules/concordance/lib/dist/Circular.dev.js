'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Circular =
/*#__PURE__*/
function () {
  function Circular() {
    _classCallCheck(this, Circular);

    this.stack = new Map();
  }

  _createClass(Circular, [{
    key: "add",
    value: function add(descriptor) {
      if (this.stack.has(descriptor)) throw new Error('Already in stack');

      if (descriptor.isItem !== true && descriptor.isMapEntry !== true && descriptor.isProperty !== true) {
        this.stack.set(descriptor, this.stack.size + 1);
      }

      return this;
    }
  }, {
    key: "delete",
    value: function _delete(descriptor) {
      if (this.stack.has(descriptor)) {
        if (this.stack.get(descriptor) !== this.stack.size) throw new Error('Not on top of stack');
        this.stack["delete"](descriptor);
      }

      return this;
    }
  }, {
    key: "has",
    value: function has(descriptor) {
      return this.stack.has(descriptor);
    }
  }, {
    key: "get",
    value: function get(descriptor) {
      return this.stack.has(descriptor) ? this.stack.get(descriptor) : 0;
    }
  }]);

  return Circular;
}();

module.exports = Circular;