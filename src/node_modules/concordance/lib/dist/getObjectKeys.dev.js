'use strict';

function getObjectKeys(obj, excludeListItemAccessorsBelowLength) {
  var keys = [];
  var size = 0; // Sort property names, they should never be order-sensitive

  var nameCandidates = Object.getOwnPropertyNames(obj).sort(); // Comparators should verify symbols in an order-insensitive manner if
  // possible.

  var symbolCandidates = Object.getOwnPropertySymbols(obj);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = nameCandidates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var name = _step.value;
      var accept = true;

      if (excludeListItemAccessorsBelowLength > 0) {
        var index = Number(name);
        accept = !Number.isInteger(index) || index < 0 || index >= excludeListItemAccessorsBelowLength;
      }

      if (accept && Object.getOwnPropertyDescriptor(obj, name).enumerable) {
        keys[size++] = name;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = symbolCandidates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var symbol = _step2.value;

      if (Object.getOwnPropertyDescriptor(obj, symbol).enumerable) {
        keys[size++] = symbol;
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return {
    keys: keys,
    size: size
  };
}

module.exports = getObjectKeys;