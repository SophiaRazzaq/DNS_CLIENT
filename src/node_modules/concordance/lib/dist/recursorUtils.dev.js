'use strict';

var NOOP_RECURSOR = {
  size: 0,
  next: function next() {
    return null;
  }
};
exports.NOOP_RECURSOR = NOOP_RECURSOR;

function fork(_recursor) {
  var buffer = [];
  return {
    shared: function shared() {
      var next = _recursor();

      if (next !== null) buffer.push(next);
      return next;
    },
    recursor: function recursor() {
      if (buffer.length > 0) return buffer.shift();
      return _recursor();
    }
  };
}

exports.fork = fork;

function consumeDeep(recursor) {
  var stack = [recursor];

  while (stack.length > 0) {
    var subject = stack[stack.length - 1]();

    if (subject === null) {
      stack.pop();
      continue;
    }

    if (typeof subject.createRecursor === 'function') {
      stack.push(subject.createRecursor());
    }
  }
}

exports.consumeDeep = consumeDeep;

function map(recursor, mapFn) {
  return function () {
    var next = recursor();
    if (next === null) return null;
    return mapFn(next);
  };
}

exports.map = map;

function replay(state, create) {
  if (!state) {
    var recursor = create();

    if (recursor === NOOP_RECURSOR) {
      state = recursor;
    } else {
      state = Object.assign({
        buffer: [],
        done: false
      }, recursor);
    }
  }

  if (state === NOOP_RECURSOR) return {
    state: state,
    recursor: state
  };
  var done = false;
  var index = 0;

  var next = function next() {
    if (done) return null;
    var retval = state.buffer[index];

    if (retval === undefined) {
      retval = state.buffer[index] = state.next();
    }

    index++;

    if (retval === null) {
      done = true;
    }

    return retval;
  };

  return {
    state: state,
    recursor: {
      next: next,
      size: state.size
    }
  };
}

exports.replay = replay;

function sequence(first, second) {
  var fromFirst = true;
  return function () {
    if (fromFirst) {
      var next = first();
      if (next !== null) return next;
      fromFirst = false;
    }

    return second();
  };
}

exports.sequence = sequence;

function singleValue(value) {
  var done = false;
  return function () {
    if (done) return null;
    done = true;
    return value;
  };
}

exports.singleValue = singleValue;

function unshift(recursor, value) {
  return function () {
    if (value !== null) {
      var next = value;
      value = null;
      return next;
    }

    return recursor();
  };
}

exports.unshift = unshift;