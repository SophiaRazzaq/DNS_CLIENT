'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var constants = require('./constants');

var recursorUtils = require('./recursorUtils');

var DEEP_EQUAL = constants.DEEP_EQUAL;
var SHALLOW_EQUAL = constants.SHALLOW_EQUAL;
var UNEQUAL = constants.UNEQUAL;

var Comparable =
/*#__PURE__*/
function () {
  function Comparable(properties) {
    _classCallCheck(this, Comparable);

    this.properties = properties;
    this.ordered = properties.slice();
  }

  _createClass(Comparable, [{
    key: "createRecursor",
    value: function createRecursor() {
      var _this = this;

      var length = this.ordered.length;
      var index = 0;
      return function () {
        if (index === length) return null;
        return _this.ordered[index++];
      };
    }
  }, {
    key: "compare",
    value: function compare(expected) {
      if (this.properties.length !== expected.properties.length) return UNEQUAL; // Compare property keys, reordering the expected properties in the process
      // so values can be compared if all keys are equal.

      var ordered = [];
      var processed = new Set();
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.properties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var property = _step.value;
          var extraneous = true;
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = expected.properties[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var other = _step2.value;
              if (processed.has(other.key)) continue;

              if (property.key.compare(other.key) === DEEP_EQUAL) {
                extraneous = false;
                processed.add(other.key);
                ordered.push(other);
                break;
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }

          if (extraneous) return UNEQUAL;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      expected.ordered = ordered;
      return SHALLOW_EQUAL;
    }
  }, {
    key: "prepareDiff",
    value: function prepareDiff(expected) {
      // Reorder the expected properties before recursion starts.
      var missingProperties = [];
      var ordered = [];
      var processed = new Set();
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = expected.properties[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var other = _step3.value;
          var missing = true;
          var _iteratorNormalCompletion4 = true;
          var _didIteratorError4 = false;
          var _iteratorError4 = undefined;

          try {
            for (var _iterator4 = this.properties[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
              var property = _step4.value;
              if (processed.has(property.key)) continue;

              if (property.key.compare(other.key) === DEEP_EQUAL) {
                missing = false;
                processed.add(property.key);
                ordered.push(other);
                break;
              }
            }
          } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                _iterator4["return"]();
              }
            } finally {
              if (_didIteratorError4) {
                throw _iteratorError4;
              }
            }
          }

          if (missing) {
            missingProperties.push(other);
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      expected.ordered = ordered.concat(missingProperties);
      return {
        mustRecurse: true
      };
    }
  }]);

  return Comparable;
}();

Object.defineProperty(Comparable.prototype, 'isSymbolPropertiesComparable', {
  value: true
});
exports.Comparable = Comparable;

var Collector =
/*#__PURE__*/
function () {
  function Collector(firstProperty, recursor) {
    _classCallCheck(this, Collector);

    this.properties = [firstProperty];
    this.recursor = recursor;
    this.remainder = null;
  }

  _createClass(Collector, [{
    key: "collectAll",
    value: function collectAll() {
      do {
        var next = this.recursor();

        if (next && next.isProperty === true) {
          // All properties will have symbol keys
          this.properties.push(next);
        } else {
          return next;
        }
      } while (true);
    }
  }, {
    key: "createRecursor",
    value: function createRecursor() {
      return recursorUtils.singleValue(new Comparable(this.properties));
    }
  }]);

  return Collector;
}();

Object.defineProperty(Collector.prototype, 'isSymbolPropertiesCollector', {
  value: true
});
exports.Collector = Collector;