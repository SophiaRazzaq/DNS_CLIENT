'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var lineBuilder = require('./lineBuilder');

function wrap(fromTheme, value) {
  return fromTheme.open + value + fromTheme.close;
}

exports.wrap = wrap;

function formatCtorAndStringTag(theme, object) {
  if (!object.ctor) return wrap(theme.object.stringTag, object.stringTag);
  var retval = wrap(theme.object.ctor, object.ctor);

  if (object.stringTag && object.stringTag !== object.ctor && object.stringTag !== 'Object') {
    retval += ' ' + wrap(theme.object.secondaryStringTag, object.stringTag);
  }

  return retval;
}

exports.formatCtorAndStringTag = formatCtorAndStringTag;

var ObjectFormatter =
/*#__PURE__*/
function () {
  function ObjectFormatter(object, theme, indent) {
    _classCallCheck(this, ObjectFormatter);

    this.object = object;
    this.theme = theme;
    this.indent = indent;
    this.increaseIndent = true;
    this.innerLines = lineBuilder.buffer();
    this.pendingStats = null;
  }

  _createClass(ObjectFormatter, [{
    key: "append",
    value: function append(formatted, origin) {
      if (origin.isStats === true) {
        this.pendingStats = formatted;
      } else {
        if (this.pendingStats !== null) {
          if (!this.innerLines.isEmpty) {
            this.innerLines.append(this.pendingStats);
          }

          this.pendingStats = null;
        }

        this.innerLines.append(formatted);
      }
    }
  }, {
    key: "finalize",
    value: function finalize() {
      var variant = this.object.isList ? this.theme.list : this.theme.object;
      var ctor = this.object.ctor;
      var stringTag = this.object.stringTag;
      var prefix = (ctor === 'Array' || ctor === 'Object') && ctor === stringTag ? '' : formatCtorAndStringTag(this.theme, this.object) + ' ';

      if (this.innerLines.isEmpty) {
        return lineBuilder.single(prefix + variant.openBracket + variant.closeBracket);
      }

      return lineBuilder.first(prefix + variant.openBracket).concat(this.innerLines.withFirstPrefixed(this.indent.increase()).stripFlags()).append(lineBuilder.last(this.indent + variant.closeBracket));
    }
  }, {
    key: "maxDepth",
    value: function maxDepth() {
      var variant = this.object.isList ? this.theme.list : this.theme.object;
      return lineBuilder.single(formatCtorAndStringTag(this.theme, this.object) + ' ' + variant.openBracket + ' ' + this.theme.maxDepth + ' ' + variant.closeBracket);
    }
  }, {
    key: "shouldFormat",
    value: function shouldFormat() {
      return true;
    }
  }, {
    key: "customize",
    value: function customize(methods) {
      var _this = this;

      if (methods.finalize) {
        this.finalize = function () {
          return methods.finalize(_this.innerLines);
        };
      }

      if (methods.maxDepth) {
        this.maxDepth = methods.maxDepth;
      }

      if (methods.shouldFormat) {
        this.shouldFormat = methods.shouldFormat;
      }

      return this;
    }
  }]);

  return ObjectFormatter;
}();

exports.ObjectFormatter = ObjectFormatter;

var SingleValueFormatter =
/*#__PURE__*/
function () {
  function SingleValueFormatter(theme, finalizeFn, increaseIndent) {
    _classCallCheck(this, SingleValueFormatter);

    this.theme = theme;
    this.finalizeFn = finalizeFn;
    this.hasValue = false;
    this.increaseIndent = increaseIndent === true;
    this.value = null;
  }

  _createClass(SingleValueFormatter, [{
    key: "append",
    value: function append(formatted) {
      if (this.hasValue) throw new Error('Formatter buffer can only take one formatted value.');
      this.hasValue = true;
      this.value = formatted;
    }
  }, {
    key: "finalize",
    value: function finalize() {
      if (!this.hasValue) throw new Error('Formatter buffer never received a formatted value.');
      return this.finalizeFn(this.value);
    }
  }, {
    key: "maxDepth",
    value: function maxDepth() {
      return this.finalizeFn(lineBuilder.single(this.theme.maxDepth));
    }
  }]);

  return SingleValueFormatter;
}();

exports.SingleValueFormatter = SingleValueFormatter;