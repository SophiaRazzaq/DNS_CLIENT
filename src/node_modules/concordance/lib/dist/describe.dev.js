'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var Registry = require('./Registry');

var argumentsValue = require('./complexValues/arguments');

var arrayBufferValue = require('./complexValues/arrayBuffer');

var boxedValue = require('./complexValues/boxed');

var dataViewValue = require('./complexValues/dataView');

var dateValue = require('./complexValues/date');

var errorValue = require('./complexValues/error');

var functionValue = require('./complexValues/function');

var globalValue = require('./complexValues/global');

var mapValue = require('./complexValues/map');

var objectValue = require('./complexValues/object');

var promiseValue = require('./complexValues/promise');

var regexpValue = require('./complexValues/regexp');

var setValue = require('./complexValues/set');

var typedArrayValue = require('./complexValues/typedArray');

var getCtor = require('./getCtor');

var getStringTag = require('./getStringTag');

var itemDescriptor = require('./metaDescriptors/item');

var mapEntryDescriptor = require('./metaDescriptors/mapEntry');

var propertyDescriptor = require('./metaDescriptors/property');

var pluginRegistry = require('./pluginRegistry');

var bigIntValue = require('./primitiveValues/bigInt');

var booleanValue = require('./primitiveValues/boolean');

var nullValue = require('./primitiveValues/null');

var numberValue = require('./primitiveValues/number');

var stringValue = require('./primitiveValues/string');

var symbolValue = require('./primitiveValues/symbol');

var undefinedValue = require('./primitiveValues/undefined');

var SpecializedComplexes = new Map([['Arguments', argumentsValue.describe], ['ArrayBuffer', arrayBufferValue.describe], ['DataView', dataViewValue.describe], ['Date', dateValue.describe], ['Error', errorValue.describe], ['Float32Array', typedArrayValue.describe], ['Float64Array', typedArrayValue.describe], ['Function', functionValue.describe], ['GeneratorFunction', functionValue.describe], ['global', globalValue.describe], ['Int16Array', typedArrayValue.describe], ['Int32Array', typedArrayValue.describe], ['Int8Array', typedArrayValue.describe], ['Map', mapValue.describe], ['Promise', promiseValue.describe], ['RegExp', regexpValue.describe], ['Set', setValue.describe], ['Uint16Array', typedArrayValue.describe], ['Uint32Array', typedArrayValue.describe], ['Uint8Array', typedArrayValue.describe], ['Uint8ClampedArray', typedArrayValue.describe]]);

function describePrimitive(value) {
  if (value === null) return nullValue.describe();
  if (value === undefined) return undefinedValue.describe();
  if (value === true || value === false) return booleanValue.describe(value);

  var type = _typeof(value);

  if (type === 'bigint') return bigIntValue.describe(value);
  if (type === 'number') return numberValue.describe(value);
  if (type === 'string') return stringValue.describe(value);
  if (type === 'symbol') return symbolValue.describe(value);
  return null;
}

function unboxComplex(tag, complex) {
  // Try to unbox by calling `valueOf()`. `describePrimitive()` will return
  // `null` if the resulting value is not a primitive, in which case it's
  // ignored.
  if (typeof complex.valueOf === 'function') {
    var value = complex.valueOf();
    if (value !== complex) return describePrimitive(value);
  }

  return null;
}

function registerPlugins(plugins) {
  if (!Array.isArray(plugins) || plugins.length === 0) return function () {
    return null;
  };
  var tryFns = pluginRegistry.getTryDescribeValues(plugins);
  return function (value, stringTag, ctor) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = tryFns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var tryDescribeValue = _step.value;
        var describeValue = tryDescribeValue(value, stringTag, ctor);
        if (describeValue) return describeValue;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return null;
  };
}

function describeComplex(value, registry, tryPlugins, describeAny, describeItem, describeMapEntry, describeProperty) {
  if (registry.has(value)) return registry.get(value);
  var stringTag = getStringTag(value);
  var ctor = getCtor(stringTag, value);
  var pointer = registry.alloc(value);
  var unboxed;
  var describeValue = tryPlugins(value, stringTag, ctor);

  if (describeValue === null) {
    if (SpecializedComplexes.has(stringTag)) {
      describeValue = SpecializedComplexes.get(stringTag);
    } else {
      unboxed = unboxComplex(stringTag, value);

      if (unboxed !== null) {
        describeValue = boxedValue.describe;
      } else {
        describeValue = objectValue.describe;
      }
    }
  }

  var descriptor = describeValue({
    ctor: ctor,
    describeAny: describeAny,
    describeItem: describeItem,
    describeMapEntry: describeMapEntry,
    describeProperty: describeProperty,
    pointer: pointer.index,
    stringTag: stringTag,
    unboxed: unboxed,
    value: value
  });
  pointer.descriptor = descriptor;
  return descriptor;
}

var describeItem = function describeItem(index, valueDescriptor) {
  return valueDescriptor.isPrimitive === true ? itemDescriptor.describePrimitive(index, valueDescriptor) : itemDescriptor.describeComplex(index, valueDescriptor);
};

var describeMapEntry = function describeMapEntry(keyDescriptor, valueDescriptor) {
  return mapEntryDescriptor.describe(keyDescriptor, valueDescriptor);
};

function describe(value, options) {
  var primitive = describePrimitive(value);
  if (primitive !== null) return primitive;
  var registry = new Registry();
  var tryPlugins = registerPlugins(options && options.plugins);

  var curriedComplex = function curriedComplex(c) {
    return describeComplex(c, registry, tryPlugins, describeAny, describeItem, describeMapEntry, describeProperty);
  };

  var describeAny = function describeAny(any) {
    var descriptor = describePrimitive(any);
    return descriptor !== null ? descriptor : curriedComplex(any);
  };

  var describeProperty = function describeProperty(key, valueDescriptor) {
    var keyDescriptor = describePrimitive(key);
    return valueDescriptor.isPrimitive === true ? propertyDescriptor.describePrimitive(keyDescriptor, valueDescriptor) : propertyDescriptor.describeComplex(keyDescriptor, valueDescriptor);
  };

  return curriedComplex(value);
}

module.exports = describe;