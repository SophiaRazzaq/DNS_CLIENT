'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var stringEscape = require('js-string-escape');

var wellKnownSymbols = require('well-known-symbols');

var constants = require('../constants');

var formatUtils = require('../formatUtils');

var lineBuilder = require('../lineBuilder');

var DEEP_EQUAL = constants.DEEP_EQUAL;
var UNEQUAL = constants.UNEQUAL;

function describe(value) {
  var stringCompare = null;
  var key = Symbol.keyFor(value);

  if (key !== undefined) {
    stringCompare = "Symbol.for(".concat(stringEscape(key), ")");
  } else if (wellKnownSymbols.isWellKnown(value)) {
    stringCompare = wellKnownSymbols.getLabel(value);
  }

  return new SymbolValue({
    stringCompare: stringCompare,
    value: value
  });
}

exports.describe = describe;

function deserialize(state) {
  var stringCompare = state[0];
  var string = state[1] || state[0];
  return new DeserializedSymbolValue({
    string: string,
    stringCompare: stringCompare,
    value: null
  });
}

exports.deserialize = deserialize;
var tag = Symbol('SymbolValue');
exports.tag = tag;

var SymbolValue =
/*#__PURE__*/
function () {
  function SymbolValue(props) {
    _classCallCheck(this, SymbolValue);

    this.stringCompare = props.stringCompare;
    this.value = props.value;
  }

  _createClass(SymbolValue, [{
    key: "compare",
    value: function compare(expected) {
      if (expected.tag !== tag) return UNEQUAL;

      if (this.stringCompare !== null) {
        return this.stringCompare === expected.stringCompare ? DEEP_EQUAL : UNEQUAL;
      }

      return this.value === expected.value ? DEEP_EQUAL : UNEQUAL;
    }
  }, {
    key: "formatString",
    value: function formatString() {
      if (this.stringCompare !== null) return this.stringCompare;
      return stringEscape(this.value.toString());
    }
  }, {
    key: "formatDeep",
    value: function formatDeep(theme) {
      return lineBuilder.single(formatUtils.wrap(theme.symbol, this.formatString()));
    }
  }, {
    key: "formatAsKey",
    value: function formatAsKey(theme) {
      return formatUtils.wrap(theme.property.keyBracket, formatUtils.wrap(theme.symbol, this.formatString()));
    }
  }, {
    key: "serialize",
    value: function serialize() {
      var string = this.formatString();
      return this.stringCompare === string ? [this.stringCompare] : [this.stringCompare, string];
    }
  }]);

  return SymbolValue;
}();

Object.defineProperty(SymbolValue.prototype, 'isPrimitive', {
  value: true
});
Object.defineProperty(SymbolValue.prototype, 'tag', {
  value: tag
});

var DeserializedSymbolValue =
/*#__PURE__*/
function (_SymbolValue) {
  _inherits(DeserializedSymbolValue, _SymbolValue);

  function DeserializedSymbolValue(props) {
    var _this;

    _classCallCheck(this, DeserializedSymbolValue);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DeserializedSymbolValue).call(this, props));
    _this.string = props.string;
    return _this;
  }

  _createClass(DeserializedSymbolValue, [{
    key: "compare",
    value: function compare(expected) {
      if (expected.tag !== tag) return UNEQUAL;

      if (this.stringCompare !== null) {
        return this.stringCompare === expected.stringCompare ? DEEP_EQUAL : UNEQUAL;
      } // Symbols that are not in the global symbol registry, and are not
      // well-known, cannot be compared when deserialized. Treat symbols
      // as equal if they are formatted the same.


      return this.string === expected.formatString() ? DEEP_EQUAL : UNEQUAL;
    }
  }, {
    key: "formatString",
    value: function formatString() {
      return this.string;
    }
  }]);

  return DeserializedSymbolValue;
}(SymbolValue);