'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var constants = require('../constants');

var formatUtils = require('../formatUtils');

var lineBuilder = require('../lineBuilder');

var DEEP_EQUAL = constants.DEEP_EQUAL;
var UNEQUAL = constants.UNEQUAL;

function describe() {
  return new UndefinedValue();
}

exports.describe = describe;
exports.deserialize = describe;
var tag = Symbol('UndefinedValue');
exports.tag = tag;

var UndefinedValue =
/*#__PURE__*/
function () {
  function UndefinedValue() {
    _classCallCheck(this, UndefinedValue);
  }

  _createClass(UndefinedValue, [{
    key: "compare",
    value: function compare(expected) {
      return expected.tag === tag ? DEEP_EQUAL : UNEQUAL;
    }
  }, {
    key: "formatDeep",
    value: function formatDeep(theme) {
      return lineBuilder.single(formatUtils.wrap(theme.undefined, 'undefined'));
    }
  }]);

  return UndefinedValue;
}();

Object.defineProperty(UndefinedValue.prototype, 'isPrimitive', {
  value: true
});
Object.defineProperty(UndefinedValue.prototype, 'tag', {
  value: tag
});