'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var typedArray = require('./typedArray');

function describe(props) {
  return new DescribedArrayBufferValue(Object.assign({
    buffer: Buffer.from(props.value),
    // Set isArray and isList so the property recursor excludes the byte accessors
    isArray: true,
    isList: true
  }, props));
}

exports.describe = describe;

function deserialize(state, recursor) {
  return new DeserializedArrayBufferValue(state, recursor);
}

exports.deserialize = deserialize;
var tag = Symbol('ArrayBufferValue');
exports.tag = tag; // ArrayBuffers can be represented as regular Buffers, allowing them to be
// treated as TypedArrays for the purposes of this package.

var ArrayBufferValue =
/*#__PURE__*/
function (_typedArray$TypedArra) {
  _inherits(ArrayBufferValue, _typedArray$TypedArra);

  function ArrayBufferValue() {
    _classCallCheck(this, ArrayBufferValue);

    return _possibleConstructorReturn(this, _getPrototypeOf(ArrayBufferValue).apply(this, arguments));
  }

  return ArrayBufferValue;
}(typedArray.TypedArrayValue);

Object.defineProperty(ArrayBufferValue.prototype, 'tag', {
  value: tag
});
var DescribedArrayBufferValue = typedArray.DescribedMixin(ArrayBufferValue);
var DeserializedArrayBufferValue = typedArray.DeserializedMixin(ArrayBufferValue);