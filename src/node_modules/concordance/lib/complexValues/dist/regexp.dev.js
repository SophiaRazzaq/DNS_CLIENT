'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var constants = require('../constants');

var formatUtils = require('../formatUtils');

var lineBuilder = require('../lineBuilder');

var object = require('./object');

var UNEQUAL = constants.UNEQUAL;

function describe(props) {
  var regexp = props.value;
  return new DescribedRegexpValue(Object.assign({
    flags: getSortedFlags(regexp),
    source: regexp.source
  }, props));
}

exports.describe = describe;

function deserialize(state, recursor) {
  return new DeserializedRegexpValue(state, recursor);
}

exports.deserialize = deserialize;
var tag = Symbol('RegexpValue');
exports.tag = tag;

function getSortedFlags(regexp) {
  var flags = regexp.flags || String(regexp).slice(regexp.source.length + 2);
  return flags.split('').sort().join('');
}

var RegexpValue =
/*#__PURE__*/
function (_object$ObjectValue) {
  _inherits(RegexpValue, _object$ObjectValue);

  function RegexpValue(props) {
    var _this;

    _classCallCheck(this, RegexpValue);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(RegexpValue).call(this, props));
    _this.flags = props.flags;
    _this.source = props.source;
    return _this;
  }

  _createClass(RegexpValue, [{
    key: "compare",
    value: function compare(expected) {
      return this.tag === expected.tag && this.flags === expected.flags && this.source === expected.source ? _get(_getPrototypeOf(RegexpValue.prototype), "compare", this).call(this, expected) : UNEQUAL;
    }
  }, {
    key: "formatShallow",
    value: function formatShallow(theme, indent) {
      var _this2 = this;

      var ctor = this.ctor || this.stringTag;
      var regexp = formatUtils.wrap(theme.regexp.source, this.source) + formatUtils.wrap(theme.regexp.flags, this.flags);
      return _get(_getPrototypeOf(RegexpValue.prototype), "formatShallow", this).call(this, theme, indent).customize({
        finalize: function finalize(innerLines) {
          if (ctor === 'RegExp' && innerLines.isEmpty) return lineBuilder.single(regexp);
          var innerIndentation = indent.increase();
          var header = lineBuilder.first(formatUtils.formatCtorAndStringTag(theme, _this2) + ' ' + theme.object.openBracket).concat(lineBuilder.line(innerIndentation + regexp));

          if (!innerLines.isEmpty) {
            header.append(lineBuilder.line(innerIndentation + theme.regexp.separator));
            header.append(innerLines.withFirstPrefixed(innerIndentation).stripFlags());
          }

          return header.append(lineBuilder.last(indent + theme.object.closeBracket));
        },
        maxDepth: function maxDepth() {
          return lineBuilder.single(formatUtils.formatCtorAndStringTag(theme, _this2) + ' ' + theme.object.openBracket + ' ' + regexp + ' ' + theme.maxDepth + ' ' + theme.object.closeBracket);
        }
      });
    }
  }, {
    key: "serialize",
    value: function serialize() {
      return [this.flags, this.source, _get(_getPrototypeOf(RegexpValue.prototype), "serialize", this).call(this)];
    }
  }]);

  return RegexpValue;
}(object.ObjectValue);

Object.defineProperty(RegexpValue.prototype, 'tag', {
  value: tag
});
var DescribedRegexpValue = object.DescribedMixin(RegexpValue);

var DeserializedRegexpValue =
/*#__PURE__*/
function (_object$DeserializedM) {
  _inherits(DeserializedRegexpValue, _object$DeserializedM);

  function DeserializedRegexpValue(state, recursor) {
    var _this3;

    _classCallCheck(this, DeserializedRegexpValue);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(DeserializedRegexpValue).call(this, state[2], recursor));
    _this3.flags = state[0];
    _this3.source = state[1];
    return _this3;
  }

  return DeserializedRegexpValue;
}(object.DeserializedMixin(RegexpValue));