'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var constants = require('../constants');

var formatUtils = require('../formatUtils');

var isEnumerable = require('../isEnumerable');

var lineBuilder = require('../lineBuilder');

var NOOP_RECURSOR = require('../recursorUtils').NOOP_RECURSOR;

var object = require('./object');

var UNEQUAL = constants.UNEQUAL;
var SHALLOW_EQUAL = constants.SHALLOW_EQUAL;

function describe(props) {
  var fn = props.value;
  return new DescribedFunctionValue(Object.assign({
    nameIsEnumerable: isEnumerable(fn, 'name'),
    name: typeof fn.name === 'string' ? fn.name : null
  }, props));
}

exports.describe = describe;

function deserialize(state, recursor) {
  return new DeserializedFunctionValue(state, recursor);
}

exports.deserialize = deserialize;
var tag = Symbol('FunctionValue');
exports.tag = tag;

var FunctionValue =
/*#__PURE__*/
function (_object$ObjectValue) {
  _inherits(FunctionValue, _object$ObjectValue);

  function FunctionValue(props) {
    var _this;

    _classCallCheck(this, FunctionValue);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(FunctionValue).call(this, props));
    _this.name = props.name;
    return _this;
  }

  _createClass(FunctionValue, [{
    key: "formatShallow",
    value: function formatShallow(theme, indent) {
      var string = formatUtils.wrap(theme["function"].stringTag, this.stringTag) + (this.name ? ' ' + formatUtils.wrap(theme["function"].name, this.name) : '') + ' ' + theme.object.openBracket;
      return _get(_getPrototypeOf(FunctionValue.prototype), "formatShallow", this).call(this, theme, indent).customize({
        finalize: function finalize(innerLines) {
          return innerLines.isEmpty ? lineBuilder.single(string + theme.object.closeBracket) : lineBuilder.first(string).concat(innerLines.withFirstPrefixed(indent.increase()).stripFlags()).append(lineBuilder.last(indent + theme.object.closeBracket));
        },
        maxDepth: function maxDepth() {
          return lineBuilder.single(string + ' ' + theme.maxDepth + ' ' + theme.object.closeBracket);
        }
      });
    }
  }]);

  return FunctionValue;
}(object.ObjectValue);

Object.defineProperty(FunctionValue.prototype, 'tag', {
  value: tag
});

var DescribedFunctionValue =
/*#__PURE__*/
function (_object$DescribedMixi) {
  _inherits(DescribedFunctionValue, _object$DescribedMixi);

  function DescribedFunctionValue(props) {
    var _this2;

    _classCallCheck(this, DescribedFunctionValue);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(DescribedFunctionValue).call(this, props));
    _this2.nameIsEnumerable = props.nameIsEnumerable;
    return _this2;
  }

  _createClass(DescribedFunctionValue, [{
    key: "compare",
    value: function compare(expected) {
      if (this.tag !== expected.tag) return UNEQUAL;
      if (this.name !== expected.name) return UNEQUAL;
      if (this.value && expected.value && this.value !== expected.value) return UNEQUAL;
      return _get(_getPrototypeOf(DescribedFunctionValue.prototype), "compare", this).call(this, expected);
    }
  }, {
    key: "createPropertyRecursor",
    value: function createPropertyRecursor() {
      var recursor = _get(_getPrototypeOf(DescribedFunctionValue.prototype), "createPropertyRecursor", this).call(this);

      var skipName = this.nameIsEnumerable;
      if (!skipName) return recursor;
      var size = recursor.size;

      if (skipName) {
        size -= 1;
      }

      if (size === 0) return NOOP_RECURSOR;

      var next = function next() {
        var property = recursor.next();

        if (property) {
          if (skipName && property.key.value === 'name') {
            return next();
          }

          return property;
        }

        return null;
      };

      return {
        size: size,
        next: next
      };
    }
  }, {
    key: "serialize",
    value: function serialize() {
      return [this.name, _get(_getPrototypeOf(DescribedFunctionValue.prototype), "serialize", this).call(this)];
    }
  }]);

  return DescribedFunctionValue;
}(object.DescribedMixin(FunctionValue));

var DeserializedFunctionValue =
/*#__PURE__*/
function (_object$DeserializedM) {
  _inherits(DeserializedFunctionValue, _object$DeserializedM);

  function DeserializedFunctionValue(state, recursor) {
    var _this3;

    _classCallCheck(this, DeserializedFunctionValue);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(DeserializedFunctionValue).call(this, state[1], recursor));
    _this3.name = state[0];
    return _this3;
  }

  _createClass(DeserializedFunctionValue, [{
    key: "compare",
    value: function compare(expected) {
      if (this.tag !== expected.tag) return UNEQUAL;
      if (this.name !== expected.name) return UNEQUAL;
      if (this.stringTag !== expected.stringTag) return UNEQUAL;
      return SHALLOW_EQUAL;
    }
  }, {
    key: "serialize",
    value: function serialize() {
      return [this.name, _get(_getPrototypeOf(DeserializedFunctionValue.prototype), "serialize", this).call(this)];
    }
  }]);

  return DeserializedFunctionValue;
}(object.DeserializedMixin(FunctionValue));