'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var constants = require('../constants');

var ObjectFormatter = require('../formatUtils').ObjectFormatter;

var getObjectKeys = require('../getObjectKeys');

var hasLength = require('../hasLength');

var stats = require('../metaDescriptors/stats');

var recursorUtils = require('../recursorUtils');

var DEEP_EQUAL = constants.DEEP_EQUAL;
var SHALLOW_EQUAL = constants.SHALLOW_EQUAL;
var UNEQUAL = constants.UNEQUAL;

function describe(props) {
  var isArray = props.stringTag === 'Array';
  var object = props.value;
  return new DescribedObjectValue(Object.assign({
    isArray: isArray,
    isIterable: object[Symbol.iterator] !== undefined,
    isList: isArray || hasLength(object)
  }, props));
}

exports.describe = describe;

function deserialize(state, recursor) {
  return new DeserializedObjectValue(state, recursor);
}

exports.deserialize = deserialize;
var tag = Symbol('ObjectValue');
exports.tag = tag;

var ObjectValue =
/*#__PURE__*/
function () {
  function ObjectValue(props) {
    _classCallCheck(this, ObjectValue);

    this.ctor = props.ctor;
    this.pointer = props.pointer;
    this.stringTag = props.stringTag;
    this.isArray = props.isArray === true;
    this.isIterable = props.isIterable === true;
    this.isList = props.isList === true;
  }

  _createClass(ObjectValue, [{
    key: "compare",
    value: function compare(expected) {
      if (this.tag !== expected.tag) return UNEQUAL;
      if (this.stringTag !== expected.stringTag || !this.hasSameCtor(expected)) return UNEQUAL;
      return SHALLOW_EQUAL;
    }
  }, {
    key: "hasSameCtor",
    value: function hasSameCtor(expected) {
      return this.ctor === expected.ctor;
    }
  }, {
    key: "formatShallow",
    value: function formatShallow(theme, indent) {
      return new ObjectFormatter(this, theme, indent);
    }
  }, {
    key: "serialize",
    value: function serialize() {
      return [this.ctor, this.pointer, this.stringTag, this.isArray, this.isIterable, this.isList];
    }
  }]);

  return ObjectValue;
}();

Object.defineProperty(ObjectValue.prototype, 'isComplex', {
  value: true
});
Object.defineProperty(ObjectValue.prototype, 'tag', {
  value: tag
});
exports.ObjectValue = ObjectValue;
var DescribedObjectValue = DescribedMixin(ObjectValue);
var DeserializedObjectValue = DeserializedMixin(ObjectValue);

function DescribedMixin(base) {
  return (
    /*#__PURE__*/
    function (_base) {
      _inherits(_class, _base);

      function _class(props) {
        var _this;

        _classCallCheck(this, _class);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this, props));
        _this.value = props.value;
        _this.describeAny = props.describeAny;
        _this.describeItem = props.describeItem;
        _this.describeMapEntry = props.describeMapEntry;
        _this.describeProperty = props.describeProperty;
        _this.iterableState = null;
        _this.listState = null;
        _this.propertyState = null;
        return _this;
      }

      _createClass(_class, [{
        key: "compare",
        value: function compare(expected) {
          return this.value === expected.value ? DEEP_EQUAL : _get(_getPrototypeOf(_class.prototype), "compare", this).call(this, expected);
        }
      }, {
        key: "createPropertyRecursor",
        value: function createPropertyRecursor() {
          var _this2 = this;

          var objectKeys = getObjectKeys(this.value, this.isList ? this.value.length : 0);
          var size = objectKeys.size;
          if (size === 0) return recursorUtils.NOOP_RECURSOR;
          var index = 0;

          var next = function next() {
            if (index === size) return null;
            var key = objectKeys.keys[index++];
            return _this2.describeProperty(key, _this2.describeAny(_this2.value[key]));
          };

          return {
            size: size,
            next: next
          };
        }
      }, {
        key: "createListRecursor",
        value: function createListRecursor() {
          var _this3 = this;

          if (!this.isList) return recursorUtils.NOOP_RECURSOR;
          var size = this.value.length;
          if (size === 0) return recursorUtils.NOOP_RECURSOR;
          var index = 0;

          var next = function next() {
            if (index === size) return null;
            var current = index;
            index++;
            return _this3.describeItem(current, _this3.describeAny(_this3.value[current]));
          };

          return {
            size: size,
            next: next
          };
        }
      }, {
        key: "createIterableRecursor",
        value: function createIterableRecursor() {
          var _this4 = this;

          if (this.isArray || !this.isIterable) return recursorUtils.NOOP_RECURSOR;
          var iterator = this.value[Symbol.iterator]();
          var first = iterator.next();
          var done = false;
          var size = -1;

          if (first.done) {
            if (first.value === undefined) {
              size = 0;
              done = true;
            } else {
              size = 1;
            }
          }

          var index = 0;

          var next = function next() {
            if (done) return null;

            while (!done) {
              var current = first || iterator.next();

              if (current === first) {
                first = null;
              }

              if (current.done) {
                done = true;
              }

              var item = current.value;
              if (done && item === undefined) return null;

              if (_this4.isList && _this4.value[index] === item) {
                index++;
              } else {
                return _this4.describeItem(index++, _this4.describeAny(item));
              }
            }
          };

          return {
            size: size,
            next: next
          };
        }
      }, {
        key: "createRecursor",
        value: function createRecursor() {
          var _this5 = this;

          var recursedProperty = false;
          var recursedList = false;
          var recursedIterable = false;
          var recursor = null;
          return function () {
            var retval = null;

            do {
              if (recursor !== null) {
                retval = recursor.next();

                if (retval === null) {
                  recursor = null;
                }
              }

              while (recursor === null && (!recursedList || !recursedProperty || !recursedIterable)) {
                // Prioritize recursing lists
                if (!recursedList) {
                  var replay = recursorUtils.replay(_this5.listState, function () {
                    return _this5.createListRecursor();
                  });
                  _this5.listState = replay.state;
                  recursor = replay.recursor;
                  recursedList = true;

                  if (recursor !== recursorUtils.NOOP_RECURSOR) {
                    retval = stats.describeListRecursor(recursor);
                  }
                } else if (!recursedProperty) {
                  var _replay = recursorUtils.replay(_this5.propertyState, function () {
                    return _this5.createPropertyRecursor();
                  });

                  _this5.propertyState = _replay.state;
                  recursor = _replay.recursor;
                  recursedProperty = true;

                  if (recursor !== recursorUtils.NOOP_RECURSOR) {
                    retval = stats.describePropertyRecursor(recursor);
                  }
                } else if (!recursedIterable) {
                  var _replay2 = recursorUtils.replay(_this5.iterableState, function () {
                    return _this5.createIterableRecursor();
                  });

                  _this5.iterableState = _replay2.state;
                  recursor = _replay2.recursor;
                  recursedIterable = true;

                  if (recursor !== recursorUtils.NOOP_RECURSOR) {
                    retval = stats.describeIterableRecursor(recursor);
                  }
                }
              }
            } while (recursor !== null && retval === null);

            return retval;
          };
        }
      }]);

      return _class;
    }(base)
  );
}

exports.DescribedMixin = DescribedMixin;

function DeserializedMixin(base) {
  return (
    /*#__PURE__*/
    function (_base2) {
      _inherits(_class2, _base2);

      function _class2(state, recursor) {
        var _this6;

        _classCallCheck(this, _class2);

        _this6 = _possibleConstructorReturn(this, _getPrototypeOf(_class2).call(this, {
          ctor: state[0],
          pointer: state[1],
          stringTag: state[2],
          isArray: state[3],
          isIterable: state[4],
          isList: state[5]
        }));
        _this6.deserializedRecursor = recursor;
        _this6.replayState = null;
        return _this6;
      }

      _createClass(_class2, [{
        key: "createRecursor",
        value: function createRecursor() {
          var _this7 = this;

          if (!this.deserializedRecursor) return function () {
            return null;
          };
          var replay = recursorUtils.replay(this.replayState, function () {
            return {
              size: -1,
              next: _this7.deserializedRecursor
            };
          });
          this.replayState = replay.state;
          return replay.recursor.next;
        }
      }, {
        key: "hasSameCtor",
        value: function hasSameCtor(expected) {
          return this.ctor === expected.ctor;
        }
      }]);

      return _class2;
    }(base)
  );
}

exports.DeserializedMixin = DeserializedMixin;