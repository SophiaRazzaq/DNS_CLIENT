'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var constants = require('../constants');

var formatUtils = require('../formatUtils');

var lineBuilder = require('../lineBuilder');

var propertyStatsTag = require('../metaDescriptors/stats').propertyTag;

var recursorUtils = require('../recursorUtils');

var object = require('./object');

var DEEP_EQUAL = constants.DEEP_EQUAL;
var UNEQUAL = constants.UNEQUAL;

function getBuffer(value) {
  var buffer = Buffer.from(value.buffer);
  return value.byteLength !== value.buffer.byteLength ? buffer.slice(value.byteOffset, value.byteOffset + value.byteLength) : buffer;
}

exports.getBuffer = getBuffer;

function describe(props) {
  return new DescribedTypedArrayValue(Object.assign({
    buffer: getBuffer(props.value),
    // Set isArray and isList so the property recursor excludes the byte accessors
    isArray: true,
    isList: true
  }, props));
}

exports.describe = describe;

function deserialize(state, recursor) {
  return new DeserializedTypedArrayValue(state, recursor);
}

exports.deserialize = deserialize;

function deserializeBytes(buffer) {
  return new Bytes(buffer);
}

exports.deserializeBytes = deserializeBytes;
var bytesTag = Symbol('Bytes');
exports.bytesTag = bytesTag;
var tag = Symbol('TypedArrayValue');
exports.tag = tag;

var Bytes =
/*#__PURE__*/
function () {
  function Bytes(buffer) {
    _classCallCheck(this, Bytes);

    this.buffer = buffer;
  }

  _createClass(Bytes, [{
    key: "compare",
    value: function compare(expected) {
      return expected.tag === bytesTag && this.buffer.equals(expected.buffer) ? DEEP_EQUAL : UNEQUAL;
    }
  }, {
    key: "formatDeep",
    value: function formatDeep(theme, indent) {
      var indentation = indent;
      var lines = lineBuilder.buffer(); // Display 4-byte words, 8 per line

      var string = '';
      var isFirst = true;

      for (var offset = 0; offset < this.buffer.length; offset += 4) {
        if (offset > 0) {
          if (offset % 32 === 0) {
            if (isFirst) {
              lines.append(lineBuilder.first(string));
              isFirst = false;
            } else {
              lines.append(lineBuilder.line(string));
            }

            string = String(indentation);
          } else {
            string += ' ';
          }
        }

        string += formatUtils.wrap(theme.typedArray.bytes, this.buffer.toString('hex', offset, offset + 4));
      }

      return isFirst ? lineBuilder.single(string) : lines.append(lineBuilder.last(string));
    }
  }, {
    key: "serialize",
    value: function serialize() {
      return this.buffer;
    }
  }]);

  return Bytes;
}();

Object.defineProperty(Bytes.prototype, 'tag', {
  value: bytesTag
});

var TypedArrayValue =
/*#__PURE__*/
function (_object$ObjectValue) {
  _inherits(TypedArrayValue, _object$ObjectValue);

  function TypedArrayValue(props) {
    var _this;

    _classCallCheck(this, TypedArrayValue);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TypedArrayValue).call(this, props));
    _this.buffer = props.buffer;
    return _this;
  }

  _createClass(TypedArrayValue, [{
    key: "formatShallow",
    value: function formatShallow(theme, indent) {
      return _get(_getPrototypeOf(TypedArrayValue.prototype), "formatShallow", this).call(this, theme, indent).customize({
        shouldFormat: function shouldFormat(subject) {
          if (subject.tag === propertyStatsTag) return subject.size > 1;
          if (subject.isProperty === true) return subject.key.value !== 'byteLength';
          if (subject.tag === bytesTag) return subject.buffer.byteLength > 0;
          return true;
        }
      });
    }
  }]);

  return TypedArrayValue;
}(object.ObjectValue);

Object.defineProperty(TypedArrayValue.prototype, 'tag', {
  value: tag
});
exports.TypedArrayValue = TypedArrayValue;

function DescribedMixin(base) {
  return (
    /*#__PURE__*/
    function (_object$DescribedMixi) {
      _inherits(_class, _object$DescribedMixi);

      function _class() {
        _classCallCheck(this, _class);

        return _possibleConstructorReturn(this, _getPrototypeOf(_class).apply(this, arguments));
      }

      _createClass(_class, [{
        key: "createListRecursor",
        // The list isn't recursed. Instead a Bytes instance is returned by the main
        // recursor.
        value: function createListRecursor() {
          return recursorUtils.NOOP_RECURSOR;
        }
      }, {
        key: "createPropertyRecursor",
        value: function createPropertyRecursor() {
          var _this2 = this;

          var recursor = _get(_getPrototypeOf(_class.prototype), "createPropertyRecursor", this).call(this);

          var size = recursor.size + 1;
          var done = false;

          var next = function next() {
            if (done) return null;
            var property = recursor.next();
            if (property) return property;
            done = true;
            return _this2.describeProperty('byteLength', _this2.describeAny(_this2.buffer.byteLength));
          };

          return {
            size: size,
            next: next
          };
        }
      }, {
        key: "createRecursor",
        value: function createRecursor() {
          return recursorUtils.unshift(_get(_getPrototypeOf(_class.prototype), "createRecursor", this).call(this), new Bytes(this.buffer));
        }
      }]);

      return _class;
    }(object.DescribedMixin(base))
  );
}

exports.DescribedMixin = DescribedMixin;
var DescribedTypedArrayValue = DescribedMixin(TypedArrayValue);

function DeserializedMixin(base) {
  return (
    /*#__PURE__*/
    function (_object$DeserializedM) {
      _inherits(_class2, _object$DeserializedM);

      function _class2(state, recursor) {
        var _this3;

        _classCallCheck(this, _class2);

        _this3 = _possibleConstructorReturn(this, _getPrototypeOf(_class2).call(this, state, recursor)); // Get the Bytes descriptor from the recursor. It contains the buffer.

        var bytesDescriptor = _this3.createRecursor()();

        _this3.buffer = bytesDescriptor.buffer;
        return _this3;
      }

      return _class2;
    }(object.DeserializedMixin(base))
  );
}

exports.DeserializedMixin = DeserializedMixin;
var DeserializedTypedArrayValue = DeserializedMixin(TypedArrayValue);