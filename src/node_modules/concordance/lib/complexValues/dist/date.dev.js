'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var dateTime = require('date-time');

var constants = require('../constants');

var formatUtils = require('../formatUtils');

var lineBuilder = require('../lineBuilder');

var object = require('./object');

var SHALLOW_EQUAL = constants.SHALLOW_EQUAL;
var UNEQUAL = constants.UNEQUAL;

function describe(props) {
  var date = props.value;
  var invalid = isNaN(date.valueOf());
  return new DescribedDateValue(Object.assign({}, props, {
    invalid: invalid
  }));
}

exports.describe = describe;

function deserialize(state, recursor) {
  return new DeserializedDateValue(state, recursor);
}

exports.deserialize = deserialize;
var tag = Symbol('DateValue');
exports.tag = tag;

function formatDate(date) {
  // Always format in UTC. The local timezone shouldn't be used since it's most
  // likely different from that of CI servers.
  return dateTime({
    date: date,
    local: false,
    showTimeZone: true,
    showMilliseconds: true
  });
}

var DateValue =
/*#__PURE__*/
function (_object$ObjectValue) {
  _inherits(DateValue, _object$ObjectValue);

  function DateValue(props) {
    var _this;

    _classCallCheck(this, DateValue);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DateValue).call(this, props));
    _this.invalid = props.invalid;
    return _this;
  }

  _createClass(DateValue, [{
    key: "compare",
    value: function compare(expected) {
      var result = _get(_getPrototypeOf(DateValue.prototype), "compare", this).call(this, expected);

      if (result !== SHALLOW_EQUAL) return result;
      return this.invalid && expected.invalid || Object.is(this.value.getTime(), expected.value.getTime()) ? SHALLOW_EQUAL : UNEQUAL;
    }
  }, {
    key: "formatShallow",
    value: function formatShallow(theme, indent) {
      var string = formatUtils.formatCtorAndStringTag(theme, this) + ' ' + (this.invalid ? theme.date.invalid : formatUtils.wrap(theme.date.value, formatDate(this.value))) + ' ' + theme.object.openBracket;
      return _get(_getPrototypeOf(DateValue.prototype), "formatShallow", this).call(this, theme, indent).customize({
        finalize: function finalize(innerLines) {
          return innerLines.isEmpty ? lineBuilder.single(string + theme.object.closeBracket) : lineBuilder.first(string).concat(innerLines.withFirstPrefixed(indent.increase()).stripFlags()).append(lineBuilder.last(indent + theme.object.closeBracket));
        },
        maxDepth: function maxDepth() {
          return lineBuilder.single(string + ' ' + theme.maxDepth + ' ' + theme.object.closeBracket);
        }
      });
    }
  }, {
    key: "serialize",
    value: function serialize() {
      var iso = this.invalid ? null : this.value.toISOString();
      return [this.invalid, iso, _get(_getPrototypeOf(DateValue.prototype), "serialize", this).call(this)];
    }
  }]);

  return DateValue;
}(object.ObjectValue);

Object.defineProperty(DateValue.prototype, 'tag', {
  value: tag
});
var DescribedDateValue = object.DescribedMixin(DateValue);

var DeserializedDateValue =
/*#__PURE__*/
function (_object$DeserializedM) {
  _inherits(DeserializedDateValue, _object$DeserializedM);

  function DeserializedDateValue(state, recursor) {
    var _this2;

    _classCallCheck(this, DeserializedDateValue);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(DeserializedDateValue).call(this, state[2], recursor));
    _this2.invalid = state[0];
    _this2.value = new Date(_this2.invalid ? NaN : state[1]);
    return _this2;
  }

  return DeserializedDateValue;
}(object.DeserializedMixin(DateValue));