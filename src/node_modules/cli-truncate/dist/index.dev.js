"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = cliTruncate;

var _sliceAnsi = _interopRequireDefault(require("slice-ansi"));

var _stringWidth = _interopRequireDefault(require("string-width"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function getIndexOfNearestSpace(string, wantedIndex, shouldSearchRight) {
  if (string.charAt(wantedIndex) === ' ') {
    return wantedIndex;
  }

  var direction = shouldSearchRight ? 1 : -1;

  for (var index = 0; index <= 3; index++) {
    var finalIndex = wantedIndex + index * direction;

    if (string.charAt(finalIndex) === ' ') {
      return finalIndex;
    }
  }

  return wantedIndex;
}

function cliTruncate(text, columns) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var _options$position = options.position,
      position = _options$position === void 0 ? 'end' : _options$position,
      _options$space = options.space,
      space = _options$space === void 0 ? false : _options$space,
      _options$preferTrunca = options.preferTruncationOnSpace,
      preferTruncationOnSpace = _options$preferTrunca === void 0 ? false : _options$preferTrunca;
  var _options$truncationCh = options.truncationCharacter,
      truncationCharacter = _options$truncationCh === void 0 ? 'â€¦' : _options$truncationCh;

  if (typeof text !== 'string') {
    throw new TypeError("Expected `input` to be a string, got ".concat(_typeof(text)));
  }

  if (typeof columns !== 'number') {
    throw new TypeError("Expected `columns` to be a number, got ".concat(_typeof(columns)));
  }

  if (columns < 1) {
    return '';
  }

  if (columns === 1) {
    return truncationCharacter;
  }

  var length = (0, _stringWidth["default"])(text);

  if (length <= columns) {
    return text;
  }

  if (position === 'start') {
    if (preferTruncationOnSpace) {
      var nearestSpace = getIndexOfNearestSpace(text, length - columns + 1, true);
      return truncationCharacter + (0, _sliceAnsi["default"])(text, nearestSpace, length).trim();
    }

    if (space === true) {
      truncationCharacter += ' ';
    }

    return truncationCharacter + (0, _sliceAnsi["default"])(text, length - columns + (0, _stringWidth["default"])(truncationCharacter), length);
  }

  if (position === 'middle') {
    if (space === true) {
      truncationCharacter = " ".concat(truncationCharacter, " ");
    }

    var half = Math.floor(columns / 2);

    if (preferTruncationOnSpace) {
      var spaceNearFirstBreakPoint = getIndexOfNearestSpace(text, half);
      var spaceNearSecondBreakPoint = getIndexOfNearestSpace(text, length - (columns - half) + 1, true);
      return (0, _sliceAnsi["default"])(text, 0, spaceNearFirstBreakPoint) + truncationCharacter + (0, _sliceAnsi["default"])(text, spaceNearSecondBreakPoint, length).trim();
    }

    return (0, _sliceAnsi["default"])(text, 0, half) + truncationCharacter + (0, _sliceAnsi["default"])(text, length - (columns - half) + (0, _stringWidth["default"])(truncationCharacter), length);
  }

  if (position === 'end') {
    if (preferTruncationOnSpace) {
      var _nearestSpace = getIndexOfNearestSpace(text, columns - 1);

      return (0, _sliceAnsi["default"])(text, 0, _nearestSpace) + truncationCharacter;
    }

    if (space === true) {
      truncationCharacter = " ".concat(truncationCharacter);
    }

    return (0, _sliceAnsi["default"])(text, 0, columns - (0, _stringWidth["default"])(truncationCharacter)) + truncationCharacter;
  }

  throw new Error("Expected `options.position` to be either `start`, `middle` or `end`, got ".concat(position));
}