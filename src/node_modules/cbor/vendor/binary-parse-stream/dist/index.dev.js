// Tweaked version of nathan7's binary-parse-stream
// (see https://github.com/nathan7/binary-parse-stream)
// Uses NoFilter instead of the readable in the original.  Removes
// the ability to read -1, which was odd and un-needed.
// License for binary-parse-stream: MIT
// binary-parse-stream is now unmaintained, so I have rewritten it as
// more modern JS so I can get tsc to help check types.
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var stream = require('stream');

var NoFilter = require('nofilter');
/**
 * BinaryParseStream is a TransformStream that consumes buffers and outputs
 * objects on the other end.  It expects your subclass to implement a `_parse`
 * method that is a generator.  When your generator yields a number, it'll be
 * fed a buffer of that length from the input.  When your generator returns,
 * the return value will be pushed to the output side.
 *
 * @extends stream.Transform
 */


var BinaryParseStream =
/*#__PURE__*/
function (_stream$Transform) {
  _inherits(BinaryParseStream, _stream$Transform);

  /**
   * Creates an instance of BinaryParseStream.
   *
   * @memberof BinaryParseStream
   * @param {stream.TransformOptions} options Stream options.
   */
  function BinaryParseStream(options) {
    var _this;

    _classCallCheck(this, BinaryParseStream);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(BinaryParseStream).call(this, options)); // Doesn't work to pass these in as opts, for some reason
    // also, work around typescript not knowing TransformStream internals
    // eslint-disable-next-line dot-notation

    _this['_writableState'].objectMode = false; // eslint-disable-next-line dot-notation

    _this['_readableState'].objectMode = true;
    _this.bs = new NoFilter();

    _this.__restart();

    return _this;
  }
  /**
   * Transforming.
   *
   * @param {any} fresh Buffer to transcode.
   * @param {BufferEncoding} encoding Name of encoding.
   * @param {stream.TransformCallback} cb Callback when done.
   * @ignore
   */


  _createClass(BinaryParseStream, [{
    key: "_transform",
    value: function _transform(fresh, encoding, cb) {
      this.bs.write(fresh);

      while (this.bs.length >= this.__needed) {
        var ret = null;
        var chunk = this.__needed === null ? undefined : this.bs.read(this.__needed);

        try {
          ret = this.__parser.next(chunk);
        } catch (e) {
          return cb(e);
        }

        if (this.__needed) {
          this.__fresh = false;
        }

        if (ret.done) {
          this.push(ret.value);

          this.__restart();
        } else {
          this.__needed = ret.value || Infinity;
        }
      }

      return cb();
    }
    /**
     * Subclasses must override this to set their parsing behavior.  Yield a
     * number to receive a Buffer of that many bytes.
     *
     * @abstract
     * @returns {Generator<number, any, Buffer>}
     */

    /* istanbul ignore next */

  }, {
    key: "_parse",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function _parse() {
      return regeneratorRuntime.wrap(function _parse$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              throw new Error('Must be implemented in subclass');

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _parse);
    })
  }, {
    key: "__restart",
    value: function __restart() {
      this.__needed = null;
      this.__parser = this._parse();
      this.__fresh = true;
    }
    /**
     * Flushing.
     *
     * @param {stream.TransformCallback} cb Callback when done.
     * @ignore
     */

  }, {
    key: "_flush",
    value: function _flush(cb) {
      cb(this.__fresh ? null : new Error('unexpected end of input'));
    }
  }]);

  return BinaryParseStream;
}(stream.Transform);

module.exports = BinaryParseStream;