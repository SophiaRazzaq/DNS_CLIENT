'use strict';

function _wrapRegExp(re, groups) { _wrapRegExp = function _wrapRegExp(re, groups) { return new BabelRegExp(re, undefined, groups); }; var _RegExp = _wrapNativeSuper(RegExp); var _super = RegExp.prototype; var _groups = new WeakMap(); function BabelRegExp(re, flags, groups) { var _this = _RegExp.call(this, re, flags); _groups.set(_this, groups || _groups.get(re)); return _this; } _inherits(BabelRegExp, _RegExp); BabelRegExp.prototype.exec = function (str) { var result = _super.exec.call(this, str); if (result) result.groups = buildGroups(result, this); return result; }; BabelRegExp.prototype[Symbol.replace] = function (str, substitution) { if (typeof substitution === "string") { var groups = _groups.get(this); return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function (_, name) { return "$" + groups[name]; })); } else if (typeof substitution === "function") { var _this = this; return _super[Symbol.replace].call(this, str, function () { var args = []; args.push.apply(args, arguments); if (_typeof(args[args.length - 1]) !== "object") { args.push(buildGroups(args, _this)); } return substitution.apply(this, args); }); } else { return _super[Symbol.replace].call(this, str, substitution); } }; function buildGroups(result, re) { var g = _groups.get(re); return Object.keys(g).reduce(function (groups, name) { groups[name] = result[g[name]]; return groups; }, Object.create(null)); } return _wrapRegExp.apply(this, arguments); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _require = require('buffer'),
    Buffer = _require.Buffer;

var NoFilter = require('nofilter');

var stream = require('stream');

var constants = require('./constants');

var NUMBYTES = constants.NUMBYTES,
    SHIFT32 = constants.SHIFT32,
    BI = constants.BI,
    SYMS = constants.SYMS;
var MAX_SAFE_HIGH = 0x1fffff;
/**
 * Convert a UTF8-encoded Buffer to a JS string.  If possible, throw an error
 * on invalid UTF8.  Byte Order Marks are not looked at or stripped.
 *
 * @private
 */

var td = new TextDecoder('utf8', {
  fatal: true,
  ignoreBOM: true
});

exports.utf8 = function (buf) {
  return td.decode(buf);
};

exports.utf8.checksUTF8 = true;

function isReadable(s) {
  // Is this a readable stream?  In the webpack version, instanceof isn't
  // working correctly.
  if (s instanceof stream.Readable) {
    return true;
  }

  return ['read', 'on', 'pipe'].every(function (f) {
    return typeof s[f] === 'function';
  });
}

exports.isBufferish = function isBufferish(b) {
  return b && _typeof(b) === 'object' && (Buffer.isBuffer(b) || b instanceof Uint8Array || b instanceof Uint8ClampedArray || b instanceof ArrayBuffer || b instanceof DataView);
};

exports.bufferishToBuffer = function bufferishToBuffer(b) {
  if (Buffer.isBuffer(b)) {
    return b;
  } else if (ArrayBuffer.isView(b)) {
    return Buffer.from(b.buffer, b.byteOffset, b.byteLength);
  } else if (b instanceof ArrayBuffer) {
    return Buffer.from(b);
  }

  return null;
};

exports.parseCBORint = function parseCBORint(ai, buf) {
  switch (ai) {
    case NUMBYTES.ONE:
      return buf.readUInt8(0);

    case NUMBYTES.TWO:
      return buf.readUInt16BE(0);

    case NUMBYTES.FOUR:
      return buf.readUInt32BE(0);

    case NUMBYTES.EIGHT:
      {
        var f = buf.readUInt32BE(0);
        var g = buf.readUInt32BE(4);

        if (f > MAX_SAFE_HIGH) {
          return BigInt(f) * BI.SHIFT32 + BigInt(g);
        }

        return f * SHIFT32 + g;
      }

    default:
      throw new Error("Invalid additional info for int: ".concat(ai));
  }
};

exports.writeHalf = function writeHalf(buf, half) {
  // Assume 0, -0, NaN, Infinity, and -Infinity have already been caught
  // HACK: everyone settle in.  This isn't going to be pretty.
  // Translate cn-cbor's C code (from Carsten Borman):
  // uint32_t be32;
  // uint16_t be16, u16;
  // union {
  //   float f;
  //   uint32_t u;
  // } u32;
  // u32.f = float_val;
  var u32 = Buffer.allocUnsafe(4);
  u32.writeFloatBE(half, 0);
  var u = u32.readUInt32BE(0); // If ((u32.u & 0x1FFF) == 0) { /* worth trying half */
  // hildjj: If the lower 13 bits aren't 0,
  // we will lose precision in the conversion.
  // mant32 = 24bits, mant16 = 11bits, 24-11 = 13

  if ((u & 0x1FFF) !== 0) {
    return false;
  } // Sign, exponent, mantissa
  //   int s16 = (u32.u >> 16) & 0x8000;
  //   int exp = (u32.u >> 23) & 0xff;
  //   int mant = u32.u & 0x7fffff;


  var s16 = u >> 16 & 0x8000; // Top bit is sign

  var exp = u >> 23 & 0xff; // Then 5 bits of exponent

  var mant = u & 0x7fffff; // Hildjj: zeros already handled.  Assert if you don't believe me.
  //   if (exp == 0 && mant == 0)
  //     ;              /* 0.0, -0.0 */
  //   else if (exp >= 113 && exp <= 142) /* normalized */
  //     s16 += ((exp - 112) << 10) + (mant >> 13);

  if (exp >= 113 && exp <= 142) {
    s16 += (exp - 112 << 10) + (mant >> 13);
  } else if (exp >= 103 && exp < 113) {
    // Denormalized numbers
    //   else if (exp >= 103 && exp < 113) { /* denorm, exp16 = 0 */
    //     if (mant & ((1 << (126 - exp)) - 1))
    //       goto float32;         /* loss of precision */
    //     s16 += ((mant + 0x800000) >> (126 - exp));
    if (mant & (1 << 126 - exp) - 1) {
      return false;
    }

    s16 += mant + 0x800000 >> 126 - exp;
  } else {
    //   } else if (exp == 255 && mant == 0) { /* Inf */
    //     s16 += 0x7c00;
    // hildjj: Infinity already handled
    //   } else
    //     goto float32;           /* loss of range */
    return false;
  } // Done
  //   ensure_writable(3);
  //   u16 = s16;
  //   be16 = hton16p((const uint8_t*)&u16);


  buf.writeUInt16BE(s16);
  return true;
};

exports.parseHalf = function parseHalf(buf) {
  var sign = buf[0] & 0x80 ? -1 : 1;
  var exp = (buf[0] & 0x7C) >> 2;
  var mant = (buf[0] & 0x03) << 8 | buf[1];

  if (!exp) {
    return sign * 5.9604644775390625e-8 * mant;
  } else if (exp === 0x1f) {
    return sign * (mant ? NaN : Infinity);
  }

  return sign * Math.pow(2, exp - 25) * (1024 + mant);
};

exports.parseCBORfloat = function parseCBORfloat(buf) {
  switch (buf.length) {
    case 2:
      return exports.parseHalf(buf);

    case 4:
      return buf.readFloatBE(0);

    case 8:
      return buf.readDoubleBE(0);

    default:
      throw new Error("Invalid float size: ".concat(buf.length));
  }
};

exports.hex = function hex(s) {
  return Buffer.from(s.replace(/^0x/, ''), 'hex');
};

exports.bin = function bin(s) {
  s = s.replace(/\s/g, '');
  var start = 0;
  var end = s.length % 8 || 8;
  var chunks = [];

  while (end <= s.length) {
    chunks.push(parseInt(s.slice(start, end), 2));
    start = end;
    end += 8;
  }

  return Buffer.from(chunks);
};

exports.arrayEqual = function arrayEqual(a, b) {
  if (a == null && b == null) {
    return true;
  }

  if (a == null || b == null) {
    return false;
  }

  return a.length === b.length && a.every(function (elem, i) {
    return elem === b[i];
  });
};

exports.bufferToBigInt = function bufferToBigInt(buf) {
  return BigInt("0x".concat(buf.toString('hex')));
};

exports.cborValueToString = function cborValueToString(val) {
  var float_bytes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;

  switch (_typeof(val)) {
    case 'symbol':
      {
        switch (val) {
          case SYMS.NULL:
            return 'null';

          case SYMS.UNDEFINED:
            return 'undefined';

          case SYMS.BREAK:
            return 'BREAK';
        } // Impossible in node 10

        /* istanbul ignore if */


        if (val.description) {
          return val.description;
        } // On node10, Symbol doesn't have description.  Parse it out of the
        // toString value, which looks like `Symbol(foo)`.


        var s = val.toString();
        var m = s.match(_wrapRegExp(/^Symbol\((.*)\)/, {
          name: 1
        }));
        /* istanbul ignore if */

        if (m && m.groups.name) {
          // Impossible in node 12+

          /* istanbul ignore next */
          return m.groups.name;
        }

        return 'Symbol';
      }

    case 'string':
      return JSON.stringify(val);

    case 'bigint':
      return val.toString();

    case 'number':
      {
        var _s = Object.is(val, -0) ? '-0' : String(val);

        return float_bytes > 0 ? "".concat(_s, "_").concat(float_bytes) : _s;
      }

    case 'object':
      {
        if (!val) {
          return 'null';
        }

        var buf = exports.bufferishToBuffer(val);

        if (buf) {
          var hex = buf.toString('hex');
          return float_bytes === -Infinity ? hex : "h'".concat(hex, "'");
        }

        if (val && typeof val[Symbol["for"]('nodejs.util.inspect.custom')] === 'function') {
          return val[Symbol["for"]('nodejs.util.inspect.custom')]();
        } // Shouldn't get non-empty arrays here


        if (Array.isArray(val)) {
          return '[]';
        } // This should be all that is left


        return '{}';
      }
  }

  return String(val);
};

exports.guessEncoding = function guessEncoding(input, encoding) {
  if (typeof input === 'string') {
    return new NoFilter(input, encoding == null ? 'hex' : encoding);
  }

  var buf = exports.bufferishToBuffer(input);

  if (buf) {
    return new NoFilter(buf);
  }

  if (isReadable(input)) {
    return input;
  }

  throw new Error('Unknown input type');
};

var B64URL_SWAPS = {
  '=': '',
  '+': '-',
  '/': '_'
};
/**
 * @param {Buffer|Uint8Array|Uint8ClampedArray|ArrayBuffer|DataView} buf
 *   Buffer to convert.
 * @returns {string} Base64url string.
 * @private
 */

exports.base64url = function base64url(buf) {
  return exports.bufferishToBuffer(buf).toString('base64').replace(/[=+/]/g, function (c) {
    return B64URL_SWAPS[c];
  });
};
/**
 * @param {Buffer|Uint8Array|Uint8ClampedArray|ArrayBuffer|DataView} buf
 *   Buffer to convert.
 * @returns {string} Base64 string.
 * @private
 */


exports.base64 = function base64(buf) {
  return exports.bufferishToBuffer(buf).toString('base64');
};

exports.isBigEndian = function isBigEndian() {
  var array = new Uint8Array(4);
  var view = new Uint32Array(array.buffer);
  return !((view[0] = 1) & array[0]);
};