'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var stream = require('stream');

var utils = require('./utils');

var Decoder = require('./decoder');

var NoFilter = require('nofilter');

var _require = require('./constants'),
    MT = _require.MT,
    NUMBYTES = _require.NUMBYTES,
    SYMS = _require.SYMS;

var _require2 = require('buffer'),
    Buffer = _require2.Buffer;

function plural(c) {
  if (c > 1) {
    return 's';
  }

  return '';
}
/**
 * @typedef CommentOptions
 * @property {number} [max_depth=10] How many times to indent
 *   the dashes.
 * @property {number} [depth=1] Initial indentation depth.
 * @property {boolean} [no_summary=false] If true, omit the summary
 *   of the full bytes read at the end.
 * @property {object} [tags] Mapping from tag number to function(v),
 *   where v is the decoded value that comes after the tag, and where the
 *   function returns the correctly-created value for that tag.
 * @property {boolean} [preferWeb=false] If true, prefer Uint8Arrays to
 *   be generated instead of node Buffers.  This might turn on some more
 *   changes in the future, so forward-compatibility is not guaranteed yet.
 * @property {BufferEncoding} [encoding='hex'] Encoding to use for input, if it
 *   is a string.
 */

/**
 * @callback commentCallback
 * @param {Error} [error] If one was generated.
 * @param {string} [commented] The comment string.
 * @returns {void}
 */

/**
 * Normalize inputs to the static functions.
 *
 * @param {CommentOptions|commentCallback|string|number} opts Encoding,
 *   max_depth, or callback.
 * @param {commentCallback} [cb] Called on completion.
 * @returns {{options: CommentOptions, cb: commentCallback}} Normalized value.
 * @throws {TypeError} Unknown option type.
 * @private
 */


function normalizeOptions(opts, cb) {
  switch (_typeof(opts)) {
    case 'function':
      return {
        options: {},
        cb:
        /** @type {commentCallback} */
        opts
      };

    case 'string':
      return {
        options: {
          encoding:
          /** @type {BufferEncoding} */
          opts
        },
        cb: cb
      };

    case 'number':
      return {
        options: {
          max_depth: opts
        },
        cb: cb
      };

    case 'object':
      return {
        options: opts || {},
        cb: cb
      };

    default:
      throw new TypeError('Unknown option type');
  }
}
/**
 * Generate the expanded format of RFC 8949, section 3.2.2.
 *
 * @extends stream.Transform
 */


var Commented =
/*#__PURE__*/
function (_stream$Transform) {
  _inherits(Commented, _stream$Transform);

  /**
   * Create a CBOR commenter.
   *
   * @param {CommentOptions} [options={}] Stream options.
   */
  function Commented() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Commented);

    var _options$depth = options.depth,
        depth = _options$depth === void 0 ? 1 : _options$depth,
        _options$max_depth = options.max_depth,
        max_depth = _options$max_depth === void 0 ? 10 : _options$max_depth,
        _options$no_summary = options.no_summary,
        no_summary = _options$no_summary === void 0 ? false : _options$no_summary,
        _options$tags = options.tags,
        tags = _options$tags === void 0 ? {} : _options$tags,
        preferWeb = options.preferWeb,
        encoding = options.encoding,
        superOpts = _objectWithoutProperties(options, ["depth", "max_depth", "no_summary", "tags", "preferWeb", "encoding"]);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Commented).call(this, _objectSpread({}, superOpts, {
      readableObjectMode: false,
      writableObjectMode: false
    })));
    _this.depth = depth;
    _this.max_depth = max_depth;
    _this.all = new NoFilter();

    if (!tags[24]) {
      tags[24] = _this._tag_24.bind(_assertThisInitialized(_this));
    }

    _this.parser = new Decoder({
      tags: tags,
      max_depth: max_depth,
      preferWeb: preferWeb,
      encoding: encoding
    });

    _this.parser.on('value', _this._on_value.bind(_assertThisInitialized(_this)));

    _this.parser.on('start', _this._on_start.bind(_assertThisInitialized(_this)));

    _this.parser.on('start-string', _this._on_start_string.bind(_assertThisInitialized(_this)));

    _this.parser.on('stop', _this._on_stop.bind(_assertThisInitialized(_this)));

    _this.parser.on('more-bytes', _this._on_more.bind(_assertThisInitialized(_this)));

    _this.parser.on('error', _this._on_error.bind(_assertThisInitialized(_this)));

    if (!no_summary) {
      _this.parser.on('data', _this._on_data.bind(_assertThisInitialized(_this)));
    }

    _this.parser.bs.on('read', _this._on_read.bind(_assertThisInitialized(_this)));

    return _this;
  }
  /**
   * @param {Buffer} v Descend into embedded CBOR.
   * @private
   */


  _createClass(Commented, [{
    key: "_tag_24",
    value: function _tag_24(v) {
      var _this2 = this;

      var c = new Commented({
        depth: this.depth + 1,
        no_summary: true
      });
      c.on('data', function (b) {
        return _this2.push(b);
      });
      c.on('error', function (er) {
        return _this2.emit('error', er);
      });
      c.end(v);
    }
    /**
     * Transforming.
     *
     * @param {any} fresh Buffer to transcode.
     * @param {BufferEncoding} encoding Name of encoding.
     * @param {stream.TransformCallback} cb Callback when done.
     * @ignore
     */

  }, {
    key: "_transform",
    value: function _transform(fresh, encoding, cb) {
      this.parser.write(fresh, encoding, cb);
    }
    /**
     * Flushing.
     *
     * @param {stream.TransformCallback} cb Callback when done.
     * @ignore
     */

  }, {
    key: "_flush",
    value: function _flush(cb) {
      // TODO: find the test that covers this, and look at the return value
      return this.parser._flush(cb);
    }
    /**
     * Comment on an input Buffer or string, creating a string passed to the
     * callback.  If callback not specified, a promise is returned.
     *
     * @param {string|Buffer|ArrayBuffer|Uint8Array|Uint8ClampedArray
     *   |DataView|stream.Readable} input Something to parse.
     * @param {CommentOptions|commentCallback|string|number} [options={}]
     *   Encoding, max_depth, or callback.
     * @param {commentCallback} [cb] If specified, called on completion.
     * @returns {Promise} If cb not specified.
     * @throws {Error} Input required.
     * @static
     */

  }, {
    key: "_on_error",

    /**
     * @ignore
     */
    value: function _on_error(er) {
      this.push('ERROR: ');
      this.push(er.toString());
      this.push('\n');
    }
    /**
     * @ignore
     */

  }, {
    key: "_on_read",
    value: function _on_read(buf) {
      this.all.write(buf);
      var hex = buf.toString('hex');
      this.push(new Array(this.depth + 1).join('  '));
      this.push(hex);
      var ind = (this.max_depth - this.depth) * 2 - hex.length;

      if (ind < 1) {
        ind = 1;
      }

      this.push(new Array(ind + 1).join(' '));
      this.push('-- ');
    }
    /**
     * @ignore
     */

  }, {
    key: "_on_more",
    value: function _on_more(mt, len, parent_mt, pos) {
      var desc = '';
      this.depth++;

      switch (mt) {
        case MT.POS_INT:
          desc = 'Positive number,';
          break;

        case MT.NEG_INT:
          desc = 'Negative number,';
          break;

        case MT.ARRAY:
          desc = 'Array, length';
          break;

        case MT.MAP:
          desc = 'Map, count';
          break;

        case MT.BYTE_STRING:
          desc = 'Bytes, length';
          break;

        case MT.UTF8_STRING:
          desc = 'String, length';
          break;

        case MT.SIMPLE_FLOAT:
          if (len === 1) {
            desc = 'Simple value,';
          } else {
            desc = 'Float,';
          }

          break;
      }

      this.push("".concat(desc, " next ").concat(len, " byte").concat(plural(len), "\n"));
    }
    /**
     * @ignore
     */

  }, {
    key: "_on_start_string",
    value: function _on_start_string(mt, len, parent_mt, pos) {
      var desc = '';
      this.depth++;

      switch (mt) {
        case MT.BYTE_STRING:
          desc = "Bytes, length: ".concat(len);
          break;

        case MT.UTF8_STRING:
          desc = "String, length: ".concat(len.toString());
          break;
      }

      this.push("".concat(desc, "\n"));
    }
    /**
     * @ignore
     */

  }, {
    key: "_on_start",
    value: function _on_start(mt, tag, parent_mt, pos) {
      this.depth++;

      switch (parent_mt) {
        case MT.ARRAY:
          this.push("[".concat(pos, "], "));
          break;

        case MT.MAP:
          if (pos % 2) {
            this.push("{Val:".concat(Math.floor(pos / 2), "}, "));
          } else {
            this.push("{Key:".concat(Math.floor(pos / 2), "}, "));
          }

          break;
      }

      switch (mt) {
        case MT.TAG:
          this.push("Tag #".concat(tag));

          if (tag === 24) {
            this.push(' Encoded CBOR data item');
          }

          break;

        case MT.ARRAY:
          if (tag === SYMS.STREAM) {
            this.push('Array (streaming)');
          } else {
            this.push("Array, ".concat(tag, " item").concat(plural(tag)));
          }

          break;

        case MT.MAP:
          if (tag === SYMS.STREAM) {
            this.push('Map (streaming)');
          } else {
            this.push("Map, ".concat(tag, " pair").concat(plural(tag)));
          }

          break;

        case MT.BYTE_STRING:
          this.push('Bytes (streaming)');
          break;

        case MT.UTF8_STRING:
          this.push('String (streaming)');
          break;
      }

      this.push('\n');
    }
    /**
     * @ignore
     */

  }, {
    key: "_on_stop",
    value: function _on_stop(mt) {
      this.depth--;
    }
    /**
     * @private
     */

  }, {
    key: "_on_value",
    value: function _on_value(val, parent_mt, pos, ai) {
      if (val !== SYMS.BREAK) {
        switch (parent_mt) {
          case MT.ARRAY:
            this.push("[".concat(pos, "], "));
            break;

          case MT.MAP:
            if (pos % 2) {
              this.push("{Val:".concat(Math.floor(pos / 2), "}, "));
            } else {
              this.push("{Key:".concat(Math.floor(pos / 2), "}, "));
            }

            break;
        }
      }

      var str = utils.cborValueToString(val, -Infinity);

      if (typeof val === 'string' || Buffer.isBuffer(val)) {
        if (val.length > 0) {
          this.push(str);
          this.push('\n');
        }

        this.depth--;
      } else {
        this.push(str);
        this.push('\n');
      }

      switch (ai) {
        case NUMBYTES.ONE:
        case NUMBYTES.TWO:
        case NUMBYTES.FOUR:
        case NUMBYTES.EIGHT:
          this.depth--;
      }
    }
    /**
     * @ignore
     */

  }, {
    key: "_on_data",
    value: function _on_data() {
      this.push('0x');
      this.push(this.all.read().toString('hex'));
      this.push('\n');
    }
  }], [{
    key: "comment",
    value: function comment(input) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var cb = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      if (input == null) {
        throw new Error('input required');
      }

      var _normalizeOptions = normalizeOptions(options, cb);

      options = _normalizeOptions.options;
      cb = _normalizeOptions.cb;
      var bs = new NoFilter();

      var _options = options,
          _options$encoding = _options.encoding,
          encoding = _options$encoding === void 0 ? 'hex' : _options$encoding,
          opts = _objectWithoutProperties(_options, ["encoding"]);

      var d = new Commented(opts);
      var p = null;

      if (typeof cb === 'function') {
        d.on('end', function () {
          cb(null, bs.toString('utf8'));
        });
        d.on('error', cb);
      } else {
        p = new Promise(function (resolve, reject) {
          d.on('end', function () {
            resolve(bs.toString('utf8'));
          });
          d.on('error', reject);
        });
      }

      d.pipe(bs);
      utils.guessEncoding(input, encoding).pipe(d);
      return p;
    }
  }]);

  return Commented;
}(stream.Transform);

module.exports = Commented;