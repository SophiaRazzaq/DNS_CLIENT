'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('buffer'),
    Buffer = _require.Buffer;

var encoder = require('./encoder');

var decoder = require('./decoder');

var _require2 = require('./constants'),
    MT = _require2.MT;
/**
 * Wrapper around a JavaScript Map object that allows the keys to be
 * any complex type.  The base Map object allows this, but will only
 * compare the keys by identity, not by value.  CborMap translates keys
 * to CBOR first (and base64's them to ensure by-value comparison).
 *
 * This is not a subclass of Object, because it would be tough to get
 * the semantics to be an exact match.
 *
 * @extends Map
 */


var CborMap =
/*#__PURE__*/
function (_Map) {
  _inherits(CborMap, _Map);

  /**
   * Creates an instance of CborMap.
   *
   * @param {Iterable<any>} [iterable] An Array or other iterable
   *   object whose elements are key-value pairs (arrays with two elements, e.g.
   *   <code>[[ 1, 'one' ],[ 2, 'two' ]]</code>). Each key-value pair is added
   *   to the new CborMap; null values are treated as undefined.
   */
  function CborMap(iterable) {
    _classCallCheck(this, CborMap);

    return _possibleConstructorReturn(this, _getPrototypeOf(CborMap).call(this, iterable));
  }
  /**
   * @ignore
   */


  _createClass(CborMap, [{
    key: "get",

    /**
     * Retrieve a specified element.
     *
     * @param {any} key The key identifying the element to retrieve.
     *   Can be any type, which will be serialized into CBOR and compared by
     *   value.
     * @returns {any} The element if it exists, or <code>undefined</code>.
     */
    value: function get(key) {
      return _get(_getPrototypeOf(CborMap.prototype), "get", this).call(this, CborMap._encode(key));
    }
    /**
     * Adds or updates an element with a specified key and value.
     *
     * @param {any} key The key identifying the element to store.
     *   Can be any type, which will be serialized into CBOR and compared by
     *   value.
     * @param {any} val The element to store.
     * @returns {this} This object.
     */

  }, {
    key: "set",
    value: function set(key, val) {
      return _get(_getPrototypeOf(CborMap.prototype), "set", this).call(this, CborMap._encode(key), val);
    }
    /**
     * Removes the specified element.
     *
     * @param {any} key The key identifying the element to delete. Can be any
     *   type, which will be serialized into CBOR and compared by value.
     * @returns {boolean} True if an element in the Map object existed and has
     *   been removed, or false if the element does not exist.
     */

  }, {
    key: "delete",
    value: function _delete(key) {
      return _get(_getPrototypeOf(CborMap.prototype), "delete", this).call(this, CborMap._encode(key));
    }
    /**
     * Does an element with the specified key exist?
     *
     * @param {any} key The key identifying the element to check.
     *   Can be any type, which will be serialized into CBOR and compared by
     *   value.
     * @returns {boolean} True if an element with the specified key exists in
     *   the Map object; otherwise false.
     */

  }, {
    key: "has",
    value: function has(key) {
      return _get(_getPrototypeOf(CborMap.prototype), "has", this).call(this, CborMap._encode(key));
    }
    /**
     * Returns a new Iterator object that contains the keys for each element
     * in the Map object in insertion order.  The keys are decoded into their
     * original format.
     *
     * @yields {any} The keys of the map.
     */

  }, {
    key: "keys",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function keys() {
      var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, k;

      return regeneratorRuntime.wrap(function keys$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 3;
              _iterator = _get(_getPrototypeOf(CborMap.prototype), "keys", this).call(this)[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 12;
                break;
              }

              k = _step.value;
              _context.next = 9;
              return CborMap._decode(k);

            case 9:
              _iteratorNormalCompletion = true;
              _context.next = 5;
              break;

            case 12:
              _context.next = 18;
              break;

            case 14:
              _context.prev = 14;
              _context.t0 = _context["catch"](3);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 18:
              _context.prev = 18;
              _context.prev = 19;

              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }

            case 21:
              _context.prev = 21;

              if (!_didIteratorError) {
                _context.next = 24;
                break;
              }

              throw _iteratorError;

            case 24:
              return _context.finish(21);

            case 25:
              return _context.finish(18);

            case 26:
            case "end":
              return _context.stop();
          }
        }
      }, keys, this, [[3, 14, 18, 26], [19,, 21, 25]]);
    })
    /**
     * Returns a new Iterator object that contains the [key, value] pairs for
     * each element in the Map object in insertion order.
     *
     * @returns {IterableIterator<any>} Key value pairs.
     * @yields {any[]} Key value pairs.
     */

  }, {
    key: "entries",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function entries() {
      var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, kv;

      return regeneratorRuntime.wrap(function entries$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context2.prev = 3;
              _iterator2 = _get(_getPrototypeOf(CborMap.prototype), "entries", this).call(this)[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                _context2.next = 12;
                break;
              }

              kv = _step2.value;
              _context2.next = 9;
              return [CborMap._decode(kv[0]), kv[1]];

            case 9:
              _iteratorNormalCompletion2 = true;
              _context2.next = 5;
              break;

            case 12:
              _context2.next = 18;
              break;

            case 14:
              _context2.prev = 14;
              _context2.t0 = _context2["catch"](3);
              _didIteratorError2 = true;
              _iteratorError2 = _context2.t0;

            case 18:
              _context2.prev = 18;
              _context2.prev = 19;

              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }

            case 21:
              _context2.prev = 21;

              if (!_didIteratorError2) {
                _context2.next = 24;
                break;
              }

              throw _iteratorError2;

            case 24:
              return _context2.finish(21);

            case 25:
              return _context2.finish(18);

            case 26:
            case "end":
              return _context2.stop();
          }
        }
      }, entries, this, [[3, 14, 18, 26], [19,, 21, 25]]);
    })
    /**
     * Returns a new Iterator object that contains the [key, value] pairs for
     * each element in the Map object in insertion order.
     *
     * @returns {IterableIterator} Key value pairs.
     */

  }, {
    key: Symbol.iterator,
    value: function value() {
      return this.entries();
    }
    /**
     * Executes a provided function once per each key/value pair in the Map
     * object, in insertion order.
     *
     * @param {function(any, any, Map): undefined} fun Function to execute for
     *   each element, which takes a value, a key, and the Map being traversed.
     * @param {any} thisArg Value to use as this when executing callback.
     * @throws {TypeError} Invalid function.
     */

  }, {
    key: "forEach",
    value: function forEach(fun, thisArg) {
      if (typeof fun !== 'function') {
        throw new TypeError('Must be function');
      }

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = _get(_getPrototypeOf(CborMap.prototype), "entries", this).call(this)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var kv = _step3.value;
          fun.call(this, kv[1], CborMap._decode(kv[0]), this);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }
    /**
     * Push the simple value onto the CBOR stream.
     *
     * @param {object} gen The generator to push onto.
     * @returns {boolean} True on success.
     */

  }, {
    key: "encodeCBOR",
    value: function encodeCBOR(gen) {
      if (!gen._pushInt(this.size, MT.MAP)) {
        return false;
      }

      if (gen.canonical) {
        var _entries = Array.from(_get(_getPrototypeOf(CborMap.prototype), "entries", this).call(this)).map(function (kv) {
          return [Buffer.from(kv[0], 'base64'), kv[1]];
        });

        _entries.sort(function (a, b) {
          return a[0].compare(b[0]);
        });

        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = _entries[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var kv = _step4.value;

            if (!(gen.push(kv[0]) && gen.pushAny(kv[1]))) {
              return false;
            }
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
              _iterator4["return"]();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      } else {
        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
          for (var _iterator5 = _get(_getPrototypeOf(CborMap.prototype), "entries", this).call(this)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var _kv = _step5.value;

            if (!(gen.push(Buffer.from(_kv[0], 'base64')) && gen.pushAny(_kv[1]))) {
              return false;
            }
          }
        } catch (err) {
          _didIteratorError5 = true;
          _iteratorError5 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
              _iterator5["return"]();
            }
          } finally {
            if (_didIteratorError5) {
              throw _iteratorError5;
            }
          }
        }
      }

      return true;
    }
  }], [{
    key: "_encode",
    value: function _encode(key) {
      return encoder.encodeCanonical(key).toString('base64');
    }
    /**
     * @ignore
     */

  }, {
    key: "_decode",
    value: function _decode(key) {
      return decoder.decodeFirstSync(key, 'base64');
    }
  }]);

  return CborMap;
}(_wrapNativeSuper(Map));

module.exports = CborMap;