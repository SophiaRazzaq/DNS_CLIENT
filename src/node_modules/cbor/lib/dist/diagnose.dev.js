'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var stream = require('stream');

var Decoder = require('./decoder');

var utils = require('./utils');

var NoFilter = require('nofilter');

var _require = require('./constants'),
    MT = _require.MT,
    SYMS = _require.SYMS;
/**
 * Things that can act as inputs, from which a NoFilter can be created.
 *
 * @typedef {string|Buffer|ArrayBuffer|Uint8Array|Uint8ClampedArray
 *   |DataView|stream.Readable} BufferLike
 */

/**
 * @typedef DiagnoseOptions
 * @property {string} [separator='\n'] Output between detected objects.
 * @property {boolean} [stream_errors=false] Put error info into the
 *   output stream.
 * @property {number} [max_depth=-1] The maximum depth to parse.
 *   Use -1 for "until you run out of memory".  Set this to a finite
 *   positive number for un-trusted inputs.  Most standard inputs won't nest
 *   more than 100 or so levels; I've tested into the millions before
 *   running out of memory.
 * @property {object} [tags] Mapping from tag number to function(v),
 *   where v is the decoded value that comes after the tag, and where the
 *   function returns the correctly-created value for that tag.
 * @property {boolean} [preferWeb=false] If true, prefer Uint8Arrays to
 *   be generated instead of node Buffers.  This might turn on some more
 *   changes in the future, so forward-compatibility is not guaranteed yet.
 * @property {BufferEncoding} [encoding='hex'] The encoding of input, ignored if
 *   input is not string.
 */

/**
 * @callback diagnoseCallback
 * @param {Error} [error] If one was generated.
 * @param {string} [value] The diagnostic value.
 * @returns {void}
 */

/**
 * @param {DiagnoseOptions|diagnoseCallback|string} opts Options,
 *   the callback, or input incoding.
 * @param {diagnoseCallback} [cb] Called on completion.
 * @returns {{options: DiagnoseOptions, cb: diagnoseCallback}} Normalized.
 * @throws {TypeError} Unknown option type.
 * @private
 */


function normalizeOptions(opts, cb) {
  switch (_typeof(opts)) {
    case 'function':
      return {
        options: {},
        cb:
        /** @type {diagnoseCallback} */
        opts
      };

    case 'string':
      return {
        options: {
          encoding:
          /** @type {BufferEncoding} */
          opts
        },
        cb: cb
      };

    case 'object':
      return {
        options: opts || {},
        cb: cb
      };

    default:
      throw new TypeError('Unknown option type');
  }
}
/**
 * Output the diagnostic format from a stream of CBOR bytes.
 *
 * @extends stream.Transform
 */


var Diagnose =
/*#__PURE__*/
function (_stream$Transform) {
  _inherits(Diagnose, _stream$Transform);

  /**
   * Creates an instance of Diagnose.
   *
   * @param {DiagnoseOptions} [options={}] Options for creation.
   */
  function Diagnose() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Diagnose);

    var _options$separator = options.separator,
        separator = _options$separator === void 0 ? '\n' : _options$separator,
        _options$stream_error = options.stream_errors,
        stream_errors = _options$stream_error === void 0 ? false : _options$stream_error,
        tags = options.tags,
        max_depth = options.max_depth,
        preferWeb = options.preferWeb,
        encoding = options.encoding,
        superOpts = _objectWithoutProperties(options, ["separator", "stream_errors", "tags", "max_depth", "preferWeb", "encoding"]);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Diagnose).call(this, _objectSpread({}, superOpts, {
      readableObjectMode: false,
      writableObjectMode: false
    })));
    _this.float_bytes = -1;
    _this.separator = separator;
    _this.stream_errors = stream_errors;
    _this.parser = new Decoder({
      tags: tags,
      max_depth: max_depth,
      preferWeb: preferWeb,
      encoding: encoding
    });

    _this.parser.on('more-bytes', _this._on_more.bind(_assertThisInitialized(_this)));

    _this.parser.on('value', _this._on_value.bind(_assertThisInitialized(_this)));

    _this.parser.on('start', _this._on_start.bind(_assertThisInitialized(_this)));

    _this.parser.on('stop', _this._on_stop.bind(_assertThisInitialized(_this)));

    _this.parser.on('data', _this._on_data.bind(_assertThisInitialized(_this)));

    _this.parser.on('error', _this._on_error.bind(_assertThisInitialized(_this)));

    return _this;
  }
  /**
   * Transforming.
   *
   * @param {any} fresh Buffer to transcode.
   * @param {BufferEncoding} encoding Name of encoding.
   * @param {stream.TransformCallback} cb Callback when done.
   * @ignore
   */


  _createClass(Diagnose, [{
    key: "_transform",
    value: function _transform(fresh, encoding, cb) {
      this.parser.write(fresh, encoding, cb);
    }
    /**
     * Flushing.
     *
     * @param {stream.TransformCallback} cb Callback when done.
     * @ignore
     */

  }, {
    key: "_flush",
    value: function _flush(cb) {
      var _this2 = this;

      this.parser._flush(function (er) {
        if (_this2.stream_errors) {
          if (er) {
            _this2._on_error(er);
          }

          return cb();
        }

        return cb(er);
      });
    }
    /**
     * Convenience function to return a string in diagnostic format.
     *
     * @param {BufferLike} input The CBOR bytes to format.
     * @param {DiagnoseOptions |diagnoseCallback|string} [options={}]
     *   Options, the callback, or the input encoding.
     * @param {diagnoseCallback} [cb] Callback.
     * @returns {Promise} If callback not specified.
     * @throws {TypeError} Input not provided.
     */

  }, {
    key: "_on_error",

    /**
     * @ignore
     */
    value: function _on_error(er) {
      if (this.stream_errors) {
        this.push(er.toString());
      } else {
        this.emit('error', er);
      }
    }
    /** @private */

  }, {
    key: "_on_more",
    value: function _on_more(mt, len, parent_mt, pos) {
      if (mt === MT.SIMPLE_FLOAT) {
        this.float_bytes = {
          2: 1,
          4: 2,
          8: 3
        }[len];
      }
    }
    /** @private */

  }, {
    key: "_fore",
    value: function _fore(parent_mt, pos) {
      switch (parent_mt) {
        case MT.BYTE_STRING:
        case MT.UTF8_STRING:
        case MT.ARRAY:
          if (pos > 0) {
            this.push(', ');
          }

          break;

        case MT.MAP:
          if (pos > 0) {
            if (pos % 2) {
              this.push(': ');
            } else {
              this.push(', ');
            }
          }

      }
    }
    /** @private */

  }, {
    key: "_on_value",
    value: function _on_value(val, parent_mt, pos) {
      if (val === SYMS.BREAK) {
        return;
      }

      this._fore(parent_mt, pos);

      var fb = this.float_bytes;
      this.float_bytes = -1;
      this.push(utils.cborValueToString(val, fb));
    }
    /** @private */

  }, {
    key: "_on_start",
    value: function _on_start(mt, tag, parent_mt, pos) {
      this._fore(parent_mt, pos);

      switch (mt) {
        case MT.TAG:
          this.push("".concat(tag, "("));
          break;

        case MT.ARRAY:
          this.push('[');
          break;

        case MT.MAP:
          this.push('{');
          break;

        case MT.BYTE_STRING:
        case MT.UTF8_STRING:
          this.push('(');
          break;
      }

      if (tag === SYMS.STREAM) {
        this.push('_ ');
      }
    }
    /** @private */

  }, {
    key: "_on_stop",
    value: function _on_stop(mt) {
      switch (mt) {
        case MT.TAG:
          this.push(')');
          break;

        case MT.ARRAY:
          this.push(']');
          break;

        case MT.MAP:
          this.push('}');
          break;

        case MT.BYTE_STRING:
        case MT.UTF8_STRING:
          this.push(')');
          break;
      }
    }
    /** @private */

  }, {
    key: "_on_data",
    value: function _on_data() {
      this.push(this.separator);
    }
  }], [{
    key: "diagnose",
    value: function diagnose(input) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var cb = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      if (input == null) {
        throw new TypeError('input required');
      }

      var _normalizeOptions = normalizeOptions(options, cb);

      options = _normalizeOptions.options;
      cb = _normalizeOptions.cb;

      var _options = options,
          _options$encoding = _options.encoding,
          encoding = _options$encoding === void 0 ? 'hex' : _options$encoding,
          opts = _objectWithoutProperties(_options, ["encoding"]);

      var bs = new NoFilter();
      var d = new Diagnose(opts);
      var p = null;

      if (typeof cb === 'function') {
        d.on('end', function () {
          return cb(null, bs.toString('utf8'));
        });
        d.on('error', cb);
      } else {
        p = new Promise(function (resolve, reject) {
          d.on('end', function () {
            return resolve(bs.toString('utf8'));
          });
          d.on('error', reject);
        });
      }

      d.pipe(bs);
      utils.guessEncoding(input, encoding).pipe(d);
      return p;
    }
  }]);

  return Diagnose;
}(stream.Transform);

module.exports = Diagnose;