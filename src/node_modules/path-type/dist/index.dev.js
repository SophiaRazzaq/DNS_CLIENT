"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSymlinkSync = exports.isDirectorySync = exports.isFileSync = exports.isSymlink = exports.isDirectory = exports.isFile = void 0;

var _fs = _interopRequireWildcard(require("fs"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function isType(fsStatType, statsMethodName, filePath) {
  var stats;
  return regeneratorRuntime.async(function isType$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!(typeof filePath !== 'string')) {
            _context.next = 2;
            break;
          }

          throw new TypeError("Expected a string, got ".concat(_typeof(filePath)));

        case 2:
          _context.prev = 2;
          _context.next = 5;
          return regeneratorRuntime.awrap(_fs.promises[fsStatType](filePath));

        case 5:
          stats = _context.sent;
          return _context.abrupt("return", stats[statsMethodName]());

        case 9:
          _context.prev = 9;
          _context.t0 = _context["catch"](2);

          if (!(_context.t0.code === 'ENOENT')) {
            _context.next = 13;
            break;
          }

          return _context.abrupt("return", false);

        case 13:
          throw _context.t0;

        case 14:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[2, 9]]);
}

function isTypeSync(fsStatType, statsMethodName, filePath) {
  if (typeof filePath !== 'string') {
    throw new TypeError("Expected a string, got ".concat(_typeof(filePath)));
  }

  try {
    return _fs["default"][fsStatType](filePath)[statsMethodName]();
  } catch (error) {
    if (error.code === 'ENOENT') {
      return false;
    }

    throw error;
  }
}

var isFile = isType.bind(null, 'stat', 'isFile');
exports.isFile = isFile;
var isDirectory = isType.bind(null, 'stat', 'isDirectory');
exports.isDirectory = isDirectory;
var isSymlink = isType.bind(null, 'lstat', 'isSymbolicLink');
exports.isSymlink = isSymlink;
var isFileSync = isTypeSync.bind(null, 'statSync', 'isFile');
exports.isFileSync = isFileSync;
var isDirectorySync = isTypeSync.bind(null, 'statSync', 'isDirectory');
exports.isDirectorySync = isDirectorySync;
var isSymlinkSync = isTypeSync.bind(null, 'lstatSync', 'isSymbolicLink');
exports.isSymlinkSync = isSymlinkSync;