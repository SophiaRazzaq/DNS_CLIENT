"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isLikeSelector = isLikeSelector;
exports.selectComparable = selectComparable;
exports.CIRCULAR_SELECTOR = void 0;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var isPrimitive = function isPrimitive(value) {
  return value === null || _typeof(value) !== 'object';
};

function isLikeSelector(selector) {
  // Require selector to be an array or plain object.
  if (isPrimitive(selector) || !Array.isArray(selector) && Reflect.getPrototypeOf(selector) !== Object.prototype) {
    return false;
  } // Also require at least one enumerable property.


  var descriptors = Object.getOwnPropertyDescriptors(selector);
  return Reflect.ownKeys(descriptors).some(function (key) {
    return descriptors[key].enumerable === true;
  });
}

var CIRCULAR_SELECTOR = new Error('Encountered a circular selector');
exports.CIRCULAR_SELECTOR = CIRCULAR_SELECTOR;

function selectComparable(actual, selector) {
  var circular = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [selector];

  if (isPrimitive(actual)) {
    return actual;
  }

  var comparable = Array.isArray(selector) ? [] : {};
  var enumerableKeys = Reflect.ownKeys(selector).filter(function (key) {
    return Reflect.getOwnPropertyDescriptor(selector, key).enumerable;
  });
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = enumerableKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var key = _step.value;
      var subselector = Reflect.get(selector, key);

      if (isLikeSelector(subselector)) {
        if (circular.includes(subselector)) {
          throw CIRCULAR_SELECTOR;
        }

        circular.push(subselector);
        comparable[key] = selectComparable(Reflect.get(actual, key), subselector, circular);
        circular.pop();
      } else {
        comparable[key] = Reflect.get(actual, key);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return comparable;
}