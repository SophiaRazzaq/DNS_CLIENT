"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = resolveExtensions;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function resolveExtensions(configuredExtensions) {
  var providers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  // Combine all extensions possible for testing. Remove duplicate extensions.
  var duplicates = new Set();
  var seen = new Set();

  var normalize = function normalize(extensions) {
    return Array.isArray(extensions) ? extensions : Object.keys(extensions);
  };

  var combine = function combine(extensions) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = normalize(extensions)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var ext = _step.value;

        if (seen.has(ext)) {
          duplicates.add(ext);
        } else {
          seen.add(ext);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  };

  if (configuredExtensions !== undefined) {
    combine(configuredExtensions);
  }

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = providers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var main = _step2.value.main;
      combine(main.extensions);
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  if (duplicates.size > 0) {
    throw new Error("Unexpected duplicate extensions in options: \u2019".concat(_toConsumableArray(duplicates).join('’, ’'), "\u2019."));
  } // Unless the default was used by providers, as long as the extensions aren't explicitly set, set the default.


  if (configuredExtensions === undefined) {
    if (!seen.has('cjs')) {
      seen.add('cjs');
    }

    if (!seen.has('mjs')) {
      seen.add('mjs');
    }

    if (!seen.has('js')) {
      seen.add('js');
    }
  }

  return _toConsumableArray(seen);
}