"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeGlobs = normalizeGlobs;
exports.findFiles = findFiles;
exports.findTests = findTests;
exports.buildIgnoreMatcher = buildIgnoreMatcher;
exports.applyTestFileFilter = applyTestFileFilter;
Object.defineProperty(exports, "classify", {
  enumerable: true,
  get: function get() {
    return _globHelpers.classify;
  }
});
Object.defineProperty(exports, "isHelperish", {
  enumerable: true,
  get: function get() {
    return _globHelpers.isHelperish;
  }
});
Object.defineProperty(exports, "matches", {
  enumerable: true,
  get: function get() {
    return _globHelpers.matches;
  }
});
Object.defineProperty(exports, "normalizePattern", {
  enumerable: true,
  get: function get() {
    return _globHelpers.normalizePattern;
  }
});
Object.defineProperty(exports, "defaultIgnorePatterns", {
  enumerable: true,
  get: function get() {
    return _globHelpers.defaultIgnorePatterns;
  }
});
Object.defineProperty(exports, "hasExtension", {
  enumerable: true,
  get: function get() {
    return _globHelpers.hasExtension;
  }
});
Object.defineProperty(exports, "normalizeFileForMatching", {
  enumerable: true,
  get: function get() {
    return _globHelpers.normalizeFileForMatching;
  }
});
Object.defineProperty(exports, "normalizePatterns", {
  enumerable: true,
  get: function get() {
    return _globHelpers.normalizePatterns;
  }
});

var _nodeFs = _interopRequireDefault(require("node:fs"));

var _nodePath = _interopRequireDefault(require("node:path"));

var _globby = require("globby");

var _picomatch = _interopRequireDefault(require("picomatch"));

var _globHelpers = require("./glob-helpers.cjs");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var defaultIgnoredByWatcherPatterns = ['**/*.snap.md', // No need to rerun tests when the Markdown files change.
'ava.config.js', // Config is not reloaded so avoid rerunning tests when it changes.
'ava.config.cjs', // Config is not reloaded so avoid rerunning tests when it changes.
'ava.config.mjs' // Config is not reloaded so avoid rerunning tests when it changes.
];

var buildExtensionPattern = function buildExtensionPattern(extensions) {
  return extensions.length === 1 ? extensions[0] : "{".concat(extensions.join(','), "}");
};

function normalizeGlobs(_ref) {
  var extensions = _ref.extensions,
      filePatterns = _ref.files,
      ignoredByWatcherPatterns = _ref.ignoredByWatcher,
      providers = _ref.providers;

  if (filePatterns !== undefined && (!Array.isArray(filePatterns) || filePatterns.length === 0)) {
    throw new Error('The ’files’ configuration must be an array containing glob patterns.');
  }

  if (ignoredByWatcherPatterns !== undefined && (!Array.isArray(ignoredByWatcherPatterns) || ignoredByWatcherPatterns.length === 0)) {
    throw new Error('The ’watchMode.ignoreChanges’ configuration must be an array containing glob patterns.');
  }

  var extensionPattern = buildExtensionPattern(extensions);
  var defaultTestPatterns = ["test.".concat(extensionPattern), "{src,source}/test.".concat(extensionPattern), "**/__tests__/**/*.".concat(extensionPattern), "**/*.spec.".concat(extensionPattern), "**/*.test.".concat(extensionPattern), "**/test-*.".concat(extensionPattern), "**/test/**/*.".concat(extensionPattern), "**/tests/**/*.".concat(extensionPattern), '!**/__tests__/**/__{helper,fixture}?(s)__/**/*', '!**/test?(s)/**/{helper,fixture}?(s)/**/*'];

  if (filePatterns) {
    filePatterns = (0, _globHelpers.normalizePatterns)(filePatterns);

    if (filePatterns.every(function (pattern) {
      return pattern.startsWith('!');
    })) {
      // Use defaults if patterns only contains exclusions.
      filePatterns = [].concat(defaultTestPatterns, _toConsumableArray(filePatterns));
    }
  } else {
    filePatterns = defaultTestPatterns;
  }

  ignoredByWatcherPatterns = ignoredByWatcherPatterns ? [].concat(defaultIgnoredByWatcherPatterns, _toConsumableArray((0, _globHelpers.normalizePatterns)(ignoredByWatcherPatterns))) : [].concat(defaultIgnoredByWatcherPatterns);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = providers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var main = _step.value.main;

      var _main$updateGlobs = main.updateGlobs({
        filePatterns: filePatterns,
        ignoredByWatcherPatterns: ignoredByWatcherPatterns
      });

      filePatterns = _main$updateGlobs.filePatterns;
      ignoredByWatcherPatterns = _main$updateGlobs.ignoredByWatcherPatterns;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return {
    extensions: extensions,
    filePatterns: filePatterns,
    ignoredByWatcherPatterns: ignoredByWatcherPatterns
  };
}

var globOptions = {
  // Globs should work relative to the cwd value only (this should be the
  // project directory that AVA is run in).
  absolute: false,
  braceExpansion: true,
  caseSensitiveMatch: false,
  dot: false,
  expandDirectories: false,
  extglob: true,
  followSymbolicLinks: true,
  gitignore: false,
  globstar: true,
  ignore: _globHelpers.defaultIgnorePatterns,
  baseNameMatch: false,
  stats: false,
  unique: true
};

var globFiles = function globFiles(cwd, patterns) {
  var files;
  return regeneratorRuntime.async(function globFiles$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return regeneratorRuntime.awrap((0, _globby.globby)(patterns, _objectSpread({}, globOptions, {
            cwd: cwd,
            onlyFiles: true
          })));

        case 2:
          files = _context.sent;
          return _context.abrupt("return", files.map(function (file) {
            return _nodePath["default"].join(cwd, file);
          }));

        case 4:
        case "end":
          return _context.stop();
      }
    }
  });
};

var globDirectoriesSync = function globDirectoriesSync(cwd, patterns) {
  var files = (0, _globby.globbySync)(patterns, _objectSpread({}, globOptions, {
    cwd: cwd,
    onlyDirectories: true
  })); // Return absolute file paths. This has the side-effect of normalizing paths
  // on Windows.

  return files.map(function (file) {
    return _nodePath["default"].join(cwd, file);
  });
};

function findFiles(_ref2) {
  var cwd, extensions, filePatterns, files;
  return regeneratorRuntime.async(function findFiles$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          cwd = _ref2.cwd, extensions = _ref2.extensions, filePatterns = _ref2.filePatterns;
          _context2.next = 3;
          return regeneratorRuntime.awrap(globFiles(cwd, filePatterns));

        case 3:
          files = _context2.sent;
          return _context2.abrupt("return", files.filter(function (file) {
            return (0, _globHelpers.hasExtension)(extensions, file);
          }));

        case 5:
        case "end":
          return _context2.stop();
      }
    }
  });
}

function findTests(_ref3) {
  var cwd, extensions, filePatterns, files;
  return regeneratorRuntime.async(function findTests$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          cwd = _ref3.cwd, extensions = _ref3.extensions, filePatterns = _ref3.filePatterns;
          _context3.next = 3;
          return regeneratorRuntime.awrap(findFiles({
            cwd: cwd,
            extensions: extensions,
            filePatterns: filePatterns
          }));

        case 3:
          files = _context3.sent;
          return _context3.abrupt("return", files.filter(function (file) {
            return !_nodePath["default"].basename(file).startsWith('_');
          }));

        case 5:
        case "end":
          return _context3.stop();
      }
    }
  });
}

function buildIgnoreMatcher(_ref4) {
  var ignoredByWatcherPatterns = _ref4.ignoredByWatcherPatterns;
  var patterns = [].concat(_toConsumableArray(_globHelpers.defaultIgnorePatterns.map(function (pattern) {
    return "".concat(pattern, "/**/*");
  })), _toConsumableArray(ignoredByWatcherPatterns.filter(function (pattern) {
    return !pattern.startsWith('!');
  })));
  return (0, _picomatch["default"])(patterns, {
    dot: true
  });
}

function applyTestFileFilter(_ref5) {
  var cwd = _ref5.cwd,
      _ref5$expandDirectori = _ref5.expandDirectories,
      expandDirectories = _ref5$expandDirectori === void 0 ? true : _ref5$expandDirectori,
      filter = _ref5.filter,
      _ref5$providers = _ref5.providers,
      providers = _ref5$providers === void 0 ? [] : _ref5$providers,
      testFiles = _ref5.testFiles,
      _ref5$treatFilterPatt = _ref5.treatFilterPatternsAsFiles,
      treatFilterPatternsAsFiles = _ref5$treatFilterPatt === void 0 ? true : _ref5$treatFilterPatt;

  var _processMatchingPatte = (0, _globHelpers.processMatchingPatterns)(filter),
      individualMatchers = _processMatchingPatte.individualMatchers;

  var normalizedFiles = testFiles.map(function (file) {
    return {
      file: file,
      matcheable: (0, _globHelpers.normalizeFileForMatching)(cwd, file)
    };
  });
  var selected = new Set();
  var unmatchedPatterns = new Set(individualMatchers.map(function (_ref6) {
    var pattern = _ref6.pattern;
    return pattern;
  }));
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = individualMatchers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _step2$value = _step2.value,
          _pattern2 = _step2$value.pattern,
          match = _step2$value.match;
      var _iteratorNormalCompletion7 = true;
      var _didIteratorError7 = false;
      var _iteratorError7 = undefined;

      try {
        for (var _iterator7 = normalizedFiles[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
          var _step7$value = _step7.value,
              _file2 = _step7$value.file,
              matcheable = _step7$value.matcheable;

          if (match(matcheable)) {
            unmatchedPatterns["delete"](_pattern2);
            selected.add(_file2);
          }
        }
      } catch (err) {
        _didIteratorError7 = true;
        _iteratorError7 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
            _iterator7["return"]();
          }
        } finally {
          if (_didIteratorError7) {
            throw _iteratorError7;
          }
        }
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  if (expandDirectories && unmatchedPatterns.size > 0) {
    var expansion = [];
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = unmatchedPatterns[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var pattern = _step3.value;

        var _directories = globDirectoriesSync(cwd, pattern);

        if (_directories.length > 0) {
          unmatchedPatterns["delete"](pattern);
          expansion.push(_directories);
        }
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
          _iterator3["return"]();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    var directories = expansion.flat();

    if (directories.length > 0) {
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = testFiles[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var file = _step4.value;

          if (selected.has(file)) {
            continue;
          }

          var _iteratorNormalCompletion5 = true;
          var _didIteratorError5 = false;
          var _iteratorError5 = undefined;

          try {
            for (var _iterator5 = directories[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
              var dir = _step5.value;

              if (file.startsWith(dir + _nodePath["default"].sep)) {
                // eslint-disable-line max-depth
                selected.add(file);
              }
            }
          } catch (err) {
            _didIteratorError5 = true;
            _iteratorError5 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                _iterator5["return"]();
              }
            } finally {
              if (_didIteratorError5) {
                throw _iteratorError5;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
            _iterator4["return"]();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }
    }
  }

  var ignoredFilterPatternFiles = [];

  if (treatFilterPatternsAsFiles && unmatchedPatterns.size > 0) {
    var providerExtensions = new Set(providers.flatMap(function (_ref7) {
      var main = _ref7.main;
      return main.extensions;
    }));
    var _iteratorNormalCompletion6 = true;
    var _didIteratorError6 = false;
    var _iteratorError6 = undefined;

    try {
      for (var _iterator6 = unmatchedPatterns[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
        var _pattern = _step6.value;

        var _file = _nodePath["default"].join(cwd, _pattern);

        try {
          var stats = _nodeFs["default"].statSync(_file);

          if (!stats.isFile()) {
            continue;
          }
        } catch (error) {
          if (error.code === 'ENOENT') {
            continue;
          }

          throw error;
        }

        if (_nodePath["default"].basename(_file).startsWith('_') || providerExtensions.has(_nodePath["default"].extname(_file).slice(1)) || _file.split(_nodePath["default"].sep).includes('node_modules')) {
          ignoredFilterPatternFiles.push(_pattern);
          continue;
        }

        selected.add(_file);
      }
    } catch (err) {
      _didIteratorError6 = true;
      _iteratorError6 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
          _iterator6["return"]();
        }
      } finally {
        if (_didIteratorError6) {
          throw _iteratorError6;
        }
      }
    }
  }

  return Object.assign(_toConsumableArray(selected), {
    ignoredFilterPatternFiles: ignoredFilterPatternFiles
  });
}