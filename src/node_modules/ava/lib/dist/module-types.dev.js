"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = moduleTypes;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var requireTrueValue = function requireTrueValue(value) {
  if (value !== true) {
    throw new TypeError('When specifying module types, use `true` for ’cjs’, ’mjs’ and ’js’ extensions');
  }
};

var normalize = function normalize(extension, type, defaultModuleType) {
  switch (extension) {
    case 'cjs':
      {
        requireTrueValue(type);
        return 'commonjs';
      }

    case 'mjs':
      {
        requireTrueValue(type);
        return 'module';
      }

    case 'js':
      {
        requireTrueValue(type);
        return defaultModuleType;
      }

    default:
      {
        if (type !== 'commonjs' && type !== 'module') {
          throw new TypeError("Module type for \u2019".concat(extension, "\u2019 must be \u2019commonjs\u2019 or \u2019module\u2019"));
        }

        return type;
      }
  }
};

var deriveFromObject = function deriveFromObject(extensionsObject, defaultModuleType) {
  var moduleTypes = {};

  for (var _i = 0, _Object$entries = Object.entries(extensionsObject); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
        extension = _Object$entries$_i[0],
        type = _Object$entries$_i[1];

    moduleTypes[extension] = normalize(extension, type, defaultModuleType);
  }

  return moduleTypes;
};

var deriveFromArray = function deriveFromArray(extensions, defaultModuleType) {
  var moduleTypes = {};
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = extensions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var extension = _step.value;

      switch (extension) {
        case 'cjs':
          {
            moduleTypes.cjs = 'commonjs';
            break;
          }

        case 'mjs':
          {
            moduleTypes.mjs = 'module';
            break;
          }

        case 'js':
          {
            moduleTypes.js = defaultModuleType;
            break;
          }

        default:
          {
            moduleTypes[extension] = 'commonjs';
          }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return moduleTypes;
};

function moduleTypes(configuredExtensions, defaultModuleType) {
  if (configuredExtensions === undefined) {
    return {
      cjs: 'commonjs',
      mjs: 'module',
      js: defaultModuleType
    };
  }

  if (Array.isArray(configuredExtensions)) {
    return deriveFromArray(configuredExtensions, defaultModuleType);
  }

  return deriveFromObject(configuredExtensions, defaultModuleType);
}