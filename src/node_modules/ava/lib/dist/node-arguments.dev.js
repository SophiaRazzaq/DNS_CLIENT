"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = normalizeNodeArguments;

var _nodeProcess = _interopRequireDefault(require("node:process"));

var _arrgv = _interopRequireDefault(require("arrgv"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function normalizeNodeArguments() {
  var fromConf = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var fromArgv = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var parsedArgv = [];

  if (fromArgv !== '') {
    try {
      parsedArgv = (0, _arrgv["default"])(fromArgv);
    } catch (_unused) {
      throw new Error('Could not parse `--node-arguments` value. Make sure all strings are closed and backslashes are used correctly.');
    }
  }

  return [].concat(_toConsumableArray(_nodeProcess["default"].execArgv), _toConsumableArray(fromConf), _toConsumableArray(parsedArgv));
}