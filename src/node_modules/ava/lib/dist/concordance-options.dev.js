"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.snapshotManager = exports["default"] = void 0;

var _nodeUtil = require("node:util");

var _ansiStyles = _interopRequireDefault(require("ansi-styles"));

var _chalk = require("chalk");

var _stripAnsi = _interopRequireDefault(require("strip-ansi"));

var _chalk2 = require("./chalk.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// eslint-disable-line unicorn/import-style
var forceColor = new _chalk.Chalk({
  level: Math.max(_chalk2.chalk.level, 1)
});
var colorTheme = {
  "boolean": _ansiStyles["default"].yellow,
  circular: forceColor.grey('[Circular]'),
  date: {
    invalid: forceColor.red('invalid'),
    value: _ansiStyles["default"].blue
  },
  diffGutters: {
    actual: forceColor.red('-') + ' ',
    expected: forceColor.green('+') + ' ',
    padding: '  '
  },
  error: {
    ctor: {
      open: _ansiStyles["default"].grey.open + '(',
      close: ')' + _ansiStyles["default"].grey.close
    },
    name: _ansiStyles["default"].magenta
  },
  "function": {
    name: _ansiStyles["default"].blue,
    stringTag: _ansiStyles["default"].magenta
  },
  global: _ansiStyles["default"].magenta,
  item: {
    after: forceColor.grey(',')
  },
  list: {
    openBracket: forceColor.grey('['),
    closeBracket: forceColor.grey(']')
  },
  mapEntry: {
    after: forceColor.grey(',')
  },
  maxDepth: forceColor.grey('…'),
  "null": _ansiStyles["default"].yellow,
  number: _ansiStyles["default"].yellow,
  object: {
    openBracket: forceColor.grey('{'),
    closeBracket: forceColor.grey('}'),
    ctor: _ansiStyles["default"].magenta,
    stringTag: {
      open: _ansiStyles["default"].magenta.open + '@',
      close: _ansiStyles["default"].magenta.close
    },
    secondaryStringTag: {
      open: _ansiStyles["default"].grey.open + '@',
      close: _ansiStyles["default"].grey.close
    }
  },
  property: {
    after: forceColor.grey(','),
    keyBracket: {
      open: forceColor.grey('['),
      close: forceColor.grey(']')
    },
    valueFallback: forceColor.grey('…')
  },
  regexp: {
    source: {
      open: _ansiStyles["default"].blue.open + '/',
      close: '/' + _ansiStyles["default"].blue.close
    },
    flags: _ansiStyles["default"].yellow
  },
  stats: {
    separator: forceColor.grey('---')
  },
  string: {
    open: _ansiStyles["default"].blue.open,
    close: _ansiStyles["default"].blue.close,
    line: {
      open: forceColor.blue('\''),
      close: forceColor.blue('\'')
    },
    multiline: {
      start: forceColor.blue('`'),
      end: forceColor.blue('`')
    },
    controlPicture: _ansiStyles["default"].grey,
    diff: {
      insert: {
        open: _ansiStyles["default"].bgGreen.open + _ansiStyles["default"].black.open,
        close: _ansiStyles["default"].black.close + _ansiStyles["default"].bgGreen.close
      },
      "delete": {
        open: _ansiStyles["default"].bgRed.open + _ansiStyles["default"].black.open,
        close: _ansiStyles["default"].black.close + _ansiStyles["default"].bgRed.close
      },
      equal: _ansiStyles["default"].blue,
      insertLine: {
        open: _ansiStyles["default"].green.open,
        close: _ansiStyles["default"].green.close
      },
      deleteLine: {
        open: _ansiStyles["default"].red.open,
        close: _ansiStyles["default"].red.close
      }
    }
  },
  symbol: _ansiStyles["default"].yellow,
  typedArray: {
    bytes: _ansiStyles["default"].yellow
  },
  undefined: _ansiStyles["default"].yellow
};
var plainTheme = JSON.parse(JSON.stringify(colorTheme), function (_name, value) {
  return typeof value === 'string' ? (0, _stripAnsi["default"])(value) : value;
});
var theme = _chalk2.chalk.level > 0 ? colorTheme : plainTheme;
var concordanceOptions = {
  // Use Node's object inspection depth, clamped to a minimum of 3
  get maxDepth() {
    return Math.max(3, _nodeUtil.inspect.defaultOptions.depth);
  },

  theme: theme
};
var _default = concordanceOptions;
exports["default"] = _default;
var snapshotManager = {
  theme: plainTheme
};
exports.snapshotManager = snapshotManager;