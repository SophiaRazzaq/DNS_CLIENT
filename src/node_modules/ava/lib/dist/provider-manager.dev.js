"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.levels = void 0;

var globs = _interopRequireWildcard(require("./globs.js"));

var _pkg = _interopRequireDefault(require("./pkg.cjs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var levels = {
  // As the protocol changes, comparing levels by integer allows AVA to be
  // compatible with different versions.
  ava6: 1
};
exports.levels = levels;
var levelsByProtocol = Object.assign(Object.create(null), {
  'ava-6': levels.ava6
});

function load(providerModule, projectDir) {
  var selectProtocol,
      ava,
      _ref,
      makeProvider,
      fatal,
      level,
      provider,
      _args2 = arguments;

  return regeneratorRuntime.async(function load$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          selectProtocol = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : function () {
            return true;
          };
          ava = {
            version: _pkg["default"].version
          };
          _context2.next = 4;
          return regeneratorRuntime.awrap(Promise.resolve().then(function () {
            return _interopRequireWildcard(require("".concat(providerModule)));
          }));

        case 4:
          _ref = _context2.sent;
          makeProvider = _ref["default"];
          provider = makeProvider({
            negotiateProtocol: function negotiateProtocol(identifiers, _ref2) {
              var version = _ref2.version;
              var identifier = identifiers.find(function (identifier) {
                return selectProtocol(identifier) && Object.hasOwn(levelsByProtocol, identifier);
              });

              if (identifier === undefined) {
                fatal = new Error("This version of AVA (".concat(ava.version, ") is not compatible with ").concat(providerModule, "@").concat(version));
                return null;
              }

              level = levelsByProtocol[identifier];
              return {
                ava: ava,
                findFiles: function findFiles(_ref3) {
                  var extensions, patterns;
                  return regeneratorRuntime.async(function findFiles$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          extensions = _ref3.extensions, patterns = _ref3.patterns;
                          return _context.abrupt("return", globs.findFiles({
                            cwd: projectDir,
                            extensions: extensions,
                            filePatterns: patterns
                          }));

                        case 2:
                        case "end":
                          return _context.stop();
                      }
                    }
                  });
                },
                identifier: identifier,
                normalizeGlobPatterns: globs.normalizePatterns,
                projectDir: projectDir
              };
            }
          });

          if (!fatal) {
            _context2.next = 9;
            break;
          }

          throw fatal;

        case 9:
          return _context2.abrupt("return", _objectSpread({}, provider, {
            level: level
          }));

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  });
}

var providerManager = {
  typescript: function typescript(projectDir) {
    var _ref4,
        protocol,
        _args3 = arguments;

    return regeneratorRuntime.async(function typescript$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _ref4 = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {}, protocol = _ref4.protocol;
            return _context3.abrupt("return", load('@ava/typescript', projectDir, function (identifier) {
              return protocol === undefined || identifier === protocol;
            }));

          case 2:
          case "end":
            return _context3.stop();
        }
      }
    });
  }
};
var _default = providerManager;
exports["default"] = _default;