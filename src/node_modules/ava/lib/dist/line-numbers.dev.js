"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.splitPatternAndLineNumbers = splitPatternAndLineNumbers;
exports.getApplicableLineNumbers = getApplicableLineNumbers;

var _picomatch = _interopRequireDefault(require("picomatch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _wrapRegExp(re, groups) { _wrapRegExp = function _wrapRegExp(re, groups) { return new BabelRegExp(re, undefined, groups); }; var _RegExp = _wrapNativeSuper(RegExp); var _super = RegExp.prototype; var _groups = new WeakMap(); function BabelRegExp(re, flags, groups) { var _this = _RegExp.call(this, re, flags); _groups.set(_this, groups || _groups.get(re)); return _this; } _inherits(BabelRegExp, _RegExp); BabelRegExp.prototype.exec = function (str) { var result = _super.exec.call(this, str); if (result) result.groups = buildGroups(result, this); return result; }; BabelRegExp.prototype[Symbol.replace] = function (str, substitution) { if (typeof substitution === "string") { var groups = _groups.get(this); return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function (_, name) { return "$" + groups[name]; })); } else if (typeof substitution === "function") { var _this = this; return _super[Symbol.replace].call(this, str, function () { var args = []; args.push.apply(args, arguments); if (_typeof(args[args.length - 1]) !== "object") { args.push(buildGroups(args, _this)); } return substitution.apply(this, args); }); } else { return _super[Symbol.replace].call(this, str, substitution); } }; function buildGroups(result, re) { var g = _groups.get(re); return Object.keys(g).reduce(function (groups, name) { groups[name] = result[g[name]]; return groups; }, Object.create(null)); } return _wrapRegExp.apply(this, arguments); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var NUMBER_REGEX = /^\d+$/;

var RANGE_REGEX = _wrapRegExp(/^([0-9]+)\x2D([0-9]+)$/, {
  startGroup: 1,
  endGroup: 2
});

var LINE_NUMBERS_REGEX = /^(?:\d+(?:-\d+)?,?)+$/;
var DELIMITER = ':';

var distinctArray = function distinctArray(array) {
  return _toConsumableArray(new Set(array));
};

var sortNumbersAscending = function sortNumbersAscending(array) {
  var sorted = _toConsumableArray(array);

  sorted.sort(function (a, b) {
    return a - b;
  });
  return sorted;
};

var parseNumber = function parseNumber(string) {
  return Number.parseInt(string, 10);
};

var removeAllWhitespace = function removeAllWhitespace(string) {
  return string.replaceAll(/\s/g, '');
};

var range = function range(start, end) {
  return Array.from({
    length: end - start + 1
  }).fill(start).map(function (element, index) {
    return element + index;
  });
};

var parseLineNumbers = function parseLineNumbers(suffix) {
  return sortNumbersAscending(distinctArray(suffix.split(',').flatMap(function (part) {
    if (NUMBER_REGEX.test(part)) {
      return parseNumber(part);
    }

    var _RANGE_REGEX$exec = RANGE_REGEX.exec(part),
        _RANGE_REGEX$exec$gro = _RANGE_REGEX$exec.groups,
        startGroup = _RANGE_REGEX$exec$gro.startGroup,
        endGroup = _RANGE_REGEX$exec$gro.endGroup;

    var start = parseNumber(startGroup);
    var end = parseNumber(endGroup);

    if (start > end) {
      return range(end, start);
    }

    return range(start, end);
  })));
};

function splitPatternAndLineNumbers(pattern) {
  var parts = pattern.split(DELIMITER);

  if (parts.length === 1) {
    return {
      pattern: pattern,
      lineNumbers: null
    };
  }

  var suffix = removeAllWhitespace(parts.pop());

  if (!LINE_NUMBERS_REGEX.test(suffix)) {
    return {
      pattern: pattern,
      lineNumbers: null
    };
  }

  return {
    pattern: parts.join(DELIMITER),
    lineNumbers: parseLineNumbers(suffix)
  };
}

function getApplicableLineNumbers(normalizedFilePath, filter) {
  return sortNumbersAscending(distinctArray(filter.filter(function (_ref) {
    var pattern = _ref.pattern,
        lineNumbers = _ref.lineNumbers;
    return lineNumbers && _picomatch["default"].isMatch(normalizedFilePath, pattern);
  }).flatMap(function (_ref2) {
    var lineNumbers = _ref2.lineNumbers;
    return lineNumbers;
  })));
}