"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = buildMessage;

var _chalk = require("../chalk.js");

var _pkg = _interopRequireDefault(require("../pkg.cjs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function buildMessage(improperUsage) {
  if (!improperUsage) {
    return null;
  }

  var assertion = improperUsage.assertion;

  if (assertion === 'throws' || assertion === 'notThrows') {
    return "Try wrapping the first argument to `t.".concat(assertion, "()` in a function:\n\n  ").concat(_chalk.chalk.cyan("t.".concat(assertion, "(() => { "))).concat(_chalk.chalk.grey('/* your code here */')).concat(_chalk.chalk.cyan(' })'), "\n\nVisit the following URL for more details:\n\n  ").concat(_chalk.chalk.blue.underline("https://github.com/avajs/ava/blob/v".concat(_pkg["default"].version, "/docs/03-assertions.md#throwsfn-expected-message")));
  }

  if (assertion === 'snapshot') {
    var name = improperUsage.name,
        snapPath = improperUsage.snapPath;

    if (name === 'ChecksumError' || name === 'InvalidSnapshotError') {
      return "The snapshot file is corrupted.\n\nFile path: ".concat(_chalk.chalk.yellow(snapPath), "\n\nPlease run AVA again with the ").concat(_chalk.chalk.cyan('--update-snapshots'), " flag to recreate it.");
    }

    if (name === 'LegacyError') {
      return "The snapshot file was created with AVA 0.19. It\u2019s not supported by this AVA version.\n\nFile path: ".concat(_chalk.chalk.yellow(snapPath), "\n\nPlease run AVA again with the ").concat(_chalk.chalk.cyan('--update-snapshots'), " flag to upgrade.");
    }

    if (name === 'VersionMismatchError') {
      var snapVersion = improperUsage.snapVersion,
          expectedVersion = improperUsage.expectedVersion;
      var upgradeMessage = snapVersion < expectedVersion ? "Please run AVA again with the ".concat(_chalk.chalk.cyan('--update-snapshots'), " flag to upgrade.") : 'You should upgrade AVA.';
      return "The snapshot file is v".concat(snapVersion, ", but only v").concat(expectedVersion, " is supported.\n\nFile path: ").concat(_chalk.chalk.yellow(snapPath), "\n\n").concat(upgradeMessage);
    }
  }

  return null;
}