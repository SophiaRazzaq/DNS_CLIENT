"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packageConfig = packageConfig;
exports.packageConfigSync = packageConfigSync;
exports.packageJsonPath = packageJsonPath;

var _nodePath = _interopRequireDefault(require("node:path"));

var _findUpSimple = require("find-up-simple");

var _loadJsonFile = require("load-json-file");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var filePaths = new WeakMap();

var findNextCwd = function findNextCwd(packagePath) {
  return _nodePath["default"].resolve(_nodePath["default"].dirname(packagePath), '..');
};

var addFilePath = function addFilePath(object, filePath) {
  filePaths.set(object, filePath);
  return object;
};

function packageConfig(namespace) {
  var options,
      filePath,
      packageJson,
      _args = arguments;
  return regeneratorRuntime.async(function packageConfig$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};

          if (namespace) {
            _context.next = 3;
            break;
          }

          throw new TypeError('Expected a namespace');

        case 3:
          _context.next = 5;
          return regeneratorRuntime.awrap((0, _findUpSimple.findUp)('package.json', options.cwd ? {
            cwd: options.cwd
          } : {}));

        case 5:
          filePath = _context.sent;

          if (filePath) {
            _context.next = 8;
            break;
          }

          return _context.abrupt("return", addFilePath(_objectSpread({}, options.defaults), filePath));

        case 8:
          _context.next = 10;
          return regeneratorRuntime.awrap((0, _loadJsonFile.loadJsonFile)(filePath));

        case 10:
          packageJson = _context.sent;

          if (!(options.skipOnFalse && packageJson[namespace] === false)) {
            _context.next = 13;
            break;
          }

          return _context.abrupt("return", packageConfig(namespace, _objectSpread({}, options, {
            cwd: findNextCwd(filePath)
          })));

        case 13:
          return _context.abrupt("return", addFilePath(_objectSpread({}, options.defaults, {}, packageJson[namespace]), filePath));

        case 14:
        case "end":
          return _context.stop();
      }
    }
  });
}

function packageConfigSync(namespace) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (!namespace) {
    throw new TypeError('Expected a namespace');
  }

  var filePath = (0, _findUpSimple.findUpSync)('package.json', options.cwd ? {
    cwd: options.cwd
  } : {});

  if (!filePath) {
    return addFilePath(_objectSpread({}, options.defaults), filePath);
  }

  var packageJson = (0, _loadJsonFile.loadJsonFileSync)(filePath);

  if (options.skipOnFalse && packageJson[namespace] === false) {
    return packageConfigSync(namespace, _objectSpread({}, options, {
      cwd: findNextCwd(filePath)
    }));
  }

  return addFilePath(_objectSpread({}, options.defaults, {}, packageJson[namespace]), filePath);
}

function packageJsonPath(config) {
  return filePaths.get(config);
}