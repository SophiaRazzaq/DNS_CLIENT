"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.matcher = matcher;
exports.isMatch = isMatch;

var _escapeStringRegexp = _interopRequireDefault(require("escape-string-regexp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var regexpCache = new Map();

var sanitizeArray = function sanitizeArray(input, inputName) {
  if (!Array.isArray(input)) {
    switch (_typeof(input)) {
      case 'string':
        input = [input];
        break;

      case 'undefined':
        input = [];
        break;

      default:
        throw new TypeError("Expected '".concat(inputName, "' to be a string or an array, but got a type of '").concat(_typeof(input), "'"));
    }
  }

  return input.filter(function (string) {
    if (typeof string !== 'string') {
      if (typeof string === 'undefined') {
        return false;
      }

      throw new TypeError("Expected '".concat(inputName, "' to be an array of strings, but found a type of '").concat(_typeof(string), "' in the array"));
    }

    return true;
  });
};

var makeRegexp = function makeRegexp(pattern, options) {
  options = _objectSpread({
    caseSensitive: false
  }, options);
  var cacheKey = pattern + JSON.stringify(options);

  if (regexpCache.has(cacheKey)) {
    return regexpCache.get(cacheKey);
  }

  var negated = pattern[0] === '!';

  if (negated) {
    pattern = pattern.slice(1);
  }

  pattern = (0, _escapeStringRegexp["default"])(pattern).replace(/\\\*/g, '[\\s\\S]*');
  var regexp = new RegExp("^".concat(pattern, "$"), options.caseSensitive ? '' : 'i');
  regexp.negated = negated;
  regexpCache.set(cacheKey, regexp);
  return regexp;
};

var baseMatcher = function baseMatcher(inputs, patterns, options, firstMatchOnly) {
  inputs = sanitizeArray(inputs, 'inputs');
  patterns = sanitizeArray(patterns, 'patterns');

  if (patterns.length === 0) {
    return [];
  }

  patterns = patterns.map(function (pattern) {
    return makeRegexp(pattern, options);
  });

  var _ref = options || {},
      allPatterns = _ref.allPatterns;

  var result = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = inputs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var input = _step.value;
      // String is included only if it matches at least one non-negated pattern supplied.
      // Note: the `allPatterns` option requires every non-negated pattern to be matched once.
      // Matching a negated pattern excludes the string.
      var matches = void 0;

      var didFit = _toConsumableArray(patterns).fill(false);

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = patterns.entries()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _step2$value = _slicedToArray(_step2.value, 2),
              index = _step2$value[0],
              pattern = _step2$value[1];

          if (pattern.test(input)) {
            didFit[index] = true;
            matches = !pattern.negated;

            if (!matches) {
              break;
            }
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      if (!(matches === false || matches === undefined && patterns.some(function (pattern) {
        return !pattern.negated;
      }) || allPatterns && didFit.some(function (yes, index) {
        return !yes && !patterns[index].negated;
      }))) {
        result.push(input);

        if (firstMatchOnly) {
          break;
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return result;
};

function matcher(inputs, patterns, options) {
  return baseMatcher(inputs, patterns, options, false);
}

function isMatch(inputs, patterns, options) {
  return baseMatcher(inputs, patterns, options, true).length > 0;
}