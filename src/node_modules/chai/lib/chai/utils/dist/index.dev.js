"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getName = getName;
exports.isRegExp = isRegExp;
Object.defineProperty(exports, "test", {
  enumerable: true,
  get: function get() {
    return _test.test;
  }
});
Object.defineProperty(exports, "type", {
  enumerable: true,
  get: function get() {
    return _typeDetect.type;
  }
});
Object.defineProperty(exports, "expectTypes", {
  enumerable: true,
  get: function get() {
    return _expectTypes.expectTypes;
  }
});
Object.defineProperty(exports, "getMessage", {
  enumerable: true,
  get: function get() {
    return _getMessage.getMessage;
  }
});
Object.defineProperty(exports, "getActual", {
  enumerable: true,
  get: function get() {
    return _getActual.getActual;
  }
});
Object.defineProperty(exports, "inspect", {
  enumerable: true,
  get: function get() {
    return _inspect.inspect;
  }
});
Object.defineProperty(exports, "objDisplay", {
  enumerable: true,
  get: function get() {
    return _objDisplay.objDisplay;
  }
});
Object.defineProperty(exports, "flag", {
  enumerable: true,
  get: function get() {
    return _flag.flag;
  }
});
Object.defineProperty(exports, "transferFlags", {
  enumerable: true,
  get: function get() {
    return _transferFlags.transferFlags;
  }
});
Object.defineProperty(exports, "eql", {
  enumerable: true,
  get: function get() {
    return _deepEql["default"];
  }
});
Object.defineProperty(exports, "getPathInfo", {
  enumerable: true,
  get: function get() {
    return _pathval.getPathInfo;
  }
});
Object.defineProperty(exports, "hasProperty", {
  enumerable: true,
  get: function get() {
    return _pathval.hasProperty;
  }
});
Object.defineProperty(exports, "addProperty", {
  enumerable: true,
  get: function get() {
    return _addProperty.addProperty;
  }
});
Object.defineProperty(exports, "addMethod", {
  enumerable: true,
  get: function get() {
    return _addMethod.addMethod;
  }
});
Object.defineProperty(exports, "overwriteProperty", {
  enumerable: true,
  get: function get() {
    return _overwriteProperty.overwriteProperty;
  }
});
Object.defineProperty(exports, "overwriteMethod", {
  enumerable: true,
  get: function get() {
    return _overwriteMethod.overwriteMethod;
  }
});
Object.defineProperty(exports, "addChainableMethod", {
  enumerable: true,
  get: function get() {
    return _addChainableMethod.addChainableMethod;
  }
});
Object.defineProperty(exports, "overwriteChainableMethod", {
  enumerable: true,
  get: function get() {
    return _overwriteChainableMethod.overwriteChainableMethod;
  }
});
Object.defineProperty(exports, "compareByInspect", {
  enumerable: true,
  get: function get() {
    return _compareByInspect.compareByInspect;
  }
});
Object.defineProperty(exports, "getOwnEnumerablePropertySymbols", {
  enumerable: true,
  get: function get() {
    return _getOwnEnumerablePropertySymbols.getOwnEnumerablePropertySymbols;
  }
});
Object.defineProperty(exports, "getOwnEnumerableProperties", {
  enumerable: true,
  get: function get() {
    return _getOwnEnumerableProperties.getOwnEnumerableProperties;
  }
});
Object.defineProperty(exports, "proxify", {
  enumerable: true,
  get: function get() {
    return _proxify.proxify;
  }
});
Object.defineProperty(exports, "addLengthGuard", {
  enumerable: true,
  get: function get() {
    return _addLengthGuard.addLengthGuard;
  }
});
Object.defineProperty(exports, "isProxyEnabled", {
  enumerable: true,
  get: function get() {
    return _isProxyEnabled.isProxyEnabled;
  }
});
Object.defineProperty(exports, "isNaN", {
  enumerable: true,
  get: function get() {
    return _isNaN.isNaN;
  }
});
Object.defineProperty(exports, "getOperator", {
  enumerable: true,
  get: function get() {
    return _getOperator.getOperator;
  }
});
exports.checkError = void 0;

var checkError = _interopRequireWildcard(require("check-error"));

exports.checkError = checkError;

var _test = require("./test.js");

var _typeDetect = require("./type-detect.js");

var _expectTypes = require("./expectTypes.js");

var _getMessage = require("./getMessage.js");

var _getActual = require("./getActual.js");

var _inspect = require("./inspect.js");

var _objDisplay = require("./objDisplay.js");

var _flag = require("./flag.js");

var _transferFlags = require("./transferFlags.js");

var _deepEql = _interopRequireDefault(require("deep-eql"));

var _pathval = require("pathval");

var _addProperty = require("./addProperty.js");

var _addMethod = require("./addMethod.js");

var _overwriteProperty = require("./overwriteProperty.js");

var _overwriteMethod = require("./overwriteMethod.js");

var _addChainableMethod = require("./addChainableMethod.js");

var _overwriteChainableMethod = require("./overwriteChainableMethod.js");

var _compareByInspect = require("./compareByInspect.js");

var _getOwnEnumerablePropertySymbols = require("./getOwnEnumerablePropertySymbols.js");

var _getOwnEnumerableProperties = require("./getOwnEnumerableProperties.js");

var _proxify = require("./proxify.js");

var _addLengthGuard = require("./addLengthGuard.js");

var _isProxyEnabled = require("./isProxyEnabled.js");

var _isNaN = require("./isNaN.js");

var _getOperator = require("./getOperator.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*!
 * chai
 * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
// Dependencies that are used for multiple exports are required here only once
// test utility
// type utility
// expectTypes utility
// message utility
// actual utility
// Inspect util
// Object Display util
// Flag utility
// Flag transferring utility
// Deep equal utility
// Deep path info

/**
 * Function name
 *
 * @param {Function} fn
 * @returns {string}
 */
function getName(fn) {
  return fn.name;
} // add Property


/**
 * Determines if an object is a `RegExp`
 * This is used since `instanceof` will not work in virtual contexts
 *
 * @param {*} obj Object to test
 * @returns {boolean}
 */
function isRegExp(obj) {
  return Object.prototype.toString.call(obj) === '[object RegExp]';
}