"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMessage = getMessage;

var _flag = require("./flag.js");

var _getActual = require("./getActual.js");

var _objDisplay = require("./objDisplay.js");

/*!
 * Chai - message composition utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getMessage(object, message, negateMessage)
 *
 * Construct the error message based on flags
 * and template tags. Template tags will return
 * a stringified inspection of the object referenced.
 *
 * Message template tags:
 * - `#{this}` current asserted object
 * - `#{act}` actual value
 * - `#{exp}` expected value
 *
 * @param {object} obj object (constructed Assertion)
 * @param {unknown} args chai.Assertion.prototype.assert arguments
 * @returns {unknown}
 * @namespace Utils
 * @name getMessage
 * @public
 */
function getMessage(obj, args) {
  var negate = (0, _flag.flag)(obj, 'negate'),
      val = (0, _flag.flag)(obj, 'object'),
      expected = args[3],
      actual = (0, _getActual.getActual)(obj, args),
      msg = negate ? args[2] : args[1],
      flagMsg = (0, _flag.flag)(obj, 'message');
  if (typeof msg === "function") msg = msg();
  msg = msg || '';
  msg = msg.replace(/#\{this\}/g, function () {
    return (0, _objDisplay.objDisplay)(val);
  }).replace(/#\{act\}/g, function () {
    return (0, _objDisplay.objDisplay)(actual);
  }).replace(/#\{exp\}/g, function () {
    return (0, _objDisplay.objDisplay)(expected);
  });
  return flagMsg ? flagMsg + ': ' + msg : msg;
}