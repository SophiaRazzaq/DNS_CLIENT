"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addMethod = addMethod;

var _addLengthGuard = require("./addLengthGuard.js");

var _flag = require("./flag.js");

var _proxify = require("./proxify.js");

var _transferFlags = require("./transferFlags.js");

var _assertion = require("../assertion.js");

/*!
 * Chai - addMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .addMethod(ctx, name, method)
 *
 * Adds a method to the prototype of an object.
 *
 *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {
 *         var obj = utils.flag(this, 'object');
 *         new chai.Assertion(obj).to.be.equal(str);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addMethod('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(fooStr).to.be.foo('bar');
 *
 * @param {object} ctx object to which the method is added
 * @param {string} name of method to add
 * @param {Function} method function to be used for name
 * @namespace Utils
 * @name addMethod
 * @public
 */
function addMethod(ctx, name, method) {
  var methodWrapper = function methodWrapper() {
    // Setting the `ssfi` flag to `methodWrapper` causes this function to be the
    // starting point for removing implementation frames from the stack trace of
    // a failed assertion.
    //
    // However, we only want to use this function as the starting point if the
    // `lockSsfi` flag isn't set.
    //
    // If the `lockSsfi` flag is set, then either this assertion has been
    // overwritten by another assertion, or this assertion is being invoked from
    // inside of another assertion. In the first case, the `ssfi` flag has
    // already been set by the overwriting assertion. In the second case, the
    // `ssfi` flag has already been set by the outer assertion.
    if (!(0, _flag.flag)(this, 'lockSsfi')) {
      (0, _flag.flag)(this, 'ssfi', methodWrapper);
    }

    var result = method.apply(this, arguments);
    if (result !== undefined) return result;
    var newAssertion = new _assertion.Assertion();
    (0, _transferFlags.transferFlags)(this, newAssertion);
    return newAssertion;
  };

  (0, _addLengthGuard.addLengthGuard)(methodWrapper, name, false);
  ctx[name] = (0, _proxify.proxify)(methodWrapper, name);
}