"use strict";

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var path_1 = require("path");

var resolve_dependency_1 = __importDefault(require("../resolve-dependency"));

var get_package_base_1 = require("./get-package-base");

var graceful_fs_1 = require("graceful-fs");

var specialCases = {
  '@generated/photon': function generatedPhoton(_ref) {
    var id = _ref.id,
        emitAssetDirectory = _ref.emitAssetDirectory;

    if (id.endsWith('@generated/photon/index.js')) {
      emitAssetDirectory((0, path_1.resolve)((0, path_1.dirname)(id), 'runtime/'));
    }
  },
  '@serialport/bindings-cpp': function serialportBindingsCpp(_ref2) {
    var id = _ref2.id,
        emitAssetDirectory = _ref2.emitAssetDirectory;

    if (id.endsWith('@serialport/bindings-cpp/dist/index.js')) {
      emitAssetDirectory((0, path_1.resolve)((0, path_1.dirname)(id), '..', 'build', 'Release'));
      emitAssetDirectory((0, path_1.resolve)((0, path_1.dirname)(id), '..', 'prebuilds'));
    }
  },
  argon2: function argon2(_ref3) {
    var id = _ref3.id,
        emitAssetDirectory = _ref3.emitAssetDirectory;

    if (id.endsWith('argon2/argon2.js')) {
      emitAssetDirectory((0, path_1.resolve)((0, path_1.dirname)(id), 'build', 'Release'));
      emitAssetDirectory((0, path_1.resolve)((0, path_1.dirname)(id), 'prebuilds'));
      emitAssetDirectory((0, path_1.resolve)((0, path_1.dirname)(id), 'lib', 'binding'));
    }
  },
  bull: function bull(_ref4) {
    var id = _ref4.id,
        emitAssetDirectory = _ref4.emitAssetDirectory;

    if (id.endsWith('bull/lib/commands/index.js')) {
      emitAssetDirectory((0, path_1.resolve)((0, path_1.dirname)(id)));
    }
  },
  camaro: function camaro(_ref5) {
    var id = _ref5.id,
        emitAsset = _ref5.emitAsset;

    if (id.endsWith('camaro/dist/camaro.js')) {
      emitAsset((0, path_1.resolve)((0, path_1.dirname)(id), 'camaro.wasm'));
    }
  },
  esbuild: function esbuild(_ref6) {
    var id = _ref6.id,
        emitAssetDirectory = _ref6.emitAssetDirectory;

    if (id.endsWith('esbuild/lib/main.js')) {
      var file = (0, path_1.resolve)(id, '..', '..', 'package.json');
      var pkg = JSON.parse((0, graceful_fs_1.readFileSync)(file, 'utf8'));

      for (var _i = 0, _Object$keys = Object.keys(pkg.optionalDependencies || {}); _i < _Object$keys.length; _i++) {
        var dep = _Object$keys[_i];
        var dir = (0, path_1.resolve)(id, '..', '..', '..', dep);
        emitAssetDirectory(dir);
      }
    }
  },
  'google-gax': function googleGax(_ref7) {
    var id = _ref7.id,
        ast = _ref7.ast,
        emitAssetDirectory = _ref7.emitAssetDirectory;

    if (id.endsWith('google-gax/build/src/grpc.js')) {
      // const googleProtoFilesDir = path.normalize(google_proto_files_1.getProtoPath('..'));
      // ->
      // const googleProtoFilesDir = resolve(__dirname, '../../../google-proto-files');
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = ast.body[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var statement = _step.value;

          if (statement.type === 'VariableDeclaration' && statement.declarations[0].id.type === 'Identifier' && statement.declarations[0].id.name === 'googleProtoFilesDir') {
            emitAssetDirectory((0, path_1.resolve)((0, path_1.dirname)(id), '../../../google-proto-files'));
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  },
  oracledb: function oracledb(_ref8) {
    var id = _ref8.id,
        ast = _ref8.ast,
        emitAsset = _ref8.emitAsset;

    if (id.endsWith('oracledb/lib/oracledb.js')) {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = ast.body[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var statement = _step2.value;

          if (statement.type === 'ForStatement' && 'body' in statement.body && statement.body.body && Array.isArray(statement.body.body) && statement.body.body[0] && statement.body.body[0].type === 'TryStatement' && statement.body.body[0].block.body[0] && statement.body.body[0].block.body[0].type === 'ExpressionStatement' && statement.body.body[0].block.body[0].expression.type === 'AssignmentExpression' && statement.body.body[0].block.body[0].expression.operator === '=' && statement.body.body[0].block.body[0].expression.left.type === 'Identifier' && statement.body.body[0].block.body[0].expression.left.name === 'oracledbCLib' && statement.body.body[0].block.body[0].expression.right.type === 'CallExpression' && statement.body.body[0].block.body[0].expression.right.callee.type === 'Identifier' && statement.body.body[0].block.body[0].expression.right.callee.name === 'require' && statement.body.body[0].block.body[0].expression.right.arguments.length === 1 && statement.body.body[0].block.body[0].expression.right.arguments[0].type === 'MemberExpression' && statement.body.body[0].block.body[0].expression.right.arguments[0].computed === true && statement.body.body[0].block.body[0].expression.right.arguments[0].object.type === 'Identifier' && statement.body.body[0].block.body[0].expression.right.arguments[0].object.name === 'binaryLocations' && statement.body.body[0].block.body[0].expression.right.arguments[0].property.type === 'Identifier' && statement.body.body[0].block.body[0].expression.right.arguments[0].property.name === 'i') {
            statement.body.body[0].block.body[0].expression.right.arguments = [{
              type: 'Literal',
              value: '_'
            }];
            var version = global._unit ? '3.0.0' : JSON.parse((0, graceful_fs_1.readFileSync)(id.slice(0, -15) + 'package.json', 'utf8')).version;
            var useVersion = Number(version.slice(0, version.indexOf('.'))) >= 4;
            var binaryName = 'oracledb-' + (useVersion ? version : 'abi' + process.versions.modules) + '-' + process.platform + '-' + process.arch + '.node';
            emitAsset((0, path_1.resolve)(id, '../../build/Release/' + binaryName));
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  },
  'phantomjs-prebuilt': function phantomjsPrebuilt(_ref9) {
    var id = _ref9.id,
        emitAssetDirectory = _ref9.emitAssetDirectory;

    if (id.endsWith('phantomjs-prebuilt/lib/phantomjs.js')) {
      emitAssetDirectory((0, path_1.resolve)((0, path_1.dirname)(id), '..', 'bin'));
    }
  },
  'remark-prism': function remarkPrism(_ref10) {
    var id = _ref10.id,
        emitAssetDirectory = _ref10.emitAssetDirectory;
    var file = 'remark-prism/src/highlight.js';

    if (id.endsWith(file)) {
      try {
        var node_modules = id.slice(0, -file.length);
        emitAssetDirectory((0, path_1.resolve)(node_modules, 'prismjs', 'components'));
      } catch (e) {// fail silently
      }
    }
  },
  semver: function semver(_ref11) {
    var id = _ref11.id,
        emitAsset = _ref11.emitAsset;

    if (id.endsWith('semver/index.js')) {
      // See https://github.com/npm/node-semver/blob/master/CHANGELOG.md#710
      emitAsset((0, path_1.resolve)(id.replace('index.js', 'preload.js')));
    }
  },
  sharp: function sharp(_ref12) {
    var id, emitAssetDirectory, job, file, pkg, _i2, _Object$keys2, dep, dir, _file, _pkg, _i3, _Object$keys3, innerDep, innerDir;

    return regeneratorRuntime.async(function sharp$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            id = _ref12.id, emitAssetDirectory = _ref12.emitAssetDirectory, job = _ref12.job;

            if (!id.endsWith('sharp/lib/index.js')) {
              _context.next = 35;
              break;
            }

            file = (0, path_1.resolve)(id, '..', '..', 'package.json');
            pkg = JSON.parse((0, graceful_fs_1.readFileSync)(file, 'utf8'));
            _i2 = 0, _Object$keys2 = Object.keys(pkg.optionalDependencies || {});

          case 5:
            if (!(_i2 < _Object$keys2.length)) {
              _context.next = 35;
              break;
            }

            dep = _Object$keys2[_i2];
            dir = (0, path_1.resolve)(id, '..', '..', '..', dep);
            emitAssetDirectory(dir);
            _context.prev = 9;
            _file = (0, path_1.resolve)(dir, 'package.json');
            _pkg = JSON.parse((0, graceful_fs_1.readFileSync)(_file, 'utf8'));
            _i3 = 0, _Object$keys3 = Object.keys(_pkg.optionalDependencies || {});

          case 13:
            if (!(_i3 < _Object$keys3.length)) {
              _context.next = 25;
              break;
            }

            innerDep = _Object$keys3[_i3];
            _context.t0 = (0, path_1.resolve);
            _context.next = 18;
            return regeneratorRuntime.awrap(job.realpath(dir));

          case 18:
            _context.t1 = _context.sent;
            _context.t2 = innerDep;
            innerDir = (0, _context.t0)(_context.t1, '..', '..', _context.t2);
            emitAssetDirectory(innerDir);

          case 22:
            _i3++;
            _context.next = 13;
            break;

          case 25:
            _context.next = 32;
            break;

          case 27:
            _context.prev = 27;
            _context.t3 = _context["catch"](9);

            if (!(_context.t3 && _context.t3.code !== 'ENOENT')) {
              _context.next = 32;
              break;
            }

            console.error("Error reading \"sharp\" dependencies from \"".concat(dir, "/package.json\"'"));
            throw _context.t3;

          case 32:
            _i2++;
            _context.next = 5;
            break;

          case 35:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, [[9, 27]]);
  },
  shiki: function shiki(_ref13) {
    var id = _ref13.id,
        emitAssetDirectory = _ref13.emitAssetDirectory;

    if (id.endsWith('/dist/index.js')) {
      emitAssetDirectory((0, path_1.resolve)((0, path_1.dirname)(id), '..', 'languages'));
      emitAssetDirectory((0, path_1.resolve)((0, path_1.dirname)(id), '..', 'themes'));
    }
  },
  'socket.io': function socketIo(_ref14) {
    var id, ast, job, replaceResolvePathStatement, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, statement, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, node, ifBody, replaced;

    return regeneratorRuntime.async(function socketIo$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            id = _ref14.id, ast = _ref14.ast, job = _ref14.job;

            if (!id.endsWith('socket.io/lib/index.js')) {
              _context3.next = 67;
              break;
            }

            replaceResolvePathStatement = function replaceResolvePathStatement(statement) {
              var arg, resolved, dep, relResolved;
              return regeneratorRuntime.async(function replaceResolvePathStatement$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      if (!(statement.type === 'ExpressionStatement' && statement.expression.type === 'AssignmentExpression' && statement.expression.operator === '=' && statement.expression.right.type === 'CallExpression' && statement.expression.right.callee.type === 'Identifier' && statement.expression.right.callee.name === 'read' && statement.expression.right.arguments.length >= 1 && statement.expression.right.arguments[0].type === 'CallExpression' && statement.expression.right.arguments[0].callee.type === 'Identifier' && statement.expression.right.arguments[0].callee.name === 'resolvePath' && statement.expression.right.arguments[0].arguments.length === 1 && statement.expression.right.arguments[0].arguments[0].type === 'Literal')) {
                        _context2.next = 18;
                        break;
                      }

                      arg = statement.expression.right.arguments[0].arguments[0].value;
                      _context2.prev = 2;
                      _context2.next = 5;
                      return regeneratorRuntime.awrap((0, resolve_dependency_1["default"])(String(arg), id, job));

                    case 5:
                      dep = _context2.sent;

                      if (!(typeof dep === 'string')) {
                        _context2.next = 10;
                        break;
                      }

                      resolved = dep;
                      _context2.next = 11;
                      break;

                    case 10:
                      return _context2.abrupt("return", undefined);

                    case 11:
                      _context2.next = 16;
                      break;

                    case 13:
                      _context2.prev = 13;
                      _context2.t0 = _context2["catch"](2);
                      return _context2.abrupt("return", undefined);

                    case 16:
                      // The asset relocator will then pick up the AST rewriting from here
                      relResolved = '/' + (0, path_1.relative)((0, path_1.dirname)(id), resolved);
                      statement.expression.right.arguments[0] = {
                        type: 'BinaryExpression',
                        // @ts-ignore Its okay if start is undefined
                        start: statement.expression.right.arguments[0].start,
                        // @ts-ignore Its okay if end is undefined
                        end: statement.expression.right.arguments[0].end,
                        operator: '+',
                        left: {
                          type: 'Identifier',
                          name: '__dirname'
                        },
                        right: {
                          type: 'Literal',
                          value: relResolved,
                          raw: JSON.stringify(relResolved)
                        }
                      };

                    case 18:
                      return _context2.abrupt("return", undefined);

                    case 19:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, null, null, [[2, 13]]);
            };

            _iteratorNormalCompletion3 = true;
            _didIteratorError3 = false;
            _iteratorError3 = undefined;
            _context3.prev = 6;
            _iterator3 = ast.body[Symbol.iterator]();

          case 8:
            if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
              _context3.next = 53;
              break;
            }

            statement = _step3.value;

            if (!(statement.type === 'ExpressionStatement' && statement.expression.type === 'AssignmentExpression' && statement.expression.operator === '=' && statement.expression.left.type === 'MemberExpression' && statement.expression.left.object.type === 'MemberExpression' && statement.expression.left.object.object.type === 'Identifier' && statement.expression.left.object.object.name === 'Server' && statement.expression.left.object.property.type === 'Identifier' && statement.expression.left.object.property.name === 'prototype' && statement.expression.left.property.type === 'Identifier' && statement.expression.left.property.name === 'serveClient' && statement.expression.right.type === 'FunctionExpression')) {
              _context3.next = 50;
              break;
            }

            _iteratorNormalCompletion4 = true;
            _didIteratorError4 = false;
            _iteratorError4 = undefined;
            _context3.prev = 14;
            _iterator4 = statement.expression.right.body.body[Symbol.iterator]();

          case 16:
            if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
              _context3.next = 36;
              break;
            }

            node = _step4.value;

            if (!(node.type === 'IfStatement' && node.consequent && 'body' in node.consequent && node.consequent.body)) {
              _context3.next = 33;
              break;
            }

            ifBody = node.consequent.body;
            replaced = false;

            if (!(Array.isArray(ifBody) && ifBody[0] && ifBody[0].type === 'ExpressionStatement')) {
              _context3.next = 25;
              break;
            }

            _context3.next = 24;
            return regeneratorRuntime.awrap(replaceResolvePathStatement(ifBody[0]));

          case 24:
            replaced = _context3.sent;

          case 25:
            if (!(Array.isArray(ifBody) && ifBody[1] && ifBody[1].type === 'TryStatement' && ifBody[1].block.body && ifBody[1].block.body[0])) {
              _context3.next = 32;
              break;
            }

            _context3.next = 28;
            return regeneratorRuntime.awrap(replaceResolvePathStatement(ifBody[1].block.body[0]));

          case 28:
            _context3.t0 = _context3.sent;

            if (_context3.t0) {
              _context3.next = 31;
              break;
            }

            _context3.t0 = replaced;

          case 31:
            replaced = _context3.t0;

          case 32:
            return _context3.abrupt("return");

          case 33:
            _iteratorNormalCompletion4 = true;
            _context3.next = 16;
            break;

          case 36:
            _context3.next = 42;
            break;

          case 38:
            _context3.prev = 38;
            _context3.t1 = _context3["catch"](14);
            _didIteratorError4 = true;
            _iteratorError4 = _context3.t1;

          case 42:
            _context3.prev = 42;
            _context3.prev = 43;

            if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
              _iterator4["return"]();
            }

          case 45:
            _context3.prev = 45;

            if (!_didIteratorError4) {
              _context3.next = 48;
              break;
            }

            throw _iteratorError4;

          case 48:
            return _context3.finish(45);

          case 49:
            return _context3.finish(42);

          case 50:
            _iteratorNormalCompletion3 = true;
            _context3.next = 8;
            break;

          case 53:
            _context3.next = 59;
            break;

          case 55:
            _context3.prev = 55;
            _context3.t2 = _context3["catch"](6);
            _didIteratorError3 = true;
            _iteratorError3 = _context3.t2;

          case 59:
            _context3.prev = 59;
            _context3.prev = 60;

            if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
              _iterator3["return"]();
            }

          case 62:
            _context3.prev = 62;

            if (!_didIteratorError3) {
              _context3.next = 65;
              break;
            }

            throw _iteratorError3;

          case 65:
            return _context3.finish(62);

          case 66:
            return _context3.finish(59);

          case 67:
          case "end":
            return _context3.stop();
        }
      }
    }, null, null, [[6, 55, 59, 67], [14, 38, 42, 50], [43,, 45, 49], [60,, 62, 66]]);
  },
  typescript: function typescript(_ref15) {
    var id = _ref15.id,
        emitAssetDirectory = _ref15.emitAssetDirectory;

    if (id.endsWith('typescript/lib/tsc.js')) {
      emitAssetDirectory((0, path_1.resolve)(id, '../'));
    }
  },
  'uglify-es': function uglifyEs(_ref16) {
    var id = _ref16.id,
        emitAsset = _ref16.emitAsset;

    if (id.endsWith('uglify-es/tools/node.js')) {
      emitAsset((0, path_1.resolve)(id, '../../lib/utils.js'));
      emitAsset((0, path_1.resolve)(id, '../../lib/ast.js'));
      emitAsset((0, path_1.resolve)(id, '../../lib/parse.js'));
      emitAsset((0, path_1.resolve)(id, '../../lib/transform.js'));
      emitAsset((0, path_1.resolve)(id, '../../lib/scope.js'));
      emitAsset((0, path_1.resolve)(id, '../../lib/output.js'));
      emitAsset((0, path_1.resolve)(id, '../../lib/compress.js'));
      emitAsset((0, path_1.resolve)(id, '../../lib/sourcemap.js'));
      emitAsset((0, path_1.resolve)(id, '../../lib/mozilla-ast.js'));
      emitAsset((0, path_1.resolve)(id, '../../lib/propmangle.js'));
      emitAsset((0, path_1.resolve)(id, '../../lib/minify.js'));
      emitAsset((0, path_1.resolve)(id, '../exports.js'));
    }
  },
  'uglify-js': function uglifyJs(_ref17) {
    var id = _ref17.id,
        emitAsset = _ref17.emitAsset,
        emitAssetDirectory = _ref17.emitAssetDirectory;

    if (id.endsWith('uglify-js/tools/node.js')) {
      emitAssetDirectory((0, path_1.resolve)(id, '../../lib'));
      emitAsset((0, path_1.resolve)(id, '../exports.js'));
    }
  },
  'playwright-core': function playwrightCore(_ref18) {
    var id = _ref18.id,
        emitAsset = _ref18.emitAsset;

    if (id.endsWith('playwright-core/index.js')) {
      emitAsset((0, path_1.resolve)((0, path_1.dirname)(id), 'browsers.json'));
    }
  },
  'geo-tz': function geoTz(_ref19) {
    var id = _ref19.id,
        emitAsset = _ref19.emitAsset;

    if (id.endsWith('geo-tz/dist/geo-tz.js')) {
      emitAsset((0, path_1.resolve)((0, path_1.dirname)(id), '../data/geo.dat'));
    }
  },
  pixelmatch: function pixelmatch(_ref20) {
    var id = _ref20.id,
        emitDependency = _ref20.emitDependency;

    if (id.endsWith('pixelmatch/index.js')) {
      emitDependency((0, path_1.resolve)((0, path_1.dirname)(id), 'bin/pixelmatch'));
    }
  }
};

function handleSpecialCases(_ref21) {
  var id, ast, emitDependency, emitAsset, emitAssetDirectory, job, pkgName, specialCase;
  return regeneratorRuntime.async(function handleSpecialCases$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          id = _ref21.id, ast = _ref21.ast, emitDependency = _ref21.emitDependency, emitAsset = _ref21.emitAsset, emitAssetDirectory = _ref21.emitAssetDirectory, job = _ref21.job;
          pkgName = (0, get_package_base_1.getPackageName)(id);
          specialCase = specialCases[pkgName || ''];
          id = id.replace(/\\/g, '/');

          if (!specialCase) {
            _context4.next = 7;
            break;
          }

          _context4.next = 7;
          return regeneratorRuntime.awrap(specialCase({
            id: id,
            ast: ast,
            emitDependency: emitDependency,
            emitAsset: emitAsset,
            emitAssetDirectory: emitAssetDirectory,
            job: job
          }));

        case 7:
        case "end":
          return _context4.stop();
      }
    }
  });
}

exports["default"] = handleSpecialCases;