"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NotFoundError = void 0;

var path_1 = require("path");

var module_1 = require("module"); // node resolver
// custom implementation to emit only needed package.json files for resolver
// (package.json files are emitted as they are hit)


function resolveDependency(specifier, parent, job) {
  var cjsResolve,
      resolved,
      trailingSlash,
      _args = arguments;
  return regeneratorRuntime.async(function resolveDependency$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          cjsResolve = _args.length > 3 && _args[3] !== undefined ? _args[3] : true;

          if (!((0, path_1.isAbsolute)(specifier) || specifier === '.' || specifier === '..' || specifier.startsWith('./') || specifier.startsWith('../'))) {
            _context.next = 8;
            break;
          }

          trailingSlash = specifier.endsWith('/');
          _context.next = 5;
          return regeneratorRuntime.awrap(resolvePath((0, path_1.resolve)(parent, '..', specifier) + (trailingSlash ? '/' : ''), parent, job));

        case 5:
          resolved = _context.sent;
          _context.next = 17;
          break;

        case 8:
          if (!(specifier[0] === '#')) {
            _context.next = 14;
            break;
          }

          _context.next = 11;
          return regeneratorRuntime.awrap(packageImportsResolve(specifier, parent, job, cjsResolve));

        case 11:
          resolved = _context.sent;
          _context.next = 17;
          break;

        case 14:
          _context.next = 16;
          return regeneratorRuntime.awrap(resolvePackage(specifier, parent, job, cjsResolve));

        case 16:
          resolved = _context.sent;

        case 17:
          if (!Array.isArray(resolved)) {
            _context.next = 21;
            break;
          }

          return _context.abrupt("return", Promise.all(resolved.map(function (resolved) {
            return job.realpath(resolved, parent);
          })));

        case 21:
          if (!resolved.startsWith('node:')) {
            _context.next = 25;
            break;
          }

          return _context.abrupt("return", resolved);

        case 25:
          return _context.abrupt("return", job.realpath(resolved, parent));

        case 26:
        case "end":
          return _context.stop();
      }
    }
  });
}

exports["default"] = resolveDependency;

function resolvePath(path, parent, job) {
  var result;
  return regeneratorRuntime.async(function resolvePath$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return regeneratorRuntime.awrap(resolveFile(path, parent, job));

        case 2:
          _context2.t0 = _context2.sent;

          if (_context2.t0) {
            _context2.next = 7;
            break;
          }

          _context2.next = 6;
          return regeneratorRuntime.awrap(resolveDir(path, parent, job));

        case 6:
          _context2.t0 = _context2.sent;

        case 7:
          result = _context2.t0;

          if (result) {
            _context2.next = 10;
            break;
          }

          throw new NotFoundError(path, parent);

        case 10:
          return _context2.abrupt("return", result);

        case 11:
        case "end":
          return _context2.stop();
      }
    }
  });
}

function resolveFile(path, parent, job) {
  return regeneratorRuntime.async(function resolveFile$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          if (!path.endsWith('/')) {
            _context3.next = 2;
            break;
          }

          return _context3.abrupt("return", undefined);

        case 2:
          _context3.next = 4;
          return regeneratorRuntime.awrap(job.realpath(path, parent));

        case 4:
          path = _context3.sent;
          _context3.next = 7;
          return regeneratorRuntime.awrap(job.isFile(path));

        case 7:
          if (!_context3.sent) {
            _context3.next = 9;
            break;
          }

          return _context3.abrupt("return", path);

        case 9:
          _context3.t0 = job.ts && path.startsWith(job.base) && path.slice(job.base.length).indexOf(path_1.sep + 'node_modules' + path_1.sep) === -1;

          if (!_context3.t0) {
            _context3.next = 14;
            break;
          }

          _context3.next = 13;
          return regeneratorRuntime.awrap(job.isFile(path + '.ts'));

        case 13:
          _context3.t0 = _context3.sent;

        case 14:
          if (!_context3.t0) {
            _context3.next = 16;
            break;
          }

          return _context3.abrupt("return", path + '.ts');

        case 16:
          _context3.t1 = job.ts && path.startsWith(job.base) && path.slice(job.base.length).indexOf(path_1.sep + 'node_modules' + path_1.sep) === -1;

          if (!_context3.t1) {
            _context3.next = 21;
            break;
          }

          _context3.next = 20;
          return regeneratorRuntime.awrap(job.isFile(path + '.tsx'));

        case 20:
          _context3.t1 = _context3.sent;

        case 21:
          if (!_context3.t1) {
            _context3.next = 23;
            break;
          }

          return _context3.abrupt("return", path + '.tsx');

        case 23:
          _context3.next = 25;
          return regeneratorRuntime.awrap(job.isFile(path + '.js'));

        case 25:
          if (!_context3.sent) {
            _context3.next = 27;
            break;
          }

          return _context3.abrupt("return", path + '.js');

        case 27:
          _context3.next = 29;
          return regeneratorRuntime.awrap(job.isFile(path + '.json'));

        case 29:
          if (!_context3.sent) {
            _context3.next = 31;
            break;
          }

          return _context3.abrupt("return", path + '.json');

        case 31:
          _context3.next = 33;
          return regeneratorRuntime.awrap(job.isFile(path + '.node'));

        case 33:
          if (!_context3.sent) {
            _context3.next = 35;
            break;
          }

          return _context3.abrupt("return", path + '.node');

        case 35:
          return _context3.abrupt("return", undefined);

        case 36:
        case "end":
          return _context3.stop();
      }
    }
  });
}

function resolveDir(path, parent, job) {
  var pkgCfg, resolved;
  return regeneratorRuntime.async(function resolveDir$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          if (path.endsWith('/')) path = path.slice(0, -1);
          _context4.next = 3;
          return regeneratorRuntime.awrap(job.isDir(path));

        case 3:
          if (_context4.sent) {
            _context4.next = 5;
            break;
          }

          return _context4.abrupt("return");

        case 5:
          _context4.next = 7;
          return regeneratorRuntime.awrap(getPkgCfg(path, job));

        case 7:
          pkgCfg = _context4.sent;

          if (!(pkgCfg && typeof pkgCfg.main === 'string')) {
            _context4.next = 21;
            break;
          }

          _context4.next = 11;
          return regeneratorRuntime.awrap(resolveFile((0, path_1.resolve)(path, pkgCfg.main), parent, job));

        case 11:
          _context4.t0 = _context4.sent;

          if (_context4.t0) {
            _context4.next = 16;
            break;
          }

          _context4.next = 15;
          return regeneratorRuntime.awrap(resolveFile((0, path_1.resolve)(path, pkgCfg.main, 'index'), parent, job));

        case 15:
          _context4.t0 = _context4.sent;

        case 16:
          resolved = _context4.t0;

          if (!resolved) {
            _context4.next = 21;
            break;
          }

          _context4.next = 20;
          return regeneratorRuntime.awrap(job.emitFile(path + path_1.sep + 'package.json', 'resolve', parent));

        case 20:
          return _context4.abrupt("return", resolved);

        case 21:
          return _context4.abrupt("return", resolveFile((0, path_1.resolve)(path, 'index'), parent, job));

        case 22:
        case "end":
          return _context4.stop();
      }
    }
  });
}

var NotFoundError =
/*#__PURE__*/
function (_Error) {
  _inherits(NotFoundError, _Error);

  function NotFoundError(specifier, parent) {
    var _this;

    _classCallCheck(this, NotFoundError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(NotFoundError).call(this, "Cannot find module '" + specifier + "' loaded from " + parent));
    _this.code = 'MODULE_NOT_FOUND';
    return _this;
  }

  return NotFoundError;
}(_wrapNativeSuper(Error));

exports.NotFoundError = NotFoundError;
var nodeBuiltins = new Set(module_1.builtinModules);

function getPkgName(name) {
  var segments = name.split('/');
  if (name[0] === '@' && segments.length > 1) return segments.length > 1 ? segments.slice(0, 2).join('/') : null;
  return segments.length ? segments[0] : null;
}

function getPkgCfg(pkgPath, job) {
  var pjsonSource;
  return regeneratorRuntime.async(function getPkgCfg$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          _context5.next = 2;
          return regeneratorRuntime.awrap(job.readFile(pkgPath + path_1.sep + 'package.json'));

        case 2:
          pjsonSource = _context5.sent;

          if (!pjsonSource) {
            _context5.next = 10;
            break;
          }

          _context5.prev = 4;
          return _context5.abrupt("return", JSON.parse(pjsonSource.toString()));

        case 8:
          _context5.prev = 8;
          _context5.t0 = _context5["catch"](4);

        case 10:
          return _context5.abrupt("return", undefined);

        case 11:
        case "end":
          return _context5.stop();
      }
    }
  }, null, null, [[4, 8]]);
}

function getExportsTarget(exports, conditions, cjsResolve) {
  if (typeof exports === 'string') {
    return exports;
  } else if (exports === null) {
    return exports;
  } else if (Array.isArray(exports)) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = exports[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var item = _step.value;
        var target = getExportsTarget(item, conditions, cjsResolve);
        if (target === null || typeof target === 'string' && target.startsWith('./')) return target;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  } else if (_typeof(exports) === 'object') {
    for (var _i = 0, _Object$keys = Object.keys(exports); _i < _Object$keys.length; _i++) {
      var condition = _Object$keys[_i];

      if (condition === 'default' || condition === 'require' && cjsResolve || condition === 'import' && !cjsResolve || conditions.includes(condition)) {
        var _target = getExportsTarget(exports[condition], conditions, cjsResolve);

        if (_target !== undefined) return _target;
      }
    }
  }

  return undefined;
}

function resolveExportsImports(pkgPath, obj, subpath, job, isImports, cjsResolve) {
  var matchObj;

  if (isImports) {
    if (!(_typeof(obj) === 'object' && !Array.isArray(obj) && obj !== null)) return undefined;
    matchObj = obj;
  } else if (typeof obj === 'string' || Array.isArray(obj) || obj === null || _typeof(obj) === 'object' && Object.keys(obj).length && Object.keys(obj)[0][0] !== '.') {
    matchObj = {
      '.': obj
    };
  } else {
    matchObj = obj;
  }

  if (subpath in matchObj) {
    var target = getExportsTarget(matchObj[subpath], job.conditions, cjsResolve);
    if (typeof target === 'string' && target.startsWith('./')) return pkgPath + target.slice(1);
  }

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = Object.keys(matchObj).sort(function (a, b) {
      return b.length - a.length;
    })[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var match = _step2.value;

      if (match.endsWith('*') && subpath.startsWith(match.slice(0, -1))) {
        var _target2 = getExportsTarget(matchObj[match], job.conditions, cjsResolve);

        if (typeof _target2 === 'string' && _target2.startsWith('./')) return pkgPath + _target2.slice(1).replace(/\*/g, subpath.slice(match.length - 1));
      }

      if (!match.endsWith('/')) continue;

      if (subpath.startsWith(match)) {
        var _target3 = getExportsTarget(matchObj[match], job.conditions, cjsResolve);

        if (typeof _target3 === 'string' && _target3.endsWith('/') && _target3.startsWith('./')) return pkgPath + _target3.slice(1) + subpath.slice(match.length);
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return undefined;
}

function packageImportsResolve(name, parent, job, cjsResolve) {
  var pjsonBoundary, pkgCfg, _ref, pkgImports, importsResolved;

  return regeneratorRuntime.async(function packageImportsResolve$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          if (!(name !== '#' && !name.startsWith('#/') && job.conditions)) {
            _context6.next = 31;
            break;
          }

          _context6.next = 3;
          return regeneratorRuntime.awrap(job.getPjsonBoundary(parent));

        case 3:
          pjsonBoundary = _context6.sent;

          if (!pjsonBoundary) {
            _context6.next = 31;
            break;
          }

          _context6.next = 7;
          return regeneratorRuntime.awrap(getPkgCfg(pjsonBoundary, job));

        case 7:
          pkgCfg = _context6.sent;
          _ref = pkgCfg || {}, pkgImports = _ref.imports;

          if (!(pkgCfg && pkgImports !== null && pkgImports !== undefined)) {
            _context6.next = 31;
            break;
          }

          importsResolved = resolveExportsImports(pjsonBoundary, pkgImports, name, job, true, cjsResolve);

          if (!importsResolved) {
            _context6.next = 31;
            break;
          }

          if (!cjsResolve) {
            _context6.next = 23;
            break;
          }

          _context6.next = 15;
          return regeneratorRuntime.awrap(resolveFile(importsResolved, parent, job));

        case 15:
          _context6.t0 = _context6.sent;

          if (_context6.t0) {
            _context6.next = 20;
            break;
          }

          _context6.next = 19;
          return regeneratorRuntime.awrap(resolveDir(importsResolved, parent, job));

        case 19:
          _context6.t0 = _context6.sent;

        case 20:
          importsResolved = _context6.t0;
          _context6.next = 27;
          break;

        case 23:
          _context6.next = 25;
          return regeneratorRuntime.awrap(job.isFile(importsResolved));

        case 25:
          if (_context6.sent) {
            _context6.next = 27;
            break;
          }

          throw new NotFoundError(importsResolved, parent);

        case 27:
          if (!importsResolved) {
            _context6.next = 31;
            break;
          }

          _context6.next = 30;
          return regeneratorRuntime.awrap(job.emitFile(pjsonBoundary + path_1.sep + 'package.json', 'resolve', parent));

        case 30:
          return _context6.abrupt("return", importsResolved);

        case 31:
          throw new NotFoundError(name, parent);

        case 32:
        case "end":
          return _context6.stop();
      }
    }
  });
}

function resolvePackage(name, parent, job, cjsResolve) {
  var packageParent, pkgName, selfResolved, pjsonBoundary, pkgCfg, _ref2, pkgExports, separatorIndex, rootSeparatorIndex, nodeModulesDir, stat, _pkgCfg, _ref3, _pkgExports, legacyResolved, resolved, _resolved, _i2, _Object$keys2, path, pathTarget, _resolved2;

  return regeneratorRuntime.async(function resolvePackage$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          packageParent = parent;

          if (!nodeBuiltins.has(name)) {
            _context7.next = 3;
            break;
          }

          return _context7.abrupt("return", 'node:' + name);

        case 3:
          if (!name.startsWith('node:')) {
            _context7.next = 5;
            break;
          }

          return _context7.abrupt("return", name);

        case 5:
          pkgName = getPkgName(name) || ''; // package own name resolution

          if (!job.conditions) {
            _context7.next = 36;
            break;
          }

          _context7.next = 9;
          return regeneratorRuntime.awrap(job.getPjsonBoundary(parent));

        case 9:
          pjsonBoundary = _context7.sent;

          if (!pjsonBoundary) {
            _context7.next = 36;
            break;
          }

          _context7.next = 13;
          return regeneratorRuntime.awrap(getPkgCfg(pjsonBoundary, job));

        case 13:
          pkgCfg = _context7.sent;
          _ref2 = pkgCfg || {}, pkgExports = _ref2.exports;

          if (!(pkgCfg && pkgCfg.name && pkgCfg.name === pkgName && pkgExports !== null && pkgExports !== undefined)) {
            _context7.next = 36;
            break;
          }

          selfResolved = resolveExportsImports(pjsonBoundary, pkgExports, '.' + name.slice(pkgName.length), job, false, cjsResolve);

          if (!selfResolved) {
            _context7.next = 33;
            break;
          }

          if (!cjsResolve) {
            _context7.next = 29;
            break;
          }

          _context7.next = 21;
          return regeneratorRuntime.awrap(resolveFile(selfResolved, parent, job));

        case 21:
          _context7.t0 = _context7.sent;

          if (_context7.t0) {
            _context7.next = 26;
            break;
          }

          _context7.next = 25;
          return regeneratorRuntime.awrap(resolveDir(selfResolved, parent, job));

        case 25:
          _context7.t0 = _context7.sent;

        case 26:
          selfResolved = _context7.t0;
          _context7.next = 33;
          break;

        case 29:
          _context7.next = 31;
          return regeneratorRuntime.awrap(job.isFile(selfResolved));

        case 31:
          if (_context7.sent) {
            _context7.next = 33;
            break;
          }

          throw new NotFoundError(selfResolved, parent);

        case 33:
          if (!selfResolved) {
            _context7.next = 36;
            break;
          }

          _context7.next = 36;
          return regeneratorRuntime.awrap(job.emitFile(pjsonBoundary + path_1.sep + 'package.json', 'resolve', parent));

        case 36:
          rootSeparatorIndex = packageParent.indexOf(path_1.sep);

        case 37:
          if (!((separatorIndex = packageParent.lastIndexOf(path_1.sep)) > rootSeparatorIndex)) {
            _context7.next = 101;
            break;
          }

          packageParent = packageParent.slice(0, separatorIndex);
          nodeModulesDir = packageParent + path_1.sep + 'node_modules';
          _context7.next = 42;
          return regeneratorRuntime.awrap(job.stat(nodeModulesDir));

        case 42:
          stat = _context7.sent;

          if (!(!stat || !stat.isDirectory())) {
            _context7.next = 45;
            break;
          }

          return _context7.abrupt("continue", 37);

        case 45:
          _context7.next = 47;
          return regeneratorRuntime.awrap(getPkgCfg(nodeModulesDir + path_1.sep + pkgName, job));

        case 47:
          _pkgCfg = _context7.sent;
          _ref3 = _pkgCfg || {}, _pkgExports = _ref3.exports;

          if (!(job.conditions && _pkgExports !== undefined && _pkgExports !== null && !selfResolved)) {
            _context7.next = 87;
            break;
          }

          legacyResolved = void 0;

          if (job.exportsOnly) {
            _context7.next = 60;
            break;
          }

          _context7.next = 54;
          return regeneratorRuntime.awrap(resolveFile(nodeModulesDir + path_1.sep + name, parent, job));

        case 54:
          _context7.t1 = _context7.sent;

          if (_context7.t1) {
            _context7.next = 59;
            break;
          }

          _context7.next = 58;
          return regeneratorRuntime.awrap(resolveDir(nodeModulesDir + path_1.sep + name, parent, job));

        case 58:
          _context7.t1 = _context7.sent;

        case 59:
          legacyResolved = _context7.t1;

        case 60:
          resolved = resolveExportsImports(nodeModulesDir + path_1.sep + pkgName, _pkgExports, '.' + name.slice(pkgName.length), job, false, cjsResolve);

          if (!resolved) {
            _context7.next = 77;
            break;
          }

          if (!cjsResolve) {
            _context7.next = 73;
            break;
          }

          _context7.next = 65;
          return regeneratorRuntime.awrap(resolveFile(resolved, parent, job));

        case 65:
          _context7.t2 = _context7.sent;

          if (_context7.t2) {
            _context7.next = 70;
            break;
          }

          _context7.next = 69;
          return regeneratorRuntime.awrap(resolveDir(resolved, parent, job));

        case 69:
          _context7.t2 = _context7.sent;

        case 70:
          resolved = _context7.t2;
          _context7.next = 77;
          break;

        case 73:
          _context7.next = 75;
          return regeneratorRuntime.awrap(job.isFile(resolved));

        case 75:
          if (_context7.sent) {
            _context7.next = 77;
            break;
          }

          throw new NotFoundError(resolved, parent);

        case 77:
          if (!resolved) {
            _context7.next = 83;
            break;
          }

          _context7.next = 80;
          return regeneratorRuntime.awrap(job.emitFile(nodeModulesDir + path_1.sep + pkgName + path_1.sep + 'package.json', 'resolve', parent));

        case 80:
          if (!(legacyResolved && legacyResolved !== resolved)) {
            _context7.next = 82;
            break;
          }

          return _context7.abrupt("return", [resolved, legacyResolved]);

        case 82:
          return _context7.abrupt("return", resolved);

        case 83:
          if (!legacyResolved) {
            _context7.next = 85;
            break;
          }

          return _context7.abrupt("return", legacyResolved);

        case 85:
          _context7.next = 99;
          break;

        case 87:
          _context7.next = 89;
          return regeneratorRuntime.awrap(resolveFile(nodeModulesDir + path_1.sep + name, parent, job));

        case 89:
          _context7.t3 = _context7.sent;

          if (_context7.t3) {
            _context7.next = 94;
            break;
          }

          _context7.next = 93;
          return regeneratorRuntime.awrap(resolveDir(nodeModulesDir + path_1.sep + name, parent, job));

        case 93:
          _context7.t3 = _context7.sent;

        case 94:
          _resolved = _context7.t3;

          if (!_resolved) {
            _context7.next = 99;
            break;
          }

          if (!(selfResolved && selfResolved !== _resolved)) {
            _context7.next = 98;
            break;
          }

          return _context7.abrupt("return", [_resolved, selfResolved]);

        case 98:
          return _context7.abrupt("return", _resolved);

        case 99:
          _context7.next = 37;
          break;

        case 101:
          if (!selfResolved) {
            _context7.next = 103;
            break;
          }

          return _context7.abrupt("return", selfResolved);

        case 103:
          if (!Object.hasOwnProperty.call(job.paths, name)) {
            _context7.next = 105;
            break;
          }

          return _context7.abrupt("return", job.paths[name]);

        case 105:
          _i2 = 0, _Object$keys2 = Object.keys(job.paths);

        case 106:
          if (!(_i2 < _Object$keys2.length)) {
            _context7.next = 124;
            break;
          }

          path = _Object$keys2[_i2];

          if (!(path.endsWith('/') && name.startsWith(path))) {
            _context7.next = 121;
            break;
          }

          pathTarget = job.paths[path] + name.slice(path.length);
          _context7.next = 112;
          return regeneratorRuntime.awrap(resolveFile(pathTarget, parent, job));

        case 112:
          _context7.t4 = _context7.sent;

          if (_context7.t4) {
            _context7.next = 117;
            break;
          }

          _context7.next = 116;
          return regeneratorRuntime.awrap(resolveDir(pathTarget, parent, job));

        case 116:
          _context7.t4 = _context7.sent;

        case 117:
          _resolved2 = _context7.t4;

          if (_resolved2) {
            _context7.next = 120;
            break;
          }

          throw new NotFoundError(name, parent);

        case 120:
          return _context7.abrupt("return", _resolved2);

        case 121:
          _i2++;
          _context7.next = 106;
          break;

        case 124:
          throw new NotFoundError(name, parent);

        case 125:
        case "end":
          return _context7.stop();
      }
    }
  });
}