"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.replaceSymbols = exports["default"] = exports.fallbackSymbols = exports.mainSymbols = void 0;

var _isUnicodeSupported = _interopRequireDefault(require("is-unicode-supported"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var common = {
  circleQuestionMark: '(?)',
  questionMarkPrefix: '(?)',
  square: '█',
  squareDarkShade: '▓',
  squareMediumShade: '▒',
  squareLightShade: '░',
  squareTop: '▀',
  squareBottom: '▄',
  squareLeft: '▌',
  squareRight: '▐',
  squareCenter: '■',
  bullet: '●',
  dot: '․',
  ellipsis: '…',
  pointerSmall: '›',
  triangleUp: '▲',
  triangleUpSmall: '▴',
  triangleDown: '▼',
  triangleDownSmall: '▾',
  triangleLeftSmall: '◂',
  triangleRightSmall: '▸',
  home: '⌂',
  heart: '♥',
  musicNote: '♪',
  musicNoteBeamed: '♫',
  arrowUp: '↑',
  arrowDown: '↓',
  arrowLeft: '←',
  arrowRight: '→',
  arrowLeftRight: '↔',
  arrowUpDown: '↕',
  almostEqual: '≈',
  notEqual: '≠',
  lessOrEqual: '≤',
  greaterOrEqual: '≥',
  identical: '≡',
  infinity: '∞',
  subscriptZero: '₀',
  subscriptOne: '₁',
  subscriptTwo: '₂',
  subscriptThree: '₃',
  subscriptFour: '₄',
  subscriptFive: '₅',
  subscriptSix: '₆',
  subscriptSeven: '₇',
  subscriptEight: '₈',
  subscriptNine: '₉',
  oneHalf: '½',
  oneThird: '⅓',
  oneQuarter: '¼',
  oneFifth: '⅕',
  oneSixth: '⅙',
  oneEighth: '⅛',
  twoThirds: '⅔',
  twoFifths: '⅖',
  threeQuarters: '¾',
  threeFifths: '⅗',
  threeEighths: '⅜',
  fourFifths: '⅘',
  fiveSixths: '⅚',
  fiveEighths: '⅝',
  sevenEighths: '⅞',
  line: '─',
  lineBold: '━',
  lineDouble: '═',
  lineDashed0: '┄',
  lineDashed1: '┅',
  lineDashed2: '┈',
  lineDashed3: '┉',
  lineDashed4: '╌',
  lineDashed5: '╍',
  lineDashed6: '╴',
  lineDashed7: '╶',
  lineDashed8: '╸',
  lineDashed9: '╺',
  lineDashed10: '╼',
  lineDashed11: '╾',
  lineDashed12: '−',
  lineDashed13: '–',
  lineDashed14: '‐',
  lineDashed15: '⁃',
  lineVertical: '│',
  lineVerticalBold: '┃',
  lineVerticalDouble: '║',
  lineVerticalDashed0: '┆',
  lineVerticalDashed1: '┇',
  lineVerticalDashed2: '┊',
  lineVerticalDashed3: '┋',
  lineVerticalDashed4: '╎',
  lineVerticalDashed5: '╏',
  lineVerticalDashed6: '╵',
  lineVerticalDashed7: '╷',
  lineVerticalDashed8: '╹',
  lineVerticalDashed9: '╻',
  lineVerticalDashed10: '╽',
  lineVerticalDashed11: '╿',
  lineDownLeft: '┐',
  lineDownLeftArc: '╮',
  lineDownBoldLeftBold: '┓',
  lineDownBoldLeft: '┒',
  lineDownLeftBold: '┑',
  lineDownDoubleLeftDouble: '╗',
  lineDownDoubleLeft: '╖',
  lineDownLeftDouble: '╕',
  lineDownRight: '┌',
  lineDownRightArc: '╭',
  lineDownBoldRightBold: '┏',
  lineDownBoldRight: '┎',
  lineDownRightBold: '┍',
  lineDownDoubleRightDouble: '╔',
  lineDownDoubleRight: '╓',
  lineDownRightDouble: '╒',
  lineUpLeft: '┘',
  lineUpLeftArc: '╯',
  lineUpBoldLeftBold: '┛',
  lineUpBoldLeft: '┚',
  lineUpLeftBold: '┙',
  lineUpDoubleLeftDouble: '╝',
  lineUpDoubleLeft: '╜',
  lineUpLeftDouble: '╛',
  lineUpRight: '└',
  lineUpRightArc: '╰',
  lineUpBoldRightBold: '┗',
  lineUpBoldRight: '┖',
  lineUpRightBold: '┕',
  lineUpDoubleRightDouble: '╚',
  lineUpDoubleRight: '╙',
  lineUpRightDouble: '╘',
  lineUpDownLeft: '┤',
  lineUpBoldDownBoldLeftBold: '┫',
  lineUpBoldDownBoldLeft: '┨',
  lineUpDownLeftBold: '┥',
  lineUpBoldDownLeftBold: '┩',
  lineUpDownBoldLeftBold: '┪',
  lineUpDownBoldLeft: '┧',
  lineUpBoldDownLeft: '┦',
  lineUpDoubleDownDoubleLeftDouble: '╣',
  lineUpDoubleDownDoubleLeft: '╢',
  lineUpDownLeftDouble: '╡',
  lineUpDownRight: '├',
  lineUpBoldDownBoldRightBold: '┣',
  lineUpBoldDownBoldRight: '┠',
  lineUpDownRightBold: '┝',
  lineUpBoldDownRightBold: '┡',
  lineUpDownBoldRightBold: '┢',
  lineUpDownBoldRight: '┟',
  lineUpBoldDownRight: '┞',
  lineUpDoubleDownDoubleRightDouble: '╠',
  lineUpDoubleDownDoubleRight: '╟',
  lineUpDownRightDouble: '╞',
  lineDownLeftRight: '┬',
  lineDownBoldLeftBoldRightBold: '┳',
  lineDownLeftBoldRightBold: '┯',
  lineDownBoldLeftRight: '┰',
  lineDownBoldLeftBoldRight: '┱',
  lineDownBoldLeftRightBold: '┲',
  lineDownLeftRightBold: '┮',
  lineDownLeftBoldRight: '┭',
  lineDownDoubleLeftDoubleRightDouble: '╦',
  lineDownDoubleLeftRight: '╥',
  lineDownLeftDoubleRightDouble: '╤',
  lineUpLeftRight: '┴',
  lineUpBoldLeftBoldRightBold: '┻',
  lineUpLeftBoldRightBold: '┷',
  lineUpBoldLeftRight: '┸',
  lineUpBoldLeftBoldRight: '┹',
  lineUpBoldLeftRightBold: '┺',
  lineUpLeftRightBold: '┶',
  lineUpLeftBoldRight: '┵',
  lineUpDoubleLeftDoubleRightDouble: '╩',
  lineUpDoubleLeftRight: '╨',
  lineUpLeftDoubleRightDouble: '╧',
  lineUpDownLeftRight: '┼',
  lineUpBoldDownBoldLeftBoldRightBold: '╋',
  lineUpDownBoldLeftBoldRightBold: '╈',
  lineUpBoldDownLeftBoldRightBold: '╇',
  lineUpBoldDownBoldLeftRightBold: '╊',
  lineUpBoldDownBoldLeftBoldRight: '╉',
  lineUpBoldDownLeftRight: '╀',
  lineUpDownBoldLeftRight: '╁',
  lineUpDownLeftBoldRight: '┽',
  lineUpDownLeftRightBold: '┾',
  lineUpBoldDownBoldLeftRight: '╂',
  lineUpDownLeftBoldRightBold: '┿',
  lineUpBoldDownLeftBoldRight: '╃',
  lineUpBoldDownLeftRightBold: '╄',
  lineUpDownBoldLeftBoldRight: '╅',
  lineUpDownBoldLeftRightBold: '╆',
  lineUpDoubleDownDoubleLeftDoubleRightDouble: '╬',
  lineUpDoubleDownDoubleLeftRight: '╫',
  lineUpDownLeftDoubleRightDouble: '╪',
  lineCross: '╳',
  lineBackslash: '╲',
  lineSlash: '╱'
};
var specialMainSymbols = {
  tick: '✔',
  info: 'ℹ',
  warning: '⚠',
  cross: '✘',
  squareSmall: '◻',
  squareSmallFilled: '◼',
  circle: '◯',
  circleFilled: '◉',
  circleDotted: '◌',
  circleDouble: '◎',
  circleCircle: 'ⓞ',
  circleCross: 'ⓧ',
  circlePipe: 'Ⓘ',
  radioOn: '◉',
  radioOff: '◯',
  checkboxOn: '☒',
  checkboxOff: '☐',
  checkboxCircleOn: 'ⓧ',
  checkboxCircleOff: 'Ⓘ',
  pointer: '❯',
  triangleUpOutline: '△',
  triangleLeft: '◀',
  triangleRight: '▶',
  lozenge: '◆',
  lozengeOutline: '◇',
  hamburger: '☰',
  smiley: '㋡',
  mustache: '෴',
  star: '★',
  play: '▶',
  nodejs: '⬢',
  oneSeventh: '⅐',
  oneNinth: '⅑',
  oneTenth: '⅒'
};
var specialFallbackSymbols = {
  tick: '√',
  info: 'i',
  warning: '‼',
  cross: '×',
  squareSmall: '□',
  squareSmallFilled: '■',
  circle: '( )',
  circleFilled: '(*)',
  circleDotted: '( )',
  circleDouble: '( )',
  circleCircle: '(○)',
  circleCross: '(×)',
  circlePipe: '(│)',
  radioOn: '(*)',
  radioOff: '( )',
  checkboxOn: '[×]',
  checkboxOff: '[ ]',
  checkboxCircleOn: '(×)',
  checkboxCircleOff: '( )',
  pointer: '>',
  triangleUpOutline: '∆',
  triangleLeft: '◄',
  triangleRight: '►',
  lozenge: '♦',
  lozengeOutline: '◊',
  hamburger: '≡',
  smiley: '☺',
  mustache: '┌─┐',
  star: '✶',
  play: '►',
  nodejs: '♦',
  oneSeventh: '1/7',
  oneNinth: '1/9',
  oneTenth: '1/10'
};

var mainSymbols = _objectSpread({}, common, {}, specialMainSymbols);

exports.mainSymbols = mainSymbols;

var fallbackSymbols = _objectSpread({}, common, {}, specialFallbackSymbols);

exports.fallbackSymbols = fallbackSymbols;
var shouldUseMain = (0, _isUnicodeSupported["default"])();
var figures = shouldUseMain ? mainSymbols : fallbackSymbols;
var _default = figures;
exports["default"] = _default;
var replacements = Object.entries(specialMainSymbols); // On terminals which do not support Unicode symbols, substitute them to other symbols

var replaceSymbols = function replaceSymbols(string) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$useFallback = _ref.useFallback,
      useFallback = _ref$useFallback === void 0 ? !shouldUseMain : _ref$useFallback;

  if (useFallback) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = replacements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _step$value = _slicedToArray(_step.value, 2),
            key = _step$value[0],
            mainSymbol = _step$value[1];

        string = string.replaceAll(mainSymbol, fallbackSymbols[key]);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  return string;
};

exports.replaceSymbols = replaceSymbols;