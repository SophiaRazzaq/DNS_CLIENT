// @flow
'use strict';
/*::
type Match = null | { index: number, total: number };
*/

var envs = [// Knapsack / TravisCI / GitLab
{
  index: 'CI_NODE_INDEX',
  total: 'CI_NODE_TOTAL'
}, // CircleCI
{
  index: 'CIRCLE_NODE_INDEX',
  total: 'CIRCLE_NODE_TOTAL'
}, // Bitbucket Pipelines
{
  index: 'BITBUCKET_PARALLEL_STEP',
  total: 'BITBUCKET_PARALLEL_STEP_COUNT'
}, // Buildkite
{
  index: 'BUILDKITE_PARALLEL_JOB',
  total: 'BUILDKITE_PARALLEL_JOB_COUNT'
}, // Semaphore
{
  index: 'SEMAPHORE_CURRENT_JOB',
  total: 'SEMAPHORE_JOB_COUNT'
}];

var maybeNum = function maybeNum(val) {
  var num = parseInt(val, 10);
  return Number.isNaN(num) ? null : num;
};

var match
/*: Match */
= null;

for (var _i = 0, _envs = envs; _i < _envs.length; _i++) {
  var env = _envs[_i];
  var index = maybeNum(process.env[env.index]);
  var total = maybeNum(process.env[env.total]);

  if (index !== null && total !== null) {
    if (process.env.GITLAB_CI) {
      index = index - 1;
    }

    match = {
      index: index,
      total: total
    };
    break;
  }
}

module.exports = match;